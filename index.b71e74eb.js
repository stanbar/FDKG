// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"lt3WS":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "5c1b77e3b71e74eb";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    if (HMR_USE_SSE) ws = new EventSource("/__parcel_hmr");
    else try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    if (ws instanceof WebSocket) {
        ws.onerror = function(e) {
            if (e.message) console.error(e.message);
        };
        ws.onclose = function() {
            console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
        };
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"h7u1C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// CLI export
parcelHelpers.export(exports, "runSimulation", ()=>runSimulation);
// Add at the top of the file
parcelHelpers.export(exports, "NetworkSimulation", ()=>NetworkSimulation);
var _visNetwork = require("vis-network");
var _visData = require("vis-data");
var _barabasiAlbertNetwork = require("./BarabasiAlbertNetwork");
// Color constants
const COLOR_GREY = "grey";
const COLOR_YELLOW = "yellow";
const COLOR_GREEN = "#4D7A3A";
const COLOR_BLUE = "#0000EC";
const COLOR_HIGHLIGHT = "#00FF00"; // Bright green for decipherable nodes
// Class to handle the network simulation
class NetworkSimulation {
    config;
    uiHandler;
    fdkgArray;
    talliersArray;
    adjacencyList;
    degrees;
    decipherabilityStatus;
    nodes;
    edges;
    constructor(config, uiHandler){
        this.config = config;
        this.uiHandler = uiHandler;
        this.adjacencyList = [];
        this.degrees = [];
        this.decipherabilityStatus = [];
        this.nodes = [];
        this.edges = [];
        if (typeof window !== "undefined") window.simulation = this;
        // Initialize boolean arrays
        this.fdkgArray = new Array(this.config.numberOfNodes).fill(false);
        this.talliersArray = new Array(this.config.numberOfNodes).fill(false);
        this.generateDirectedGraph(this.config.numberOfNodes, this.config.numberOfGuardians);
    }
    // Convert existing functions to methods
    generateDirectedGraph(numberOfNodes, numberOfGuardians) {
        const { adjacencyList, degrees } = this.config.networkModel === "BarabasiAlbert" ? (0, _barabasiAlbertNetwork.generateBarabasiAlbertGraph)(numberOfNodes, numberOfGuardians) : (0, _barabasiAlbertNetwork.generateRandomGraph)(numberOfNodes, numberOfGuardians);
        // Convert adjacency structure from Map<nodeId, Set<nodeId>> to a simple array of arrays
        this.adjacencyList = [];
        adjacencyList.forEach((guardians, nodeId)=>{
            this.adjacencyList[nodeId] = Array.from(guardians);
        });
        this.degrees = degrees;
        // Only create visual nodes if we're in UI mode
        if (this.uiHandler?.renderNetwork) {
            for(let i = 0; i < numberOfNodes; i++){
                const inDegree = degrees[i] - numberOfGuardians;
                if (inDegree < 0) throw new Error(`Node ${i} has in-degree ${inDegree}`);
                this.nodes.push({
                    id: i,
                    label: `Node ${i}`,
                    value: inDegree,
                    color: {
                        background: COLOR_GREY
                    }
                });
            }
            // Create edges
            for(let from = 0; from < numberOfNodes; from++)for (const to of this.adjacencyList[from])this.edges.push({
                from,
                to
            });
            // Update UI if handler exists
            this.uiHandler?.renderNetwork?.();
        }
    }
    checkDecipherability() {
        const threshold = this.config.threshold;
        if (threshold < 0) return false;
        const numNodes = this.degrees.length;
        // For each FDKG node, count how many guardians are in talliers
        for(let nodeId = 0; nodeId < numNodes; nodeId++){
            if (!this.fdkgArray[nodeId]) continue;
            if (this.talliersArray[nodeId]) continue; // if node itself is a tallier, skip guardian check
            const guardians = this.adjacencyList[nodeId];
            let participatingCount = 0;
            for(let i = 0; i < guardians.length; i++){
                const guardianId = guardians[i];
                if (this.talliersArray[guardianId]) {
                    participatingCount++;
                    if (participatingCount >= threshold) break;
                }
            }
            if (participatingCount < threshold) return false;
        }
        return true;
    }
    selectFDKGSet(fkdgPct) {
        const size = Math.floor(this.degrees.length * fkdgPct);
        const newFdkgSet = (0, _barabasiAlbertNetwork.selectNodesByDegree)(this.degrees, size);
        // Clear old array and set new FDKG flags
        this.fdkgArray.fill(false);
        newFdkgSet.forEach((nodeId)=>{
            this.fdkgArray[nodeId] = true;
        });
        this.rerender();
    }
    selectTalliersSet(retPct, newPct) {
        const fdkgIndices = [];
        const nonFdkgIndices = [];
        for(let i = 0; i < this.fdkgArray.length; i++)if (this.fdkgArray[i]) fdkgIndices.push(i);
        else nonFdkgIndices.push(i);
        const retSize = Math.floor(fdkgIndices.length * retPct);
        const talliersFromFdkgSetIndices = (0, _barabasiAlbertNetwork.selectNodesByDegree)(fdkgIndices.map((i)=>this.degrees[i]), retSize);
        const talliersFromFdkgSet = Array.from(talliersFromFdkgSetIndices).map((idx)=>fdkgIndices[idx]);
        const newSize = Math.floor(nonFdkgIndices.length * newPct);
        const talliersFromNonFdkgSetIndices = (0, _barabasiAlbertNetwork.selectNodesByDegree)(nonFdkgIndices.map((i)=>this.degrees[i]), newSize);
        const talliersFromNonFdkgSet = Array.from(talliersFromNonFdkgSetIndices).map((idx)=>nonFdkgIndices[idx]);
        // Clear old talliers
        this.talliersArray.fill(false);
        // Set new talliers
        for (const id of talliersFromFdkgSet)this.talliersArray[id] = true;
        for (const id of talliersFromNonFdkgSet)this.talliersArray[id] = true;
        this.rerender();
    }
    /**
     * Merged UI Update Function
     * This function now:
     * - Updates node colors based on fdkg/talliers membership.
     * - Highlights decipherable nodes (compute decipherabilityStatus).
     * - Updates labels (fdkgLabel, talliersLabel, decipherabilityLabel).
     * - Renders the network.
     * Only runs UI logic if not in CLI mode.
     */ rerender() {
        if (!this.uiHandler?.renderNetwork) return;
        const threshold = this.config.threshold;
        const numNodes = this.degrees.length;
        // Compute decipherability status
        // For each fdkg node:
        // - If it's a tallier: status = "1/1"
        // - Else count how many guardians are talliers: "x/threshold"
        for(let nodeId = 0; nodeId < numNodes; nodeId++){
            this.decipherabilityStatus[nodeId] = "";
            if (this.fdkgArray[nodeId]) {
                if (this.talliersArray[nodeId]) this.decipherabilityStatus[nodeId] = "1/1";
                else {
                    const guardians = this.adjacencyList[nodeId];
                    let participatingCount = 0;
                    for(let i = 0; i < guardians.length; i++){
                        const guardianId = guardians[i];
                        if (this.talliersArray[guardianId]) {
                            participatingCount++;
                            if (participatingCount >= threshold) break;
                        }
                    }
                    this.decipherabilityStatus[nodeId] = `${participatingCount}/${threshold}`;
                }
            }
        }
        // Update node colors
        const updatedNodes = this.nodes.map((node)=>{
            const nodeId = node.id;
            let newColor = COLOR_GREY;
            const isFDKG = this.fdkgArray[nodeId];
            const isTallier = this.talliersArray[nodeId];
            if (isFDKG && isTallier) newColor = COLOR_GREEN;
            else if (isFDKG) newColor = COLOR_YELLOW;
            else if (isTallier) newColor = COLOR_BLUE;
            return {
                ...node,
                color: {
                    background: newColor
                }
            };
        });
        this.nodes = updatedNodes;
        // Update fdkgLabel and talliersLabel
        const fdkgIds = [];
        const talliersIds = [];
        for(let i = 0; i < numNodes; i++){
            if (this.fdkgArray[i]) fdkgIds.push(i);
            if (this.talliersArray[i]) talliersIds.push(i);
        }
        const fdkgLabel = document.getElementById("fdkgLabel");
        if (fdkgLabel) fdkgLabel.innerText = `FDKG set size: ${fdkgIds.length} | IDs: ${fdkgIds.join(", ")}`;
        const talliersLabel = document.getElementById("talliersLabel");
        if (talliersLabel) talliersLabel.innerText = `Talliers set size: ${talliersIds.length} | IDs: ${talliersIds.join(", ")}`;
        // Update decipherabilityLabel
        const decipherabilityLabel = document.getElementById("decipherabilityLabel");
        if (decipherabilityLabel) {
            let content = "Decipherability Status:\n";
            for(let i = 0; i < numNodes; i++)if (this.decipherabilityStatus[i]) content += `Node ${i}: ${this.decipherabilityStatus[i]}\n`;
            decipherabilityLabel.innerText = content.trim();
        }
        const decipherabilityResult = document.getElementById("decipherabilityResult");
        if (decipherabilityResult) {
            const isDecipherable = this.checkDecipherability();
            decipherabilityResult.innerText = `Decipherable: ${isDecipherable ? "Yes" : "No"}`;
            decipherabilityResult.style.color = isDecipherable ? "green" : "red";
        }
        // Re-render network visually
        this.uiHandler.renderNetwork();
    }
}
function runSimulation(config) {
    const simulation = new NetworkSimulation(config);
    return simulation;
}
// UI initialization
if (typeof window !== "undefined") document.addEventListener("DOMContentLoaded", ()=>{
    const generateButton = document.getElementById("generateButton");
    const selectFdkgSubset = document.getElementById("selectFdkgButton");
    const selectTalliersSubset = document.getElementById("secondTalliersButton");
    const nodeSlider = document.getElementById("nodeSlider");
    const guardianSlider = document.getElementById("guardianSlider");
    const fdkgPctSlider = document.getElementById("fdkgPctSlider");
    const retPctSlider = document.getElementById("retPctSlider");
    const physicsSwitch = document.getElementById("physicsSwitch");
    const thresholdSlider = document.getElementById("thresholdSlider");
    let simulation;
    let network;
    // Create UI handler
    const uiHandler = {
        renderNetwork: ()=>{
            const container = document.getElementById("mynetwork");
            if (!container) return;
            const simulation = window.simulation; // Access the simulation instance
            const nodesDataset = new (0, _visData.DataSet)(simulation.nodes);
            const edgesDataset = new (0, _visData.DataSet)(simulation.edges);
            const options = {
                nodes: {
                    shape: "dot",
                    scaling: {
                        min: 10,
                        max: 100
                    },
                    font: {
                        size: 16,
                        color: "#ffffff"
                    }
                },
                edges: {
                    arrows: "to",
                    color: "#848484"
                },
                layout: {
                    randomSeed: 2
                },
                physics: {
                    enabled: physicsSwitch?.checked || false,
                    stabilization: false,
                    forceAtlas2Based: {
                        springConstant: 0.1
                    },
                    maxVelocity: 200,
                    solver: "forceAtlas2Based"
                }
            };
            network = new (0, _visNetwork.Network)(container, {
                nodes: nodesDataset,
                edges: edgesDataset
            }, options);
        }
    };
    generateButton?.addEventListener("click", ()=>{
        const config = {
            numberOfNodes: parseInt(nodeSlider.value, 10),
            numberOfGuardians: parseInt(guardianSlider.value, 10),
            threshold: parseInt(thresholdSlider.value, 10),
            physicsEnabled: physicsSwitch.checked,
            networkModel: "BarabasiAlbert"
        };
        simulation = new NetworkSimulation(config, uiHandler);
        window.simulation = simulation;
    });
    selectFdkgSubset?.addEventListener("click", ()=>{
        if (!simulation) return;
        const fdkgPctVal = parseInt(fdkgPctSlider.value, 10);
        simulation.selectFDKGSet(fdkgPctVal / 100.0);
    });
    selectTalliersSubset?.addEventListener("click", ()=>{
        if (!simulation) return;
        const k = parseInt(retPctSlider.value, 10);
        simulation.selectTalliersSet(k / 100.0, 0.05);
    });
    physicsSwitch?.addEventListener("change", ()=>{
        if (network) network.setOptions({
            physics: {
                enabled: physicsSwitch.checked
            }
        });
    });
});

},{"vis-network":"4HQbv","vis-data":"1zQav","@parcel/transformer-js/src/esmodule-helpers.js":"kO4sA","./BarabasiAlbertNetwork":"9lPY6"}],"4HQbv":[function(require,module,exports) {
/**
 * vis-network
 * https://visjs.github.io/vis-network/
 *
 * A dynamic, browser-based visualization library.
 *
 * @version 9.1.9
 * @date    2023-11-03T01:42:27.418Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */ var global = arguments[3];
!function(t, e) {
    e(exports, require("9d5251a2a98f3fb1"));
}(this, function(t, e) {
    var i = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
    function o(t) {
        return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
    }
    var n = function(t) {
        return t && t.Math === Math && t;
    }, r = n("object" == typeof globalThis && globalThis) || n("object" == typeof window && window) || n("object" == typeof self && self) || n("object" == typeof i && i) || function() {
        return this;
    }() || i || Function("return this")(), s = function(t) {
        try {
            return !!t();
        } catch (t) {
            return !0;
        }
    }, a = !s(function() {
        var t = (function() {}).bind();
        return "function" != typeof t || t.hasOwnProperty("prototype");
    }), h = a, d = Function.prototype, l = d.apply, c = d.call, u = "object" == typeof Reflect && Reflect.apply || (h ? c.bind(l) : function() {
        return c.apply(l, arguments);
    }), f = a, p = Function.prototype, v = p.call, g = f && p.bind.bind(v, v), y = f ? g : function(t) {
        return function() {
            return v.apply(t, arguments);
        };
    }, m = y, b = m({}.toString), w = m("".slice), k = function(t) {
        return w(b(t), 8, -1);
    }, _ = k, x = y, E = function(t) {
        if ("Function" === _(t)) return x(t);
    }, O = "object" == typeof document && document.all, C = {
        all: O,
        IS_HTMLDDA: void 0 === O && void 0 !== O
    }, S = C.all, T = C.IS_HTMLDDA ? function(t) {
        return "function" == typeof t || t === S;
    } : function(t) {
        return "function" == typeof t;
    }, M = {}, P = !s(function() {
        return 7 !== Object.defineProperty({}, 1, {
            get: function() {
                return 7;
            }
        })[1];
    }), D = a, I = Function.prototype.call, B = D ? I.bind(I) : function() {
        return I.apply(I, arguments);
    }, F = {}, z = {}.propertyIsEnumerable, N = Object.getOwnPropertyDescriptor, A = N && !z.call({
        1: 2
    }, 1);
    F.f = A ? function(t) {
        var e = N(this, t);
        return !!e && e.enumerable;
    } : z;
    var R, j, L = function(t, e) {
        return {
            enumerable: !(1 & t),
            configurable: !(2 & t),
            writable: !(4 & t),
            value: e
        };
    }, H = s, W = k, V = Object, q = y("".split), U = H(function() {
        return !V("z").propertyIsEnumerable(0);
    }) ? function(t) {
        return "String" === W(t) ? q(t, "") : V(t);
    } : V, Y = function(t) {
        return null == t;
    }, X = Y, K = TypeError, G = function(t) {
        if (X(t)) throw new K("Can't call method on " + t);
        return t;
    }, $ = U, Z = G, Q = function(t) {
        return $(Z(t));
    }, J = T, tt = C.all, et = C.IS_HTMLDDA ? function(t) {
        return "object" == typeof t ? null !== t : J(t) || t === tt;
    } : function(t) {
        return "object" == typeof t ? null !== t : J(t);
    }, it = {}, ot = it, nt = r, rt = T, st = function(t) {
        return rt(t) ? t : void 0;
    }, at = function(t, e) {
        return arguments.length < 2 ? st(ot[t]) || st(nt[t]) : ot[t] && ot[t][e] || nt[t] && nt[t][e];
    }, ht = y({}.isPrototypeOf), dt = "undefined" != typeof navigator && String(navigator.userAgent) || "", lt = r, ct = dt, ut = lt.process, ft = lt.Deno, pt = ut && ut.versions || ft && ft.version, vt = pt && pt.v8;
    vt && (j = (R = vt.split("."))[0] > 0 && R[0] < 4 ? 1 : +(R[0] + R[1])), !j && ct && (!(R = ct.match(/Edge\/(\d+)/)) || R[1] >= 74) && (R = ct.match(/Chrome\/(\d+)/)) && (j = +R[1]);
    var gt = j, yt = gt, mt = s, bt = r.String, wt = !!Object.getOwnPropertySymbols && !mt(function() {
        var t = Symbol("symbol detection");
        return !bt(t) || !(Object(t) instanceof Symbol) || !Symbol.sham && yt && yt < 41;
    }), kt = wt && !Symbol.sham && "symbol" == typeof Symbol.iterator, _t = at, xt = T, Et = ht, Ot = Object, Ct = kt ? function(t) {
        return "symbol" == typeof t;
    } : function(t) {
        var e = _t("Symbol");
        return xt(e) && Et(e.prototype, Ot(t));
    }, St = String, Tt = function(t) {
        try {
            return St(t);
        } catch (t) {
            return "Object";
        }
    }, Mt = T, Pt = Tt, Dt = TypeError, It = function(t) {
        if (Mt(t)) return t;
        throw new Dt(Pt(t) + " is not a function");
    }, Bt = It, Ft = Y, zt = function(t, e) {
        var i = t[e];
        return Ft(i) ? void 0 : Bt(i);
    }, Nt = B, At = T, Rt = et, jt = TypeError, Lt = {
        exports: {}
    }, Ht = r, Wt = Object.defineProperty, Vt = function(t, e) {
        try {
            Wt(Ht, t, {
                value: e,
                configurable: !0,
                writable: !0
            });
        } catch (i) {
            Ht[t] = e;
        }
        return e;
    }, qt = "__core-js_shared__", Ut = r[qt] || Vt(qt, {}), Yt = Ut;
    (Lt.exports = function(t, e) {
        return Yt[t] || (Yt[t] = void 0 !== e ? e : {});
    })("versions", []).push({
        version: "3.33.0",
        mode: "pure",
        copyright: "\xa9 2014-2023 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.33.0/LICENSE",
        source: "https://github.com/zloirock/core-js"
    });
    var Xt = Lt.exports, Kt = G, Gt = Object, $t = function(t) {
        return Gt(Kt(t));
    }, Zt = $t, Qt = y({}.hasOwnProperty), Jt = Object.hasOwn || function(t, e) {
        return Qt(Zt(t), e);
    }, te = y, ee = 0, ie = Math.random(), oe = te(1..toString), ne = function(t) {
        return "Symbol(" + (void 0 === t ? "" : t) + ")_" + oe(++ee + ie, 36);
    }, re = Xt, se = Jt, ae = ne, he = wt, de = kt, le = r.Symbol, ce = re("wks"), ue = de ? le.for || le : le && le.withoutSetter || ae, fe = function(t) {
        return se(ce, t) || (ce[t] = he && se(le, t) ? le[t] : ue("Symbol." + t)), ce[t];
    }, pe = B, ve = et, ge = Ct, ye = zt, me = function(t, e) {
        var i, o;
        if ("string" === e && At(i = t.toString) && !Rt(o = Nt(i, t))) return o;
        if (At(i = t.valueOf) && !Rt(o = Nt(i, t))) return o;
        if ("string" !== e && At(i = t.toString) && !Rt(o = Nt(i, t))) return o;
        throw new jt("Can't convert object to primitive value");
    }, be = TypeError, we = fe("toPrimitive"), ke = function(t, e) {
        if (!ve(t) || ge(t)) return t;
        var i, o = ye(t, we);
        if (o) {
            if (void 0 === e && (e = "default"), i = pe(o, t, e), !ve(i) || ge(i)) return i;
            throw new be("Can't convert object to primitive value");
        }
        return void 0 === e && (e = "number"), me(t, e);
    }, _e = Ct, xe = function(t) {
        var e = ke(t, "string");
        return _e(e) ? e : e + "";
    }, Ee = et, Oe = r.document, Ce = Ee(Oe) && Ee(Oe.createElement), Se = function(t) {
        return Ce ? Oe.createElement(t) : {};
    }, Te = Se, Me = !P && !s(function() {
        return 7 !== Object.defineProperty(Te("div"), "a", {
            get: function() {
                return 7;
            }
        }).a;
    }), Pe = P, De = B, Ie = F, Be = L, Fe = Q, ze = xe, Ne = Jt, Ae = Me, Re = Object.getOwnPropertyDescriptor;
    M.f = Pe ? Re : function(t, e) {
        if (t = Fe(t), e = ze(e), Ae) try {
            return Re(t, e);
        } catch (t) {}
        if (Ne(t, e)) return Be(!De(Ie.f, t, e), t[e]);
    };
    var je = s, Le = T, He = /#|\.prototype\./, We = function(t, e) {
        var i = qe[Ve(t)];
        return i === Ye || i !== Ue && (Le(e) ? je(e) : !!e);
    }, Ve = We.normalize = function(t) {
        return String(t).replace(He, ".").toLowerCase();
    }, qe = We.data = {}, Ue = We.NATIVE = "N", Ye = We.POLYFILL = "P", Xe = We, Ke = It, Ge = a, $e = E(E.bind), Ze = function(t, e) {
        return Ke(t), void 0 === e ? t : Ge ? $e(t, e) : function() {
            return t.apply(e, arguments);
        };
    }, Qe = {}, Je = P && s(function() {
        return 42 !== Object.defineProperty(function() {}, "prototype", {
            value: 42,
            writable: !1
        }).prototype;
    }), ti = et, ei = String, ii = TypeError, oi = function(t) {
        if (ti(t)) return t;
        throw new ii(ei(t) + " is not an object");
    }, ni = P, ri = Me, si = Je, ai = oi, hi = xe, di = TypeError, li = Object.defineProperty, ci = Object.getOwnPropertyDescriptor, ui = "enumerable", fi = "configurable", pi = "writable";
    Qe.f = ni ? si ? function(t, e, i) {
        if (ai(t), e = hi(e), ai(i), "function" == typeof t && "prototype" === e && "value" in i && pi in i && !i[pi]) {
            var o = ci(t, e);
            o && o[pi] && (t[e] = i.value, i = {
                configurable: fi in i ? i[fi] : o[fi],
                enumerable: ui in i ? i[ui] : o[ui],
                writable: !1
            });
        }
        return li(t, e, i);
    } : li : function(t, e, i) {
        if (ai(t), e = hi(e), ai(i), ri) try {
            return li(t, e, i);
        } catch (t) {}
        if ("get" in i || "set" in i) throw new di("Accessors not supported");
        return "value" in i && (t[e] = i.value), t;
    };
    var vi = Qe, gi = L, yi = P ? function(t, e, i) {
        return vi.f(t, e, gi(1, i));
    } : function(t, e, i) {
        return t[e] = i, t;
    }, mi = r, bi = u, wi = E, ki = T, _i = M.f, xi = Xe, Ei = it, Oi = Ze, Ci = yi, Si = Jt, Ti = function(t) {
        var e = function(i, o, n) {
            if (this instanceof e) {
                switch(arguments.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(i);
                    case 2:
                        return new t(i, o);
                }
                return new t(i, o, n);
            }
            return bi(t, this, arguments);
        };
        return e.prototype = t.prototype, e;
    }, Mi = function(t, e) {
        var i, o, n, r, s, a, h, d, l, c = t.target, u = t.global, f = t.stat, p = t.proto, v = u ? mi : f ? mi[c] : (mi[c] || {}).prototype, g = u ? Ei : Ei[c] || Ci(Ei, c, {})[c], y = g.prototype;
        for(r in e)o = !(i = xi(u ? r : c + (f ? "." : "#") + r, t.forced)) && v && Si(v, r), a = g[r], o && (h = t.dontCallGetSet ? (l = _i(v, r)) && l.value : v[r]), s = o && h ? h : e[r], o && typeof a == typeof s || (d = t.bind && o ? Oi(s, mi) : t.wrap && o ? Ti(s) : p && ki(s) ? wi(s) : s, (t.sham || s && s.sham || a && a.sham) && Ci(d, "sham", !0), Ci(g, r, d), p && (Si(Ei, n = c + "Prototype") || Ci(Ei, n, {}), Ci(Ei[n], r, s), t.real && y && (i || !y[r]) && Ci(y, r, s)));
    }, Pi = Math.ceil, Di = Math.floor, Ii = Math.trunc || function(t) {
        var e = +t;
        return (e > 0 ? Di : Pi)(e);
    }, Bi = function(t) {
        var e = +t;
        return e != e || 0 === e ? 0 : Ii(e);
    }, Fi = Bi, zi = Math.max, Ni = Math.min, Ai = function(t, e) {
        var i = Fi(t);
        return i < 0 ? zi(i + e, 0) : Ni(i, e);
    }, Ri = Bi, ji = Math.min, Li = function(t) {
        return t > 0 ? ji(Ri(t), 9007199254740991) : 0;
    }, Hi = function(t) {
        return Li(t.length);
    }, Wi = Q, Vi = Ai, qi = Hi, Ui = function(t) {
        return function(e, i, o) {
            var n, r = Wi(e), s = qi(r), a = Vi(o, s);
            if (t && i != i) {
                for(; s > a;)if ((n = r[a++]) != n) return !0;
            } else for(; s > a; a++)if ((t || a in r) && r[a] === i) return t || a || 0;
            return !t && -1;
        };
    }, Yi = {
        includes: Ui(!0),
        indexOf: Ui(!1)
    }, Xi = {}, Ki = Jt, Gi = Q, $i = Yi.indexOf, Zi = Xi, Qi = y([].push), Ji = function(t, e) {
        var i, o = Gi(t), n = 0, r = [];
        for(i in o)!Ki(Zi, i) && Ki(o, i) && Qi(r, i);
        for(; e.length > n;)Ki(o, i = e[n++]) && (~$i(r, i) || Qi(r, i));
        return r;
    }, to = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
    ], eo = Ji, io = to, oo = Object.keys || function(t) {
        return eo(t, io);
    }, no = {};
    no.f = Object.getOwnPropertySymbols;
    var ro = P, so = y, ao = B, ho = s, lo = oo, co = no, uo = F, fo = $t, po = U, vo = Object.assign, go = Object.defineProperty, yo = so([].concat), mo = !vo || ho(function() {
        if (ro && 1 !== vo({
            b: 1
        }, vo(go({}, "a", {
            enumerable: !0,
            get: function() {
                go(this, "b", {
                    value: 3,
                    enumerable: !1
                });
            }
        }), {
            b: 2
        })).b) return !0;
        var t = {}, e = {}, i = Symbol("assign detection"), o = "abcdefghijklmnopqrst";
        return t[i] = 7, o.split("").forEach(function(t) {
            e[t] = t;
        }), 7 !== vo({}, t)[i] || lo(vo({}, e)).join("") !== o;
    }) ? function(t, e) {
        for(var i = fo(t), o = arguments.length, n = 1, r = co.f, s = uo.f; o > n;)for(var a, h = po(arguments[n++]), d = r ? yo(lo(h), r(h)) : lo(h), l = d.length, c = 0; l > c;)a = d[c++], ro && !ao(s, h, a) || (i[a] = h[a]);
        return i;
    } : vo, bo = mo;
    Mi({
        target: "Object",
        stat: !0,
        arity: 2,
        forced: Object.assign !== bo
    }, {
        assign: bo
    });
    var wo = o(it.Object.assign), ko = y([].slice), _o = y, xo = It, Eo = et, Oo = Jt, Co = ko, So = a, To = Function, Mo = _o([].concat), Po = _o([].join), Do = {}, Io = So ? To.bind : function(t) {
        var e = xo(this), i = e.prototype, o = Co(arguments, 1), n = function() {
            var i = Mo(o, Co(arguments));
            return this instanceof n ? function(t, e, i) {
                if (!Oo(Do, e)) {
                    for(var o = [], n = 0; n < e; n++)o[n] = "a[" + n + "]";
                    Do[e] = To("C,a", "return new C(" + Po(o, ",") + ")");
                }
                return Do[e](t, i);
            }(e, i.length, i) : e.apply(t, i);
        };
        return Eo(i) && (n.prototype = i), n;
    }, Bo = Io;
    Mi({
        target: "Function",
        proto: !0,
        forced: Function.bind !== Bo
    }, {
        bind: Bo
    });
    var Fo = it, zo = function(t) {
        return Fo[t + "Prototype"];
    }, No = zo("Function").bind, Ao = ht, Ro = No, jo = Function.prototype, Lo = function(t) {
        var e = t.bind;
        return t === jo || Ao(jo, t) && e === jo.bind ? Ro : e;
    }, Ho = Lo, Wo = o(Ho);
    function Vo(t, e, i, o) {
        t.beginPath(), t.arc(e, i, o, 0, 2 * Math.PI, !1), t.closePath();
    }
    function qo(t, e, i, o, n, r) {
        var s = Math.PI / 180;
        o - 2 * r < 0 && (r = o / 2), n - 2 * r < 0 && (r = n / 2), t.beginPath(), t.moveTo(e + r, i), t.lineTo(e + o - r, i), t.arc(e + o - r, i + r, r, 270 * s, 360 * s, !1), t.lineTo(e + o, i + n - r), t.arc(e + o - r, i + n - r, r, 0, 90 * s, !1), t.lineTo(e + r, i + n), t.arc(e + r, i + n - r, r, 90 * s, 180 * s, !1), t.lineTo(e, i + r), t.arc(e + r, i + r, r, 180 * s, 270 * s, !1), t.closePath();
    }
    function Uo(t, e, i, o, n) {
        var r = .5522848, s = o / 2 * r, a = n / 2 * r, h = e + o, d = i + n, l = e + o / 2, c = i + n / 2;
        t.beginPath(), t.moveTo(e, c), t.bezierCurveTo(e, c - a, l - s, i, l, i), t.bezierCurveTo(l + s, i, h, c - a, h, c), t.bezierCurveTo(h, c + a, l + s, d, l, d), t.bezierCurveTo(l - s, d, e, c + a, e, c), t.closePath();
    }
    function Yo(t, e, i, o, n) {
        var r = n * (1 / 3), s = .5522848, a = o / 2 * s, h = r / 2 * s, d = e + o, l = i + r, c = e + o / 2, u = i + r / 2, f = i + (n - r / 2), p = i + n;
        t.beginPath(), t.moveTo(d, u), t.bezierCurveTo(d, u + h, c + a, l, c, l), t.bezierCurveTo(c - a, l, e, u + h, e, u), t.bezierCurveTo(e, u - h, c - a, i, c, i), t.bezierCurveTo(c + a, i, d, u - h, d, u), t.lineTo(d, f), t.bezierCurveTo(d, f + h, c + a, p, c, p), t.bezierCurveTo(c - a, p, e, f + h, e, f), t.lineTo(e, u);
    }
    function Xo(t, e, i, o, n, r) {
        t.beginPath(), t.moveTo(e, i);
        for(var s = r.length, a = o - e, h = n - i, d = h / a, l = Math.sqrt(a * a + h * h), c = 0, u = !0, f = 0, p = +r[0]; l >= .1;)(p = +r[c++ % s]) > l && (p = l), f = Math.sqrt(p * p / (1 + d * d)), e += f = a < 0 ? -f : f, i += d * f, !0 === u ? t.lineTo(e, i) : t.moveTo(e, i), l -= p, u = !u;
    }
    var Ko = {
        circle: Vo,
        dashedLine: Xo,
        database: Yo,
        diamond: function(t, e, i, o) {
            t.beginPath(), t.lineTo(e, i + o), t.lineTo(e + o, i), t.lineTo(e, i - o), t.lineTo(e - o, i), t.closePath();
        },
        ellipse: Uo,
        ellipse_vis: Uo,
        hexagon: function(t, e, i, o) {
            t.beginPath();
            var n = 2 * Math.PI / 6;
            t.moveTo(e + o, i);
            for(var r = 1; r < 6; r++)t.lineTo(e + o * Math.cos(n * r), i + o * Math.sin(n * r));
            t.closePath();
        },
        roundRect: qo,
        square: function(t, e, i, o) {
            t.beginPath(), t.rect(e - o, i - o, 2 * o, 2 * o), t.closePath();
        },
        star: function(t, e, i, o) {
            t.beginPath(), i += .1 * (o *= .82);
            for(var n = 0; n < 10; n++){
                var r = n % 2 == 0 ? 1.3 * o : .5 * o;
                t.lineTo(e + r * Math.sin(2 * n * Math.PI / 10), i - r * Math.cos(2 * n * Math.PI / 10));
            }
            t.closePath();
        },
        triangle: function(t, e, i, o) {
            t.beginPath(), i += .275 * (o *= 1.15);
            var n = 2 * o, r = n / 2, s = Math.sqrt(3) / 6 * n, a = Math.sqrt(n * n - r * r);
            t.moveTo(e, i - (a - s)), t.lineTo(e + r, i + s), t.lineTo(e - r, i + s), t.lineTo(e, i - (a - s)), t.closePath();
        },
        triangleDown: function(t, e, i, o) {
            t.beginPath(), i -= .275 * (o *= 1.15);
            var n = 2 * o, r = n / 2, s = Math.sqrt(3) / 6 * n, a = Math.sqrt(n * n - r * r);
            t.moveTo(e, i + (a - s)), t.lineTo(e + r, i - s), t.lineTo(e - r, i - s), t.lineTo(e, i + (a - s)), t.closePath();
        }
    };
    var Go = {
        exports: {}
    };
    !function(t) {
        function e(t) {
            if (t) return function(t) {
                for(var i in e.prototype)t[i] = e.prototype[i];
                return t;
            }(t);
        }
        t.exports = e, e.prototype.on = e.prototype.addEventListener = function(t, e) {
            return this._callbacks = this._callbacks || {}, (this._callbacks["$" + t] = this._callbacks["$" + t] || []).push(e), this;
        }, e.prototype.once = function(t, e) {
            function i() {
                this.off(t, i), e.apply(this, arguments);
            }
            return i.fn = e, this.on(t, i), this;
        }, e.prototype.off = e.prototype.removeListener = e.prototype.removeAllListeners = e.prototype.removeEventListener = function(t, e) {
            if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;
            var i, o = this._callbacks["$" + t];
            if (!o) return this;
            if (1 == arguments.length) return delete this._callbacks["$" + t], this;
            for(var n = 0; n < o.length; n++)if ((i = o[n]) === e || i.fn === e) {
                o.splice(n, 1);
                break;
            }
            return 0 === o.length && delete this._callbacks["$" + t], this;
        }, e.prototype.emit = function(t) {
            this._callbacks = this._callbacks || {};
            for(var e = new Array(arguments.length - 1), i = this._callbacks["$" + t], o = 1; o < arguments.length; o++)e[o - 1] = arguments[o];
            if (i) {
                o = 0;
                for(var n = (i = i.slice(0)).length; o < n; ++o)i[o].apply(this, e);
            }
            return this;
        }, e.prototype.listeners = function(t) {
            return this._callbacks = this._callbacks || {}, this._callbacks["$" + t] || [];
        }, e.prototype.hasListeners = function(t) {
            return !!this.listeners(t).length;
        };
    }(Go);
    var $o = o(Go.exports), Zo = {};
    Zo[fe("toStringTag")] = "z";
    var Qo, Jo, tn, en = "[object z]" === String(Zo), on = en, nn = T, rn = k, sn = fe("toStringTag"), an = Object, hn = "Arguments" === rn(function() {
        return arguments;
    }()), dn = on ? rn : function(t) {
        var e, i, o;
        return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (i = function(t, e) {
            try {
                return t[e];
            } catch (t) {}
        }(e = an(t), sn)) ? i : hn ? rn(e) : "Object" === (o = rn(e)) && nn(e.callee) ? "Arguments" : o;
    }, ln = dn, cn = String, un = function(t) {
        if ("Symbol" === ln(t)) throw new TypeError("Cannot convert a Symbol value to a string");
        return cn(t);
    }, fn = y, pn = Bi, vn = un, gn = G, yn = fn("".charAt), mn = fn("".charCodeAt), bn = fn("".slice), wn = function(t) {
        return function(e, i) {
            var o, n, r = vn(gn(e)), s = pn(i), a = r.length;
            return s < 0 || s >= a ? t ? "" : void 0 : (o = mn(r, s)) < 55296 || o > 56319 || s + 1 === a || (n = mn(r, s + 1)) < 56320 || n > 57343 ? t ? yn(r, s) : o : t ? bn(r, s, s + 2) : n - 56320 + (o - 55296 << 10) + 65536;
        };
    }, kn = {
        codeAt: wn(!1),
        charAt: wn(!0)
    }, _n = T, xn = r.WeakMap, En = _n(xn) && /native code/.test(String(xn)), On = ne, Cn = Xt("keys"), Sn = function(t) {
        return Cn[t] || (Cn[t] = On(t));
    }, Tn = En, Mn = r, Pn = et, Dn = yi, In = Jt, Bn = Ut, Fn = Sn, zn = Xi, Nn = "Object already initialized", An = Mn.TypeError, Rn = Mn.WeakMap;
    if (Tn || Bn.state) {
        var jn = Bn.state || (Bn.state = new Rn);
        jn.get = jn.get, jn.has = jn.has, jn.set = jn.set, Qo = function(t, e) {
            if (jn.has(t)) throw new An(Nn);
            return e.facade = t, jn.set(t, e), e;
        }, Jo = function(t) {
            return jn.get(t) || {};
        }, tn = function(t) {
            return jn.has(t);
        };
    } else {
        var Ln = Fn("state");
        zn[Ln] = !0, Qo = function(t, e) {
            if (In(t, Ln)) throw new An(Nn);
            return e.facade = t, Dn(t, Ln, e), e;
        }, Jo = function(t) {
            return In(t, Ln) ? t[Ln] : {};
        }, tn = function(t) {
            return In(t, Ln);
        };
    }
    var Hn = {
        set: Qo,
        get: Jo,
        has: tn,
        enforce: function(t) {
            return tn(t) ? Jo(t) : Qo(t, {});
        },
        getterFor: function(t) {
            return function(e) {
                var i;
                if (!Pn(e) || (i = Jo(e)).type !== t) throw new An("Incompatible receiver, " + t + " required");
                return i;
            };
        }
    }, Wn = P, Vn = Jt, qn = Function.prototype, Un = Wn && Object.getOwnPropertyDescriptor, Yn = Vn(qn, "name"), Xn = {
        EXISTS: Yn,
        PROPER: Yn && "something" === (function() {}).name,
        CONFIGURABLE: Yn && (!Wn || Wn && Un(qn, "name").configurable)
    }, Kn = {}, Gn = P, $n = Je, Zn = Qe, Qn = oi, Jn = Q, tr = oo;
    Kn.f = Gn && !$n ? Object.defineProperties : function(t, e) {
        Qn(t);
        for(var i, o = Jn(e), n = tr(e), r = n.length, s = 0; r > s;)Zn.f(t, i = n[s++], o[i]);
        return t;
    };
    var er, ir = at("document", "documentElement"), or = oi, nr = Kn, rr = to, sr = Xi, ar = ir, hr = Se, dr = "prototype", lr = "script", cr = Sn("IE_PROTO"), ur = function() {}, fr = function(t) {
        return "<" + lr + ">" + t + "</" + lr + ">";
    }, pr = function(t) {
        t.write(fr("")), t.close();
        var e = t.parentWindow.Object;
        return t = null, e;
    }, vr = function() {
        try {
            er = new ActiveXObject("htmlfile");
        } catch (t) {}
        var t, e, i;
        vr = "undefined" != typeof document ? document.domain && er ? pr(er) : (e = hr("iframe"), i = "java" + lr + ":", e.style.display = "none", ar.appendChild(e), e.src = String(i), (t = e.contentWindow.document).open(), t.write(fr("document.F=Object")), t.close(), t.F) : pr(er);
        for(var o = rr.length; o--;)delete vr[dr][rr[o]];
        return vr();
    };
    sr[cr] = !0;
    var gr, yr, mr, br = Object.create || function(t, e) {
        var i;
        return null !== t ? (ur[dr] = or(t), i = new ur, ur[dr] = null, i[cr] = t) : i = vr(), void 0 === e ? i : nr.f(i, e);
    }, wr = !s(function() {
        function t() {}
        return t.prototype.constructor = null, Object.getPrototypeOf(new t) !== t.prototype;
    }), kr = Jt, _r = T, xr = $t, Er = wr, Or = Sn("IE_PROTO"), Cr = Object, Sr = Cr.prototype, Tr = Er ? Cr.getPrototypeOf : function(t) {
        var e = xr(t);
        if (kr(e, Or)) return e[Or];
        var i = e.constructor;
        return _r(i) && e instanceof i ? i.prototype : e instanceof Cr ? Sr : null;
    }, Mr = yi, Pr = function(t, e, i, o) {
        return o && o.enumerable ? t[e] = i : Mr(t, e, i), t;
    }, Dr = s, Ir = T, Br = et, Fr = br, zr = Tr, Nr = Pr, Ar = fe("iterator"), Rr = !1;
    [].keys && ("next" in (mr = [].keys()) ? (yr = zr(zr(mr))) !== Object.prototype && (gr = yr) : Rr = !0);
    var jr = !Br(gr) || Dr(function() {
        var t = {};
        return gr[Ar].call(t) !== t;
    });
    Ir((gr = jr ? {} : Fr(gr))[Ar]) || Nr(gr, Ar, function() {
        return this;
    });
    var Lr = {
        IteratorPrototype: gr,
        BUGGY_SAFARI_ITERATORS: Rr
    }, Hr = dn, Wr = en ? ({}).toString : function() {
        return "[object " + Hr(this) + "]";
    }, Vr = en, qr = Qe.f, Ur = yi, Yr = Jt, Xr = Wr, Kr = fe("toStringTag"), Gr = function(t, e, i, o) {
        if (t) {
            var n = i ? t : t.prototype;
            Yr(n, Kr) || qr(n, Kr, {
                configurable: !0,
                value: e
            }), o && !Vr && Ur(n, "toString", Xr);
        }
    }, $r = {}, Zr = Lr.IteratorPrototype, Qr = br, Jr = L, ts = Gr, es = $r, is = function() {
        return this;
    }, os = y, ns = It, rs = T, ss = String, as = TypeError, hs = function(t, e, i) {
        try {
            return os(ns(Object.getOwnPropertyDescriptor(t, e)[i]));
        } catch (t) {}
    }, ds = oi, ls = function(t) {
        if ("object" == typeof t || rs(t)) return t;
        throw new as("Can't set " + ss(t) + " as a prototype");
    }, cs = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var t, e = !1, i = {};
        try {
            (t = hs(Object.prototype, "__proto__", "set"))(i, []), e = i instanceof Array;
        } catch (t) {}
        return function(i, o) {
            return ds(i), ls(o), e ? t(i, o) : i.__proto__ = o, i;
        };
    }() : void 0), us = Mi, fs = B, ps = Xn, vs = function(t, e, i, o) {
        var n = e + " Iterator";
        return t.prototype = Qr(Zr, {
            next: Jr(+!o, i)
        }), ts(t, n, !1, !0), es[n] = is, t;
    }, gs = Tr, ys = Gr, ms = Pr, bs = $r, ws = Lr, ks = ps.PROPER, _s = ws.BUGGY_SAFARI_ITERATORS, xs = fe("iterator"), Es = "keys", Os = "values", Cs = "entries", Ss = function() {
        return this;
    }, Ts = function(t, e, i, o, n, r, s) {
        vs(i, e, o);
        var a, h, d, l = function(t) {
            if (t === n && v) return v;
            if (!_s && t && t in f) return f[t];
            switch(t){
                case Es:
                case Os:
                case Cs:
                    return function() {
                        return new i(this, t);
                    };
            }
            return function() {
                return new i(this);
            };
        }, c = e + " Iterator", u = !1, f = t.prototype, p = f[xs] || f["@@iterator"] || n && f[n], v = !_s && p || l(n), g = "Array" === e && f.entries || p;
        if (g && (a = gs(g.call(new t))) !== Object.prototype && a.next && (ys(a, c, !0, !0), bs[c] = Ss), ks && n === Os && p && p.name !== Os && (u = !0, v = function() {
            return fs(p, this);
        }), n) {
            if (h = {
                values: l(Os),
                keys: r ? v : l(Es),
                entries: l(Cs)
            }, s) for(d in h)(_s || u || !(d in f)) && ms(f, d, h[d]);
            else us({
                target: e,
                proto: !0,
                forced: _s || u
            }, h);
        }
        return s && f[xs] !== v && ms(f, xs, v, {
            name: n
        }), bs[e] = v, h;
    }, Ms = function(t, e) {
        return {
            value: t,
            done: e
        };
    }, Ps = kn.charAt, Ds = un, Is = Hn, Bs = Ts, Fs = Ms, zs = "String Iterator", Ns = Is.set, As = Is.getterFor(zs);
    Bs(String, "String", function(t) {
        Ns(this, {
            type: zs,
            string: Ds(t),
            index: 0
        });
    }, function() {
        var t, e = As(this), i = e.string, o = e.index;
        return o >= i.length ? Fs(void 0, !0) : (t = Ps(i, o), e.index += t.length, Fs(t, !1));
    });
    var Rs = B, js = oi, Ls = zt, Hs = function(t, e, i) {
        var o, n;
        js(t);
        try {
            if (!(o = Ls(t, "return"))) {
                if ("throw" === e) throw i;
                return i;
            }
            o = Rs(o, t);
        } catch (t) {
            n = !0, o = t;
        }
        if ("throw" === e) throw i;
        if (n) throw o;
        return js(o), i;
    }, Ws = oi, Vs = Hs, qs = $r, Us = fe("iterator"), Ys = Array.prototype, Xs = function(t) {
        return void 0 !== t && (qs.Array === t || Ys[Us] === t);
    }, Ks = T, Gs = Ut, $s = y(Function.toString);
    Ks(Gs.inspectSource) || (Gs.inspectSource = function(t) {
        return $s(t);
    });
    var Zs = Gs.inspectSource, Qs = y, Js = s, ta = T, ea = dn, ia = Zs, oa = function() {}, na = [], ra = at("Reflect", "construct"), sa = /^\s*(?:class|function)\b/, aa = Qs(sa.exec), ha = !sa.test(oa), da = function(t) {
        if (!ta(t)) return !1;
        try {
            return ra(oa, na, t), !0;
        } catch (t) {
            return !1;
        }
    }, la = function(t) {
        if (!ta(t)) return !1;
        switch(ea(t)){
            case "AsyncFunction":
            case "GeneratorFunction":
            case "AsyncGeneratorFunction":
                return !1;
        }
        try {
            return ha || !!aa(sa, ia(t));
        } catch (t) {
            return !0;
        }
    };
    la.sham = !0;
    var ca = !ra || Js(function() {
        var t;
        return da(da.call) || !da(Object) || !da(function() {
            t = !0;
        }) || t;
    }) ? la : da, ua = xe, fa = Qe, pa = L, va = function(t, e, i) {
        var o = ua(e);
        o in t ? fa.f(t, o, pa(0, i)) : t[o] = i;
    }, ga = dn, ya = zt, ma = Y, ba = $r, wa = fe("iterator"), ka = function(t) {
        if (!ma(t)) return ya(t, wa) || ya(t, "@@iterator") || ba[ga(t)];
    }, _a = B, xa = It, Ea = oi, Oa = Tt, Ca = ka, Sa = TypeError, Ta = function(t, e) {
        var i = arguments.length < 2 ? Ca(t) : e;
        if (xa(i)) return Ea(_a(i, t));
        throw new Sa(Oa(t) + " is not iterable");
    }, Ma = Ze, Pa = B, Da = $t, Ia = function(t, e, i, o) {
        try {
            return o ? e(Ws(i)[0], i[1]) : e(i);
        } catch (e) {
            Vs(t, "throw", e);
        }
    }, Ba = Xs, Fa = ca, za = Hi, Na = va, Aa = Ta, Ra = ka, ja = Array, La = fe("iterator"), Ha = !1;
    try {
        var Wa = 0, Va = {
            next: function() {
                return {
                    done: !!Wa++
                };
            },
            return: function() {
                Ha = !0;
            }
        };
        Va[La] = function() {
            return this;
        }, Array.from(Va, function() {
            throw 2;
        });
    } catch (t) {}
    var qa = function(t) {
        var e = Da(t), i = Fa(this), o = arguments.length, n = o > 1 ? arguments[1] : void 0, r = void 0 !== n;
        r && (n = Ma(n, o > 2 ? arguments[2] : void 0));
        var s, a, h, d, l, c, u = Ra(e), f = 0;
        if (!u || this === ja && Ba(u)) for(s = za(e), a = i ? new this(s) : ja(s); s > f; f++)c = r ? n(e[f], f) : e[f], Na(a, f, c);
        else for(l = (d = Aa(e, u)).next, a = i ? new this : []; !(h = Pa(l, d)).done; f++)c = r ? Ia(d, n, [
            h.value,
            f
        ], !0) : h.value, Na(a, f, c);
        return a.length = f, a;
    }, Ua = function(t, e) {
        try {
            if (!e && !Ha) return !1;
        } catch (t) {
            return !1;
        }
        var i = !1;
        try {
            var o = {};
            o[La] = function() {
                return {
                    next: function() {
                        return {
                            done: i = !0
                        };
                    }
                };
            }, t(o);
        } catch (t) {}
        return i;
    };
    Mi({
        target: "Array",
        stat: !0,
        forced: !Ua(function(t) {
            Array.from(t);
        })
    }, {
        from: qa
    });
    var Ya = it.Array.from, Xa = o(Ya), Ka = Q, Ga = $r, $a = Hn;
    Qe.f;
    var Za = Ts, Qa = Ms, Ja = "Array Iterator", th = $a.set, eh = $a.getterFor(Ja);
    Za(Array, "Array", function(t, e) {
        th(this, {
            type: Ja,
            target: Ka(t),
            index: 0,
            kind: e
        });
    }, function() {
        var t = eh(this), e = t.target, i = t.kind, o = t.index++;
        if (!e || o >= e.length) return t.target = void 0, Qa(void 0, !0);
        switch(i){
            case "keys":
                return Qa(o, !1);
            case "values":
                return Qa(e[o], !1);
        }
        return Qa([
            o,
            e[o]
        ], !1);
    }, "values"), Ga.Arguments = Ga.Array;
    var ih = ka, oh = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    }, nh = r, rh = dn, sh = yi, ah = $r, hh = fe("toStringTag");
    for(var dh in oh){
        var lh = nh[dh], ch = lh && lh.prototype;
        ch && rh(ch) !== hh && sh(ch, hh, dh), ah[dh] = ah.Array;
    }
    var uh = ih, fh = o(uh), ph = o(uh);
    function vh(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }
    var gh = {
        exports: {}
    }, yh = Mi, mh = P, bh = Qe.f;
    yh({
        target: "Object",
        stat: !0,
        forced: Object.defineProperty !== bh,
        sham: !mh
    }, {
        defineProperty: bh
    });
    var wh = it.Object, kh = gh.exports = function(t, e, i) {
        return wh.defineProperty(t, e, i);
    };
    wh.defineProperty.sham && (kh.sham = !0);
    var _h = gh.exports, xh = o(_h), Eh = k, Oh = Array.isArray || function(t) {
        return "Array" === Eh(t);
    }, Ch = TypeError, Sh = function(t) {
        if (t > 9007199254740991) throw Ch("Maximum allowed index exceeded");
        return t;
    }, Th = Oh, Mh = ca, Ph = et, Dh = fe("species"), Ih = Array, Bh = function(t) {
        var e;
        return Th(t) && (e = t.constructor, (Mh(e) && (e === Ih || Th(e.prototype)) || Ph(e) && null === (e = e[Dh])) && (e = void 0)), void 0 === e ? Ih : e;
    }, Fh = function(t, e) {
        return new (Bh(t))(0 === e ? 0 : e);
    }, zh = s, Nh = gt, Ah = fe("species"), Rh = function(t) {
        return Nh >= 51 || !zh(function() {
            var e = [];
            return (e.constructor = {})[Ah] = function() {
                return {
                    foo: 1
                };
            }, 1 !== e[t](Boolean).foo;
        });
    }, jh = Mi, Lh = s, Hh = Oh, Wh = et, Vh = $t, qh = Hi, Uh = Sh, Yh = va, Xh = Fh, Kh = Rh, Gh = gt, $h = fe("isConcatSpreadable"), Zh = Gh >= 51 || !Lh(function() {
        var t = [];
        return t[$h] = !1, t.concat()[0] !== t;
    }), Qh = function(t) {
        if (!Wh(t)) return !1;
        var e = t[$h];
        return void 0 !== e ? !!e : Hh(t);
    };
    jh({
        target: "Array",
        proto: !0,
        arity: 1,
        forced: !Zh || !Kh("concat")
    }, {
        concat: function(t) {
            var e, i, o, n, r, s = Vh(this), a = Xh(s, 0), h = 0;
            for(e = -1, o = arguments.length; e < o; e++)if (Qh(r = -1 === e ? s : arguments[e])) for(n = qh(r), Uh(h + n), i = 0; i < n; i++, h++)i in r && Yh(a, h, r[i]);
            else Uh(h + 1), Yh(a, h++, r);
            return a.length = h, a;
        }
    });
    var Jh = {}, td = Ji, ed = to.concat("length", "prototype");
    Jh.f = Object.getOwnPropertyNames || function(t) {
        return td(t, ed);
    };
    var id = {}, od = Ai, nd = Hi, rd = va, sd = Array, ad = Math.max, hd = function(t, e, i) {
        for(var o = nd(t), n = od(e, o), r = od(void 0 === i ? o : i, o), s = sd(ad(r - n, 0)), a = 0; n < r; n++, a++)rd(s, a, t[n]);
        return s.length = a, s;
    }, dd = k, ld = Q, cd = Jh.f, ud = hd, fd = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    id.f = function(t) {
        return fd && "Window" === dd(t) ? function(t) {
            try {
                return cd(t);
            } catch (t) {
                return ud(fd);
            }
        }(t) : cd(ld(t));
    };
    var pd = Qe, vd = function(t, e, i) {
        return pd.f(t, e, i);
    }, gd = {}, yd = fe;
    gd.f = yd;
    var md = it, bd = Jt, wd = gd, kd = Qe.f, _d = function(t) {
        var e = md.Symbol || (md.Symbol = {});
        bd(e, t) || kd(e, t, {
            value: wd.f(t)
        });
    }, xd = B, Ed = at, Od = fe, Cd = Pr, Sd = function() {
        var t = Ed("Symbol"), e = t && t.prototype, i = e && e.valueOf, o = Od("toPrimitive");
        e && !e[o] && Cd(e, o, function(t) {
            return xd(i, this);
        }, {
            arity: 1
        });
    }, Td = Ze, Md = U, Pd = $t, Dd = Hi, Id = Fh, Bd = y([].push), Fd = function(t) {
        var e = 1 === t, i = 2 === t, o = 3 === t, n = 4 === t, r = 6 === t, s = 7 === t, a = 5 === t || r;
        return function(h, d, l, c) {
            for(var u, f, p = Pd(h), v = Md(p), g = Td(d, l), y = Dd(v), m = 0, b = c || Id, w = e ? b(h, y) : i || s ? b(h, 0) : void 0; y > m; m++)if ((a || m in v) && (f = g(u = v[m], m, p), t)) {
                if (e) w[m] = f;
                else if (f) switch(t){
                    case 3:
                        return !0;
                    case 5:
                        return u;
                    case 6:
                        return m;
                    case 2:
                        Bd(w, u);
                }
                else switch(t){
                    case 4:
                        return !1;
                    case 7:
                        Bd(w, u);
                }
            }
            return r ? -1 : o || n ? n : w;
        };
    }, zd = {
        forEach: Fd(0),
        map: Fd(1),
        filter: Fd(2),
        some: Fd(3),
        every: Fd(4),
        find: Fd(5),
        findIndex: Fd(6),
        filterReject: Fd(7)
    }, Nd = Mi, Ad = r, Rd = B, jd = y, Ld = P, Hd = wt, Wd = s, Vd = Jt, qd = ht, Ud = oi, Yd = Q, Xd = xe, Kd = un, Gd = L, $d = br, Zd = oo, Qd = Jh, Jd = id, tl = no, el = M, il = Qe, ol = Kn, nl = F, rl = Pr, sl = vd, al = Xt, hl = Xi, dl = ne, ll = fe, cl = gd, ul = _d, fl = Sd, pl = Gr, vl = Hn, gl = zd.forEach, yl = Sn("hidden"), ml = "Symbol", bl = "prototype", wl = vl.set, kl = vl.getterFor(ml), _l = Object[bl], xl = Ad.Symbol, El = xl && xl[bl], Ol = Ad.RangeError, Cl = Ad.TypeError, Sl = Ad.QObject, Tl = el.f, Ml = il.f, Pl = Jd.f, Dl = nl.f, Il = jd([].push), Bl = al("symbols"), Fl = al("op-symbols"), zl = al("wks"), Nl = !Sl || !Sl[bl] || !Sl[bl].findChild, Al = function(t, e, i) {
        var o = Tl(_l, e);
        o && delete _l[e], Ml(t, e, i), o && t !== _l && Ml(_l, e, o);
    }, Rl = Ld && Wd(function() {
        return 7 !== $d(Ml({}, "a", {
            get: function() {
                return Ml(this, "a", {
                    value: 7
                }).a;
            }
        })).a;
    }) ? Al : Ml, jl = function(t, e) {
        var i = Bl[t] = $d(El);
        return wl(i, {
            type: ml,
            tag: t,
            description: e
        }), Ld || (i.description = e), i;
    }, Ll = function(t, e, i) {
        t === _l && Ll(Fl, e, i), Ud(t);
        var o = Xd(e);
        return Ud(i), Vd(Bl, o) ? (i.enumerable ? (Vd(t, yl) && t[yl][o] && (t[yl][o] = !1), i = $d(i, {
            enumerable: Gd(0, !1)
        })) : (Vd(t, yl) || Ml(t, yl, Gd(1, {})), t[yl][o] = !0), Rl(t, o, i)) : Ml(t, o, i);
    }, Hl = function(t, e) {
        Ud(t);
        var i = Yd(e), o = Zd(i).concat(Ul(i));
        return gl(o, function(e) {
            Ld && !Rd(Wl, i, e) || Ll(t, e, i[e]);
        }), t;
    }, Wl = function(t) {
        var e = Xd(t), i = Rd(Dl, this, e);
        return !(this === _l && Vd(Bl, e) && !Vd(Fl, e)) && (!(i || !Vd(this, e) || !Vd(Bl, e) || Vd(this, yl) && this[yl][e]) || i);
    }, Vl = function(t, e) {
        var i = Yd(t), o = Xd(e);
        if (i !== _l || !Vd(Bl, o) || Vd(Fl, o)) {
            var n = Tl(i, o);
            return !n || !Vd(Bl, o) || Vd(i, yl) && i[yl][o] || (n.enumerable = !0), n;
        }
    }, ql = function(t) {
        var e = Pl(Yd(t)), i = [];
        return gl(e, function(t) {
            Vd(Bl, t) || Vd(hl, t) || Il(i, t);
        }), i;
    }, Ul = function(t) {
        var e = t === _l, i = Pl(e ? Fl : Yd(t)), o = [];
        return gl(i, function(t) {
            !Vd(Bl, t) || e && !Vd(_l, t) || Il(o, Bl[t]);
        }), o;
    };
    Hd || (xl = function() {
        if (qd(El, this)) throw new Cl("Symbol is not a constructor");
        var t = arguments.length && void 0 !== arguments[0] ? Kd(arguments[0]) : void 0, e = dl(t), i = function(t) {
            this === _l && Rd(i, Fl, t), Vd(this, yl) && Vd(this[yl], e) && (this[yl][e] = !1);
            var o = Gd(1, t);
            try {
                Rl(this, e, o);
            } catch (t) {
                if (!(t instanceof Ol)) throw t;
                Al(this, e, o);
            }
        };
        return Ld && Nl && Rl(_l, e, {
            configurable: !0,
            set: i
        }), jl(e, t);
    }, rl(El = xl[bl], "toString", function() {
        return kl(this).tag;
    }), rl(xl, "withoutSetter", function(t) {
        return jl(dl(t), t);
    }), nl.f = Wl, il.f = Ll, ol.f = Hl, el.f = Vl, Qd.f = Jd.f = ql, tl.f = Ul, cl.f = function(t) {
        return jl(ll(t), t);
    }, Ld && sl(El, "description", {
        configurable: !0,
        get: function() {
            return kl(this).description;
        }
    })), Nd({
        global: !0,
        constructor: !0,
        wrap: !0,
        forced: !Hd,
        sham: !Hd
    }, {
        Symbol: xl
    }), gl(Zd(zl), function(t) {
        ul(t);
    }), Nd({
        target: ml,
        stat: !0,
        forced: !Hd
    }, {
        useSetter: function() {
            Nl = !0;
        },
        useSimple: function() {
            Nl = !1;
        }
    }), Nd({
        target: "Object",
        stat: !0,
        forced: !Hd,
        sham: !Ld
    }, {
        create: function(t, e) {
            return void 0 === e ? $d(t) : Hl($d(t), e);
        },
        defineProperty: Ll,
        defineProperties: Hl,
        getOwnPropertyDescriptor: Vl
    }), Nd({
        target: "Object",
        stat: !0,
        forced: !Hd
    }, {
        getOwnPropertyNames: ql
    }), fl(), pl(xl, ml), hl[yl] = !0;
    var Yl = wt && !!Symbol.for && !!Symbol.keyFor, Xl = Mi, Kl = at, Gl = Jt, $l = un, Zl = Xt, Ql = Yl, Jl = Zl("string-to-symbol-registry"), tc = Zl("symbol-to-string-registry");
    Xl({
        target: "Symbol",
        stat: !0,
        forced: !Ql
    }, {
        for: function(t) {
            var e = $l(t);
            if (Gl(Jl, e)) return Jl[e];
            var i = Kl("Symbol")(e);
            return Jl[e] = i, tc[i] = e, i;
        }
    });
    var ec = Mi, ic = Jt, oc = Ct, nc = Tt, rc = Yl, sc = Xt("symbol-to-string-registry");
    ec({
        target: "Symbol",
        stat: !0,
        forced: !rc
    }, {
        keyFor: function(t) {
            if (!oc(t)) throw new TypeError(nc(t) + " is not a symbol");
            if (ic(sc, t)) return sc[t];
        }
    });
    var ac = Oh, hc = T, dc = k, lc = un, cc = y([].push), uc = Mi, fc = at, pc = u, vc = B, gc = y, yc = s, mc = T, bc = Ct, wc = ko, kc = function(t) {
        if (hc(t)) return t;
        if (ac(t)) {
            for(var e = t.length, i = [], o = 0; o < e; o++){
                var n = t[o];
                "string" == typeof n ? cc(i, n) : "number" != typeof n && "Number" !== dc(n) && "String" !== dc(n) || cc(i, lc(n));
            }
            var r = i.length, s = !0;
            return function(t, e) {
                if (s) return s = !1, e;
                if (ac(this)) return e;
                for(var o = 0; o < r; o++)if (i[o] === t) return e;
            };
        }
    }, _c = wt, xc = String, Ec = fc("JSON", "stringify"), Oc = gc(/./.exec), Cc = gc("".charAt), Sc = gc("".charCodeAt), Tc = gc("".replace), Mc = gc(1..toString), Pc = /[\uD800-\uDFFF]/g, Dc = /^[\uD800-\uDBFF]$/, Ic = /^[\uDC00-\uDFFF]$/, Bc = !_c || yc(function() {
        var t = fc("Symbol")("stringify detection");
        return "[null]" !== Ec([
            t
        ]) || "{}" !== Ec({
            a: t
        }) || "{}" !== Ec(Object(t));
    }), Fc = yc(function() {
        return '"\udf06\ud834"' !== Ec("\udf06\ud834") || '"\udead"' !== Ec("\udead");
    }), zc = function(t, e) {
        var i = wc(arguments), o = kc(e);
        if (mc(o) || void 0 !== t && !bc(t)) return i[1] = function(t, e) {
            if (mc(o) && (e = vc(o, this, xc(t), e)), !bc(e)) return e;
        }, pc(Ec, null, i);
    }, Nc = function(t, e, i) {
        var o = Cc(i, e - 1), n = Cc(i, e + 1);
        return Oc(Dc, t) && !Oc(Ic, n) || Oc(Ic, t) && !Oc(Dc, o) ? "\\u" + Mc(Sc(t, 0), 16) : t;
    };
    Ec && uc({
        target: "JSON",
        stat: !0,
        arity: 3,
        forced: Bc || Fc
    }, {
        stringify: function(t, e, i) {
            var o = wc(arguments), n = pc(Bc ? zc : Ec, null, o);
            return Fc && "string" == typeof n ? Tc(n, Pc, Nc) : n;
        }
    });
    var Ac = no, Rc = $t;
    Mi({
        target: "Object",
        stat: !0,
        forced: !wt || s(function() {
            Ac.f(1);
        })
    }, {
        getOwnPropertySymbols: function(t) {
            var e = Ac.f;
            return e ? e(Rc(t)) : [];
        }
    }), _d("asyncIterator"), _d("hasInstance"), _d("isConcatSpreadable"), _d("iterator"), _d("match"), _d("matchAll"), _d("replace"), _d("search"), _d("species"), _d("split");
    var jc = Sd;
    _d("toPrimitive"), jc();
    var Lc = at, Hc = Gr;
    _d("toStringTag"), Hc(Lc("Symbol"), "Symbol"), _d("unscopables"), Gr(r.JSON, "JSON", !0);
    var Wc = it.Symbol, Vc = fe, qc = Qe.f, Uc = Vc("metadata"), Yc = Function.prototype;
    void 0 === Yc[Uc] && qc(Yc, Uc, {
        value: null
    }), _d("asyncDispose"), _d("dispose"), _d("metadata");
    var Xc = Wc, Kc = y, Gc = at("Symbol"), $c = Gc.keyFor, Zc = Kc(Gc.prototype.valueOf), Qc = Gc.isRegisteredSymbol || function(t) {
        try {
            return void 0 !== $c(Zc(t));
        } catch (t) {
            return !1;
        }
    };
    Mi({
        target: "Symbol",
        stat: !0
    }, {
        isRegisteredSymbol: Qc
    });
    for(var Jc = Xt, tu = at, eu = y, iu = Ct, ou = fe, nu = tu("Symbol"), ru = nu.isWellKnownSymbol, su = tu("Object", "getOwnPropertyNames"), au = eu(nu.prototype.valueOf), hu = Jc("wks"), du = 0, lu = su(nu), cu = lu.length; du < cu; du++)try {
        var uu = lu[du];
        iu(nu[uu]) && ou(uu);
    } catch (t) {}
    var fu = function(t) {
        if (ru && ru(t)) return !0;
        try {
            for(var e = au(t), i = 0, o = su(hu), n = o.length; i < n; i++)if (hu[o[i]] == e) return !0;
        } catch (t) {}
        return !1;
    };
    Mi({
        target: "Symbol",
        stat: !0,
        forced: !0
    }, {
        isWellKnownSymbol: fu
    }), _d("matcher"), _d("observable"), Mi({
        target: "Symbol",
        stat: !0,
        name: "isRegisteredSymbol"
    }, {
        isRegistered: Qc
    }), Mi({
        target: "Symbol",
        stat: !0,
        name: "isWellKnownSymbol",
        forced: !0
    }, {
        isWellKnown: fu
    }), _d("metadataKey"), _d("patternMatch"), _d("replaceAll");
    var pu = o(Xc), vu = o(gd.f("iterator"));
    function gu(t) {
        return gu = "function" == typeof pu && "symbol" == typeof vu ? function(t) {
            return typeof t;
        } : function(t) {
            return t && "function" == typeof pu && t.constructor === pu && t !== pu.prototype ? "symbol" : typeof t;
        }, gu(t);
    }
    var yu = o(gd.f("toPrimitive"));
    function mu(t) {
        var e = function(t, e) {
            if ("object" !== gu(t) || null === t) return t;
            var i = t[yu];
            if (void 0 !== i) {
                var o = i.call(t, e || "default");
                if ("object" !== gu(o)) return o;
                throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return ("string" === e ? String : Number)(t);
        }(t, "string");
        return "symbol" === gu(e) ? e : String(e);
    }
    function bu(t, e) {
        for(var i = 0; i < e.length; i++){
            var o = e[i];
            o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), xh(t, mu(o.key), o);
        }
    }
    function wu(t, e, i) {
        return e && bu(t.prototype, e), i && bu(t, i), xh(t, "prototype", {
            writable: !1
        }), t;
    }
    Mi({
        target: "Array",
        stat: !0
    }, {
        isArray: Oh
    });
    var ku = it.Array.isArray, _u = o(ku);
    var xu = P, Eu = Oh, Ou = TypeError, Cu = Object.getOwnPropertyDescriptor, Su = xu && !function() {
        if (void 0 !== this) return !0;
        try {
            Object.defineProperty([], "length", {
                writable: !1
            }).length = 1;
        } catch (t) {
            return t instanceof TypeError;
        }
    }() ? function(t, e) {
        if (Eu(t) && !Cu(t, "length").writable) throw new Ou("Cannot set read only .length");
        return t.length = e;
    } : function(t, e) {
        return t.length = e;
    }, Tu = $t, Mu = Hi, Pu = Su, Du = Sh;
    Mi({
        target: "Array",
        proto: !0,
        arity: 1,
        forced: s(function() {
            return 4294967297 !== [].push.call({
                length: 4294967296
            }, 1);
        }) || !function() {
            try {
                Object.defineProperty([], "length", {
                    writable: !1
                }).push();
            } catch (t) {
                return t instanceof TypeError;
            }
        }()
    }, {
        push: function(t) {
            var e = Tu(this), i = Mu(e), o = arguments.length;
            Du(i + o);
            for(var n = 0; n < o; n++)e[i] = arguments[n], i++;
            return Pu(e, i), i;
        }
    });
    var Iu = zo("Array").push, Bu = ht, Fu = Iu, zu = Array.prototype, Nu = function(t) {
        var e = t.push;
        return t === zu || Bu(zu, t) && e === zu.push ? Fu : e;
    }, Au = o(Nu);
    var Ru = Mi, ju = Oh, Lu = ca, Hu = et, Wu = Ai, Vu = Hi, qu = Q, Uu = va, Yu = fe, Xu = ko, Ku = Rh("slice"), Gu = Yu("species"), $u = Array, Zu = Math.max;
    Ru({
        target: "Array",
        proto: !0,
        forced: !Ku
    }, {
        slice: function(t, e) {
            var i, o, n, r = qu(this), s = Vu(r), a = Wu(t, s), h = Wu(void 0 === e ? s : e, s);
            if (ju(r) && (i = r.constructor, (Lu(i) && (i === $u || ju(i.prototype)) || Hu(i) && null === (i = i[Gu])) && (i = void 0), i === $u || void 0 === i)) return Xu(r, a, h);
            for(o = new (void 0 === i ? $u : i)(Zu(h - a, 0)), n = 0; a < h; a++, n++)a in r && Uu(o, n, r[a]);
            return o.length = n, o;
        }
    });
    var Qu = zo("Array").slice, Ju = ht, tf = Qu, ef = Array.prototype, of = function(t) {
        var e = t.slice;
        return t === ef || Ju(ef, t) && e === ef.slice ? tf : e;
    }, nf = of, rf = o(nf), sf = o(Ya);
    function af(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function hf(t, e) {
        var i;
        if (t) {
            if ("string" == typeof t) return af(t, e);
            var o = rf(i = Object.prototype.toString.call(t)).call(i, 8, -1);
            return "Object" === o && t.constructor && (o = t.constructor.name), "Map" === o || "Set" === o ? sf(t) : "Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o) ? af(t, e) : void 0;
        }
    }
    function df(t, e) {
        return function(t) {
            if (_u(t)) return t;
        }(t) || function(t, e) {
            var i = null == t ? null : void 0 !== pu && fh(t) || t["@@iterator"];
            if (null != i) {
                var o, n, r, s, a = [], h = !0, d = !1;
                try {
                    if (r = (i = i.call(t)).next, 0 === e) {
                        if (Object(i) !== i) return;
                        h = !1;
                    } else for(; !(h = (o = r.call(i)).done) && (Au(a).call(a, o.value), a.length !== e); h = !0);
                } catch (t) {
                    d = !0, n = t;
                } finally{
                    try {
                        if (!h && null != i.return && (s = i.return(), Object(s) !== s)) return;
                    } finally{
                        if (d) throw n;
                    }
                }
                return a;
            }
        }(t, e) || hf(t, e) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
    }
    function lf(t) {
        return function(t) {
            if (_u(t)) return af(t);
        }(t) || function(t) {
            if (void 0 !== pu && null != fh(t) || null != t["@@iterator"]) return sf(t);
        }(t) || hf(t) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
    }
    var cf = o(Wc), uf = zo("Array").concat, ff = ht, pf = uf, vf = Array.prototype, gf = function(t) {
        var e = t.concat;
        return t === vf || ff(vf, t) && e === vf.concat ? pf : e;
    }, yf = o(gf), mf = o(nf), bf = at, wf = Jh, kf = no, _f = oi, xf = y([].concat), Ef = bf("Reflect", "ownKeys") || function(t) {
        var e = wf.f(_f(t)), i = kf.f;
        return i ? xf(e, i(t)) : e;
    }, Of = o(ku), Cf = zd.map;
    Mi({
        target: "Array",
        proto: !0,
        forced: !Rh("map")
    }, {
        map: function(t) {
            return Cf(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Sf = zo("Array").map, Tf = ht, Mf = Sf, Pf = Array.prototype, Df = function(t) {
        var e = t.map;
        return t === Pf || Tf(Pf, t) && e === Pf.map ? Mf : e;
    }, If = o(Df), Bf = $t, Ff = oo;
    Mi({
        target: "Object",
        stat: !0,
        forced: s(function() {
            Ff(1);
        })
    }, {
        keys: function(t) {
            return Ff(Bf(t));
        }
    });
    var zf = o(it.Object.keys), Nf = Mi, Af = Date, Rf = y(Af.prototype.getTime);
    Nf({
        target: "Date",
        stat: !0
    }, {
        now: function() {
            return Rf(new Af);
        }
    });
    var jf = o(it.Date.now), Lf = s, Hf = function(t, e) {
        var i = [][t];
        return !!i && Lf(function() {
            i.call(null, e || function() {
                return 1;
            }, 1);
        });
    }, Wf = zd.forEach, Vf = Hf("forEach") ? [].forEach : function(t) {
        return Wf(this, t, arguments.length > 1 ? arguments[1] : void 0);
    };
    Mi({
        target: "Array",
        proto: !0,
        forced: [].forEach !== Vf
    }, {
        forEach: Vf
    });
    var qf = zo("Array").forEach, Uf = dn, Yf = Jt, Xf = ht, Kf = qf, Gf = Array.prototype, $f = {
        DOMTokenList: !0,
        NodeList: !0
    }, Zf = function(t) {
        var e = t.forEach;
        return t === Gf || Xf(Gf, t) && e === Gf.forEach || Yf($f, Uf(t)) ? Kf : e;
    }, Qf = o(Zf), Jf = Mi, tp = Oh, ep = y([].reverse), ip = [
        1,
        2
    ];
    Jf({
        target: "Array",
        proto: !0,
        forced: String(ip) === String(ip.reverse())
    }, {
        reverse: function() {
            return tp(this) && (this.length = this.length), ep(this);
        }
    });
    var op = zo("Array").reverse, np = ht, rp = op, sp = Array.prototype, ap = function(t) {
        var e = t.reverse;
        return t === sp || np(sp, t) && e === sp.reverse ? rp : e;
    }, hp = o(ap), dp = Tt, lp = TypeError, cp = function(t, e) {
        if (!delete t[e]) throw new lp("Cannot delete property " + dp(e) + " of " + dp(t));
    }, up = Mi, fp = $t, pp = Ai, vp = Bi, gp = Hi, yp = Su, mp = Sh, bp = Fh, wp = va, kp = cp, _p = Rh("splice"), xp = Math.max, Ep = Math.min;
    up({
        target: "Array",
        proto: !0,
        forced: !_p
    }, {
        splice: function(t, e) {
            var i, o, n, r, s, a, h = fp(this), d = gp(h), l = pp(t, d), c = arguments.length;
            for(0 === c ? i = o = 0 : 1 === c ? (i = 0, o = d - l) : (i = c - 2, o = Ep(xp(vp(e), 0), d - l)), mp(d + i - o), n = bp(h, o), r = 0; r < o; r++)(s = l + r) in h && wp(n, r, h[s]);
            if (n.length = o, i < o) {
                for(r = l; r < d - o; r++)a = r + i, (s = r + o) in h ? h[a] = h[s] : kp(h, a);
                for(r = d; r > d - o + i; r--)kp(h, r - 1);
            } else if (i > o) for(r = d - o; r > l; r--)a = r + i - 1, (s = r + o - 1) in h ? h[a] = h[s] : kp(h, a);
            for(r = 0; r < i; r++)h[r + l] = arguments[r + 2];
            return yp(h, d - o + i), n;
        }
    });
    var Op = zo("Array").splice, Cp = ht, Sp = Op, Tp = Array.prototype, Mp = function(t) {
        var e = t.splice;
        return t === Tp || Cp(Tp, t) && e === Tp.splice ? Sp : e;
    }, Pp = o(Mp), Dp = Yi.includes;
    Mi({
        target: "Array",
        proto: !0,
        forced: s(function() {
            return !Array(1).includes();
        })
    }, {
        includes: function(t) {
            return Dp(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Ip = zo("Array").includes, Bp = et, Fp = k, zp = fe("match"), Np = function(t) {
        var e;
        return Bp(t) && (void 0 !== (e = t[zp]) ? !!e : "RegExp" === Fp(t));
    }, Ap = TypeError, Rp = fe("match"), jp = Mi, Lp = function(t) {
        if (Np(t)) throw new Ap("The method doesn't accept regular expressions");
        return t;
    }, Hp = G, Wp = un, Vp = function(t) {
        var e = /./;
        try {
            "/./"[t](e);
        } catch (i) {
            try {
                return e[Rp] = !1, "/./"[t](e);
            } catch (t) {}
        }
        return !1;
    }, qp = y("".indexOf);
    jp({
        target: "String",
        proto: !0,
        forced: !Vp("includes")
    }, {
        includes: function(t) {
            return !!~qp(Wp(Hp(this)), Wp(Lp(t)), arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Up = zo("String").includes, Yp = ht, Xp = Ip, Kp = Up, Gp = Array.prototype, $p = String.prototype, Zp = function(t) {
        var e = t.includes;
        return t === Gp || Yp(Gp, t) && e === Gp.includes ? Xp : "string" == typeof t || t === $p || Yp($p, t) && e === $p.includes ? Kp : e;
    }, Qp = o(Zp), Jp = $t, tv = Tr, ev = wr;
    Mi({
        target: "Object",
        stat: !0,
        forced: s(function() {
            tv(1);
        }),
        sham: !ev
    }, {
        getPrototypeOf: function(t) {
            return tv(Jp(t));
        }
    });
    var iv = it.Object.getPrototypeOf, ov = o(iv), nv = zd.filter;
    Mi({
        target: "Array",
        proto: !0,
        forced: !Rh("filter")
    }, {
        filter: function(t) {
            return nv(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var rv = zo("Array").filter, sv = ht, av = rv, hv = Array.prototype, dv = function(t) {
        var e = t.filter;
        return t === hv || sv(hv, t) && e === hv.filter ? av : e;
    }, lv = o(dv), cv = "	\n\v\f\r \xa0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF", uv = G, fv = un, pv = cv, vv = y("".replace), gv = RegExp("^[" + pv + "]+"), yv = RegExp("(^|[^" + pv + "])[" + pv + "]+$"), mv = function(t) {
        return function(e) {
            var i = fv(uv(e));
            return 1 & t && (i = vv(i, gv, "")), 2 & t && (i = vv(i, yv, "$1")), i;
        };
    }, bv = {
        start: mv(1),
        end: mv(2),
        trim: mv(3)
    }, wv = r, kv = s, _v = y, xv = un, Ev = bv.trim, Ov = cv, Cv = wv.parseInt, Sv = wv.Symbol, Tv = Sv && Sv.iterator, Mv = /^[+-]?0x/i, Pv = _v(Mv.exec), Dv = 8 !== Cv(Ov + "08") || 22 !== Cv(Ov + "0x16") || Tv && !kv(function() {
        Cv(Object(Tv));
    }) ? function(t, e) {
        var i = Ev(xv(t));
        return Cv(i, e >>> 0 || (Pv(Mv, i) ? 16 : 10));
    } : Cv;
    Mi({
        global: !0,
        forced: parseInt !== Dv
    }, {
        parseInt: Dv
    });
    var Iv = o(it.parseInt), Bv = Mi, Fv = Yi.indexOf, zv = Hf, Nv = E([].indexOf), Av = !!Nv && 1 / Nv([
        1
    ], 1, -0) < 0;
    Bv({
        target: "Array",
        proto: !0,
        forced: Av || !zv("indexOf")
    }, {
        indexOf: function(t) {
            var e = arguments.length > 1 ? arguments[1] : void 0;
            return Av ? Nv(this, t, e) || 0 : Fv(this, t, e);
        }
    });
    var Rv = zo("Array").indexOf, jv = ht, Lv = Rv, Hv = Array.prototype, Wv = function(t) {
        var e = t.indexOf;
        return t === Hv || jv(Hv, t) && e === Hv.indexOf ? Lv : e;
    }, Vv = o(Wv);
    Mi({
        target: "Object",
        stat: !0,
        sham: !P
    }, {
        create: br
    });
    var qv = it.Object, Uv = function(t, e) {
        return qv.create(t, e);
    }, Yv = o(Uv), Xv = it, Kv = u;
    Xv.JSON || (Xv.JSON = {
        stringify: JSON.stringify
    });
    var Gv = function(t, e, i) {
        return Kv(Xv.JSON.stringify, null, arguments);
    }, $v = o(Gv), Zv = "function" == typeof Bun && Bun && "string" == typeof Bun.version, Qv = TypeError, Jv = r, tg = u, eg = T, ig = Zv, og = dt, ng = ko, rg = function(t, e) {
        if (t < e) throw new Qv("Not enough arguments");
        return t;
    }, sg = Jv.Function, ag = /MSIE .\./.test(og) || ig && function() {
        var t = Jv.Bun.version.split(".");
        return t.length < 3 || "0" === t[0] && (t[1] < 3 || "3" === t[1] && "0" === t[2]);
    }(), hg = function(t, e) {
        var i = e ? 2 : 1;
        return ag ? function(o, n) {
            var r = rg(arguments.length, 1) > i, s = eg(o) ? o : sg(o), a = r ? ng(arguments, i) : [], h = r ? function() {
                tg(s, this, a);
            } : s;
            return e ? t(h, n) : t(h);
        } : t;
    }, dg = Mi, lg = r, cg = hg(lg.setInterval, !0);
    dg({
        global: !0,
        bind: !0,
        forced: lg.setInterval !== cg
    }, {
        setInterval: cg
    });
    var ug = Mi, fg = r, pg = hg(fg.setTimeout, !0);
    ug({
        global: !0,
        bind: !0,
        forced: fg.setTimeout !== pg
    }, {
        setTimeout: pg
    });
    var vg = o(it.setTimeout), gg = $t, yg = Ai, mg = Hi, bg = function(t) {
        for(var e = gg(this), i = mg(e), o = arguments.length, n = yg(o > 1 ? arguments[1] : void 0, i), r = o > 2 ? arguments[2] : void 0, s = void 0 === r ? i : yg(r, i); s > n;)e[n++] = t;
        return e;
    };
    Mi({
        target: "Array",
        proto: !0
    }, {
        fill: bg
    });
    var wg, kg = zo("Array").fill, _g = ht, xg = kg, Eg = Array.prototype, Og = function(t) {
        var e = t.fill;
        return t === Eg || _g(Eg, t) && e === Eg.fill ? xg : e;
    }, Cg = o(Og);
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
	 * http://naver.github.io/egjs
	 *
	 * Forked By Naver egjs
	 * Copyright (c) hammerjs
	 * Licensed under the MIT license */ function Sg() {
        return Sg = Object.assign || function(t) {
            for(var e = 1; e < arguments.length; e++){
                var i = arguments[e];
                for(var o in i)Object.prototype.hasOwnProperty.call(i, o) && (t[o] = i[o]);
            }
            return t;
        }, Sg.apply(this, arguments);
    }
    function Tg(t, e) {
        t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
    }
    function Mg(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t;
    }
    wg = "function" != typeof Object.assign ? function(t) {
        if (null == t) throw new TypeError("Cannot convert undefined or null to object");
        for(var e = Object(t), i = 1; i < arguments.length; i++){
            var o = arguments[i];
            if (null != o) for(var n in o)o.hasOwnProperty(n) && (e[n] = o[n]);
        }
        return e;
    } : Object.assign;
    var Pg, Dg = wg, Ig = [
        "",
        "webkit",
        "Moz",
        "MS",
        "ms",
        "o"
    ], Bg = "undefined" == typeof document ? {
        style: {}
    } : document.createElement("div"), Fg = Math.round, zg = Math.abs, Ng = Date.now;
    function Ag(t, e) {
        for(var i, o, n = e[0].toUpperCase() + e.slice(1), r = 0; r < Ig.length;){
            if ((o = (i = Ig[r]) ? i + n : e) in t) return o;
            r++;
        }
    }
    Pg = "undefined" == typeof window ? {} : window;
    var Rg = Ag(Bg.style, "touchAction"), jg = void 0 !== Rg;
    var Lg = "compute", Hg = "auto", Wg = "manipulation", Vg = "none", qg = "pan-x", Ug = "pan-y", Yg = function() {
        if (!jg) return !1;
        var t = {}, e = Pg.CSS && Pg.CSS.supports;
        return [
            "auto",
            "manipulation",
            "pan-y",
            "pan-x",
            "pan-x pan-y",
            "none"
        ].forEach(function(i) {
            return t[i] = !e || Pg.CSS.supports("touch-action", i);
        }), t;
    }(), Xg = "ontouchstart" in Pg, Kg = void 0 !== Ag(Pg, "PointerEvent"), Gg = Xg && /mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent), $g = "touch", Zg = "mouse", Qg = 25, Jg = 1, ty = 4, ey = 8, iy = 1, oy = 2, ny = 4, ry = 8, sy = 16, ay = oy | ny, hy = ry | sy, dy = ay | hy, ly = [
        "x",
        "y"
    ], cy = [
        "clientX",
        "clientY"
    ];
    function uy(t, e, i) {
        var o;
        if (t) {
            if (t.forEach) t.forEach(e, i);
            else if (void 0 !== t.length) for(o = 0; o < t.length;)e.call(i, t[o], o, t), o++;
            else for(o in t)t.hasOwnProperty(o) && e.call(i, t[o], o, t);
        }
    }
    function fy(t, e) {
        return "function" == typeof t ? t.apply(e && e[0] || void 0, e) : t;
    }
    function py(t, e) {
        return t.indexOf(e) > -1;
    }
    var vy = function() {
        function t(t, e) {
            this.manager = t, this.set(e);
        }
        var e = t.prototype;
        return e.set = function(t) {
            t === Lg && (t = this.compute()), jg && this.manager.element.style && Yg[t] && (this.manager.element.style[Rg] = t), this.actions = t.toLowerCase().trim();
        }, e.update = function() {
            this.set(this.manager.options.touchAction);
        }, e.compute = function() {
            var t = [];
            return uy(this.manager.recognizers, function(e) {
                fy(e.options.enable, [
                    e
                ]) && (t = t.concat(e.getTouchAction()));
            }), function(t) {
                if (py(t, Vg)) return Vg;
                var e = py(t, qg), i = py(t, Ug);
                return e && i ? Vg : e || i ? e ? qg : Ug : py(t, Wg) ? Wg : Hg;
            }(t.join(" "));
        }, e.preventDefaults = function(t) {
            var e = t.srcEvent, i = t.offsetDirection;
            if (this.manager.session.prevented) e.preventDefault();
            else {
                var o = this.actions, n = py(o, Vg) && !Yg[Vg], r = py(o, Ug) && !Yg[Ug], s = py(o, qg) && !Yg[qg];
                if (n) {
                    var a = 1 === t.pointers.length, h = t.distance < 2, d = t.deltaTime < 250;
                    if (a && h && d) return;
                }
                if (!s || !r) return n || r && i & ay || s && i & hy ? this.preventSrc(e) : void 0;
            }
        }, e.preventSrc = function(t) {
            this.manager.session.prevented = !0, t.preventDefault();
        }, t;
    }();
    function gy(t, e) {
        for(; t;){
            if (t === e) return !0;
            t = t.parentNode;
        }
        return !1;
    }
    function yy(t) {
        var e = t.length;
        if (1 === e) return {
            x: Fg(t[0].clientX),
            y: Fg(t[0].clientY)
        };
        for(var i = 0, o = 0, n = 0; n < e;)i += t[n].clientX, o += t[n].clientY, n++;
        return {
            x: Fg(i / e),
            y: Fg(o / e)
        };
    }
    function my(t) {
        for(var e = [], i = 0; i < t.pointers.length;)e[i] = {
            clientX: Fg(t.pointers[i].clientX),
            clientY: Fg(t.pointers[i].clientY)
        }, i++;
        return {
            timeStamp: Ng(),
            pointers: e,
            center: yy(e),
            deltaX: t.deltaX,
            deltaY: t.deltaY
        };
    }
    function by(t, e, i) {
        i || (i = ly);
        var o = e[i[0]] - t[i[0]], n = e[i[1]] - t[i[1]];
        return Math.sqrt(o * o + n * n);
    }
    function wy(t, e, i) {
        i || (i = ly);
        var o = e[i[0]] - t[i[0]], n = e[i[1]] - t[i[1]];
        return 180 * Math.atan2(n, o) / Math.PI;
    }
    function ky(t, e) {
        return t === e ? iy : zg(t) >= zg(e) ? t < 0 ? oy : ny : e < 0 ? ry : sy;
    }
    function _y(t, e, i) {
        return {
            x: e / t || 0,
            y: i / t || 0
        };
    }
    function xy(t, e) {
        var i = t.session, o = e.pointers, n = o.length;
        i.firstInput || (i.firstInput = my(e)), n > 1 && !i.firstMultiple ? i.firstMultiple = my(e) : 1 === n && (i.firstMultiple = !1);
        var r = i.firstInput, s = i.firstMultiple, a = s ? s.center : r.center, h = e.center = yy(o);
        e.timeStamp = Ng(), e.deltaTime = e.timeStamp - r.timeStamp, e.angle = wy(a, h), e.distance = by(a, h), function(t, e) {
            var i = e.center, o = t.offsetDelta || {}, n = t.prevDelta || {}, r = t.prevInput || {};
            e.eventType !== Jg && r.eventType !== ty || (n = t.prevDelta = {
                x: r.deltaX || 0,
                y: r.deltaY || 0
            }, o = t.offsetDelta = {
                x: i.x,
                y: i.y
            }), e.deltaX = n.x + (i.x - o.x), e.deltaY = n.y + (i.y - o.y);
        }(i, e), e.offsetDirection = ky(e.deltaX, e.deltaY);
        var d, l, c = _y(e.deltaTime, e.deltaX, e.deltaY);
        e.overallVelocityX = c.x, e.overallVelocityY = c.y, e.overallVelocity = zg(c.x) > zg(c.y) ? c.x : c.y, e.scale = s ? (d = s.pointers, by((l = o)[0], l[1], cy) / by(d[0], d[1], cy)) : 1, e.rotation = s ? function(t, e) {
            return wy(e[1], e[0], cy) + wy(t[1], t[0], cy);
        }(s.pointers, o) : 0, e.maxPointers = i.prevInput ? e.pointers.length > i.prevInput.maxPointers ? e.pointers.length : i.prevInput.maxPointers : e.pointers.length, function(t, e) {
            var i, o, n, r, s = t.lastInterval || e, a = e.timeStamp - s.timeStamp;
            if (e.eventType !== ey && (a > Qg || void 0 === s.velocity)) {
                var h = e.deltaX - s.deltaX, d = e.deltaY - s.deltaY, l = _y(a, h, d);
                o = l.x, n = l.y, i = zg(l.x) > zg(l.y) ? l.x : l.y, r = ky(h, d), t.lastInterval = e;
            } else i = s.velocity, o = s.velocityX, n = s.velocityY, r = s.direction;
            e.velocity = i, e.velocityX = o, e.velocityY = n, e.direction = r;
        }(i, e);
        var u, f = t.element, p = e.srcEvent;
        gy(u = p.composedPath ? p.composedPath()[0] : p.path ? p.path[0] : p.target, f) && (f = u), e.target = f;
    }
    function Ey(t, e, i) {
        var o = i.pointers.length, n = i.changedPointers.length, r = e & Jg && o - n == 0, s = e & (ty | ey) && o - n == 0;
        i.isFirst = !!r, i.isFinal = !!s, r && (t.session = {}), i.eventType = e, xy(t, i), t.emit("hammer.input", i), t.recognize(i), t.session.prevInput = i;
    }
    function Oy(t) {
        return t.trim().split(/\s+/g);
    }
    function Cy(t, e, i) {
        uy(Oy(e), function(e) {
            t.addEventListener(e, i, !1);
        });
    }
    function Sy(t, e, i) {
        uy(Oy(e), function(e) {
            t.removeEventListener(e, i, !1);
        });
    }
    function Ty(t) {
        var e = t.ownerDocument || t;
        return e.defaultView || e.parentWindow || window;
    }
    var My = function() {
        function t(t, e) {
            var i = this;
            this.manager = t, this.callback = e, this.element = t.element, this.target = t.options.inputTarget, this.domHandler = function(e) {
                fy(t.options.enable, [
                    t
                ]) && i.handler(e);
            }, this.init();
        }
        var e = t.prototype;
        return e.handler = function() {}, e.init = function() {
            this.evEl && Cy(this.element, this.evEl, this.domHandler), this.evTarget && Cy(this.target, this.evTarget, this.domHandler), this.evWin && Cy(Ty(this.element), this.evWin, this.domHandler);
        }, e.destroy = function() {
            this.evEl && Sy(this.element, this.evEl, this.domHandler), this.evTarget && Sy(this.target, this.evTarget, this.domHandler), this.evWin && Sy(Ty(this.element), this.evWin, this.domHandler);
        }, t;
    }();
    function Py(t, e, i) {
        if (t.indexOf && !i) return t.indexOf(e);
        for(var o = 0; o < t.length;){
            if (i && t[o][i] == e || !i && t[o] === e) return o;
            o++;
        }
        return -1;
    }
    var Dy = {
        pointerdown: Jg,
        pointermove: 2,
        pointerup: ty,
        pointercancel: ey,
        pointerout: ey
    }, Iy = {
        2: $g,
        3: "pen",
        4: Zg,
        5: "kinect"
    }, By = "pointerdown", Fy = "pointermove pointerup pointercancel";
    Pg.MSPointerEvent && !Pg.PointerEvent && (By = "MSPointerDown", Fy = "MSPointerMove MSPointerUp MSPointerCancel");
    var zy = function(t) {
        function e() {
            var i, o = e.prototype;
            return o.evEl = By, o.evWin = Fy, (i = t.apply(this, arguments) || this).store = i.manager.session.pointerEvents = [], i;
        }
        return Tg(e, t), e.prototype.handler = function(t) {
            var e = this.store, i = !1, o = t.type.toLowerCase().replace("ms", ""), n = Dy[o], r = Iy[t.pointerType] || t.pointerType, s = r === $g, a = Py(e, t.pointerId, "pointerId");
            n & Jg && (0 === t.button || s) ? a < 0 && (e.push(t), a = e.length - 1) : n & (ty | ey) && (i = !0), a < 0 || (e[a] = t, this.callback(this.manager, n, {
                pointers: e,
                changedPointers: [
                    t
                ],
                pointerType: r,
                srcEvent: t
            }), i && e.splice(a, 1));
        }, e;
    }(My);
    function Ny(t) {
        return Array.prototype.slice.call(t, 0);
    }
    function Ay(t, e, i) {
        for(var o = [], n = [], r = 0; r < t.length;){
            var s = e ? t[r][e] : t[r];
            Py(n, s) < 0 && o.push(t[r]), n[r] = s, r++;
        }
        return i && (o = e ? o.sort(function(t, i) {
            return t[e] > i[e];
        }) : o.sort()), o;
    }
    var Ry = {
        touchstart: Jg,
        touchmove: 2,
        touchend: ty,
        touchcancel: ey
    }, jy = function(t) {
        function e() {
            var i;
            return e.prototype.evTarget = "touchstart touchmove touchend touchcancel", (i = t.apply(this, arguments) || this).targetIds = {}, i;
        }
        return Tg(e, t), e.prototype.handler = function(t) {
            var e = Ry[t.type], i = Ly.call(this, t, e);
            i && this.callback(this.manager, e, {
                pointers: i[0],
                changedPointers: i[1],
                pointerType: $g,
                srcEvent: t
            });
        }, e;
    }(My);
    function Ly(t, e) {
        var i, o, n = Ny(t.touches), r = this.targetIds;
        if (e & (2 | Jg) && 1 === n.length) return r[n[0].identifier] = !0, [
            n,
            n
        ];
        var s = Ny(t.changedTouches), a = [], h = this.target;
        if (o = n.filter(function(t) {
            return gy(t.target, h);
        }), e === Jg) for(i = 0; i < o.length;)r[o[i].identifier] = !0, i++;
        for(i = 0; i < s.length;)r[s[i].identifier] && a.push(s[i]), e & (ty | ey) && delete r[s[i].identifier], i++;
        return a.length ? [
            Ay(o.concat(a), "identifier", !0),
            a
        ] : void 0;
    }
    var Hy = {
        mousedown: Jg,
        mousemove: 2,
        mouseup: ty
    }, Wy = function(t) {
        function e() {
            var i, o = e.prototype;
            return o.evEl = "mousedown", o.evWin = "mousemove mouseup", (i = t.apply(this, arguments) || this).pressed = !1, i;
        }
        return Tg(e, t), e.prototype.handler = function(t) {
            var e = Hy[t.type];
            e & Jg && 0 === t.button && (this.pressed = !0), 2 & e && 1 !== t.which && (e = ty), this.pressed && (e & ty && (this.pressed = !1), this.callback(this.manager, e, {
                pointers: [
                    t
                ],
                changedPointers: [
                    t
                ],
                pointerType: Zg,
                srcEvent: t
            }));
        }, e;
    }(My), Vy = 2500;
    function qy(t) {
        var e = t.changedPointers[0];
        if (e.identifier === this.primaryTouch) {
            var i = {
                x: e.clientX,
                y: e.clientY
            }, o = this.lastTouches;
            this.lastTouches.push(i);
            setTimeout(function() {
                var t = o.indexOf(i);
                t > -1 && o.splice(t, 1);
            }, Vy);
        }
    }
    function Uy(t, e) {
        t & Jg ? (this.primaryTouch = e.changedPointers[0].identifier, qy.call(this, e)) : t & (ty | ey) && qy.call(this, e);
    }
    function Yy(t) {
        for(var e = t.srcEvent.clientX, i = t.srcEvent.clientY, o = 0; o < this.lastTouches.length; o++){
            var n = this.lastTouches[o], r = Math.abs(e - n.x), s = Math.abs(i - n.y);
            if (r <= 25 && s <= 25) return !0;
        }
        return !1;
    }
    var Xy = function() {
        return function(t) {
            function e(e, i) {
                var o;
                return (o = t.call(this, e, i) || this).handler = function(t, e, i) {
                    var n = i.pointerType === $g, r = i.pointerType === Zg;
                    if (!(r && i.sourceCapabilities && i.sourceCapabilities.firesTouchEvents)) {
                        if (n) Uy.call(Mg(Mg(o)), e, i);
                        else if (r && Yy.call(Mg(Mg(o)), i)) return;
                        o.callback(t, e, i);
                    }
                }, o.touch = new jy(o.manager, o.handler), o.mouse = new Wy(o.manager, o.handler), o.primaryTouch = null, o.lastTouches = [], o;
            }
            return Tg(e, t), e.prototype.destroy = function() {
                this.touch.destroy(), this.mouse.destroy();
            }, e;
        }(My);
    }();
    function Ky(t, e, i) {
        return !!Array.isArray(t) && (uy(t, i[e], i), !0);
    }
    var Gy = 32, $y = 1;
    function Zy(t, e) {
        var i = e.manager;
        return i ? i.get(t) : t;
    }
    function Qy(t) {
        return 16 & t ? "cancel" : 8 & t ? "end" : 4 & t ? "move" : 2 & t ? "start" : "";
    }
    var Jy = function() {
        function t(t) {
            void 0 === t && (t = {}), this.options = Sg({
                enable: !0
            }, t), this.id = $y++, this.manager = null, this.state = 1, this.simultaneous = {}, this.requireFail = [];
        }
        var e = t.prototype;
        return e.set = function(t) {
            return Dg(this.options, t), this.manager && this.manager.touchAction.update(), this;
        }, e.recognizeWith = function(t) {
            if (Ky(t, "recognizeWith", this)) return this;
            var e = this.simultaneous;
            return e[(t = Zy(t, this)).id] || (e[t.id] = t, t.recognizeWith(this)), this;
        }, e.dropRecognizeWith = function(t) {
            return Ky(t, "dropRecognizeWith", this) || (t = Zy(t, this), delete this.simultaneous[t.id]), this;
        }, e.requireFailure = function(t) {
            if (Ky(t, "requireFailure", this)) return this;
            var e = this.requireFail;
            return -1 === Py(e, t = Zy(t, this)) && (e.push(t), t.requireFailure(this)), this;
        }, e.dropRequireFailure = function(t) {
            if (Ky(t, "dropRequireFailure", this)) return this;
            t = Zy(t, this);
            var e = Py(this.requireFail, t);
            return e > -1 && this.requireFail.splice(e, 1), this;
        }, e.hasRequireFailures = function() {
            return this.requireFail.length > 0;
        }, e.canRecognizeWith = function(t) {
            return !!this.simultaneous[t.id];
        }, e.emit = function(t) {
            var e = this, i = this.state;
            function o(i) {
                e.manager.emit(i, t);
            }
            i < 8 && o(e.options.event + Qy(i)), o(e.options.event), t.additionalEvent && o(t.additionalEvent), i >= 8 && o(e.options.event + Qy(i));
        }, e.tryEmit = function(t) {
            if (this.canEmit()) return this.emit(t);
            this.state = Gy;
        }, e.canEmit = function() {
            for(var t = 0; t < this.requireFail.length;){
                if (!(33 & this.requireFail[t].state)) return !1;
                t++;
            }
            return !0;
        }, e.recognize = function(t) {
            var e = Dg({}, t);
            if (!fy(this.options.enable, [
                this,
                e
            ])) return this.reset(), void (this.state = Gy);
            56 & this.state && (this.state = 1), this.state = this.process(e), 30 & this.state && this.tryEmit(e);
        }, e.process = function(t) {}, e.getTouchAction = function() {}, e.reset = function() {}, t;
    }(), tm = function(t) {
        function e(e) {
            var i;
            return void 0 === e && (e = {}), (i = t.call(this, Sg({
                event: "tap",
                pointers: 1,
                taps: 1,
                interval: 300,
                time: 250,
                threshold: 9,
                posThreshold: 10
            }, e)) || this).pTime = !1, i.pCenter = !1, i._timer = null, i._input = null, i.count = 0, i;
        }
        Tg(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            return [
                Wg
            ];
        }, i.process = function(t) {
            var e = this, i = this.options, o = t.pointers.length === i.pointers, n = t.distance < i.threshold, r = t.deltaTime < i.time;
            if (this.reset(), t.eventType & Jg && 0 === this.count) return this.failTimeout();
            if (n && r && o) {
                if (t.eventType !== ty) return this.failTimeout();
                var s = !this.pTime || t.timeStamp - this.pTime < i.interval, a = !this.pCenter || by(this.pCenter, t.center) < i.posThreshold;
                if (this.pTime = t.timeStamp, this.pCenter = t.center, a && s ? this.count += 1 : this.count = 1, this._input = t, 0 === this.count % i.taps) return this.hasRequireFailures() ? (this._timer = setTimeout(function() {
                    e.state = 8, e.tryEmit();
                }, i.interval), 2) : 8;
            }
            return Gy;
        }, i.failTimeout = function() {
            var t = this;
            return this._timer = setTimeout(function() {
                t.state = Gy;
            }, this.options.interval), Gy;
        }, i.reset = function() {
            clearTimeout(this._timer);
        }, i.emit = function() {
            8 === this.state && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
        }, e;
    }(Jy), em = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Sg({
                pointers: 1
            }, e)) || this;
        }
        Tg(e, t);
        var i = e.prototype;
        return i.attrTest = function(t) {
            var e = this.options.pointers;
            return 0 === e || t.pointers.length === e;
        }, i.process = function(t) {
            var e = this.state, i = t.eventType, o = 6 & e, n = this.attrTest(t);
            return o && (i & ey || !n) ? 16 | e : o || n ? i & ty ? 8 | e : 2 & e ? 4 | e : 2 : Gy;
        }, e;
    }(Jy);
    function im(t) {
        return t === sy ? "down" : t === ry ? "up" : t === oy ? "left" : t === ny ? "right" : "";
    }
    var om = function(t) {
        function e(e) {
            var i;
            return void 0 === e && (e = {}), (i = t.call(this, Sg({
                event: "pan",
                threshold: 10,
                pointers: 1,
                direction: dy
            }, e)) || this).pX = null, i.pY = null, i;
        }
        Tg(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            var t = this.options.direction, e = [];
            return t & ay && e.push(Ug), t & hy && e.push(qg), e;
        }, i.directionTest = function(t) {
            var e = this.options, i = !0, o = t.distance, n = t.direction, r = t.deltaX, s = t.deltaY;
            return n & e.direction || (e.direction & ay ? (n = 0 === r ? iy : r < 0 ? oy : ny, i = r !== this.pX, o = Math.abs(t.deltaX)) : (n = 0 === s ? iy : s < 0 ? ry : sy, i = s !== this.pY, o = Math.abs(t.deltaY))), t.direction = n, i && o > e.threshold && n & e.direction;
        }, i.attrTest = function(t) {
            return em.prototype.attrTest.call(this, t) && (2 & this.state || !(2 & this.state) && this.directionTest(t));
        }, i.emit = function(e) {
            this.pX = e.deltaX, this.pY = e.deltaY;
            var i = im(e.direction);
            i && (e.additionalEvent = this.options.event + i), t.prototype.emit.call(this, e);
        }, e;
    }(em), nm = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Sg({
                event: "swipe",
                threshold: 10,
                velocity: .3,
                direction: ay | hy,
                pointers: 1
            }, e)) || this;
        }
        Tg(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            return om.prototype.getTouchAction.call(this);
        }, i.attrTest = function(e) {
            var i, o = this.options.direction;
            return o & (ay | hy) ? i = e.overallVelocity : o & ay ? i = e.overallVelocityX : o & hy && (i = e.overallVelocityY), t.prototype.attrTest.call(this, e) && o & e.offsetDirection && e.distance > this.options.threshold && e.maxPointers === this.options.pointers && zg(i) > this.options.velocity && e.eventType & ty;
        }, i.emit = function(t) {
            var e = im(t.offsetDirection);
            e && this.manager.emit(this.options.event + e, t), this.manager.emit(this.options.event, t);
        }, e;
    }(em), rm = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Sg({
                event: "pinch",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        Tg(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            return [
                Vg
            ];
        }, i.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.scale - 1) > this.options.threshold || 2 & this.state);
        }, i.emit = function(e) {
            if (1 !== e.scale) {
                var i = e.scale < 1 ? "in" : "out";
                e.additionalEvent = this.options.event + i;
            }
            t.prototype.emit.call(this, e);
        }, e;
    }(em), sm = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Sg({
                event: "rotate",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        Tg(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            return [
                Vg
            ];
        }, i.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.rotation) > this.options.threshold || 2 & this.state);
        }, e;
    }(em), am = function(t) {
        function e(e) {
            var i;
            return void 0 === e && (e = {}), (i = t.call(this, Sg({
                event: "press",
                pointers: 1,
                time: 251,
                threshold: 9
            }, e)) || this)._timer = null, i._input = null, i;
        }
        Tg(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            return [
                Hg
            ];
        }, i.process = function(t) {
            var e = this, i = this.options, o = t.pointers.length === i.pointers, n = t.distance < i.threshold, r = t.deltaTime > i.time;
            if (this._input = t, !n || !o || t.eventType & (ty | ey) && !r) this.reset();
            else if (t.eventType & Jg) this.reset(), this._timer = setTimeout(function() {
                e.state = 8, e.tryEmit();
            }, i.time);
            else if (t.eventType & ty) return 8;
            return Gy;
        }, i.reset = function() {
            clearTimeout(this._timer);
        }, i.emit = function(t) {
            8 === this.state && (t && t.eventType & ty ? this.manager.emit(this.options.event + "up", t) : (this._input.timeStamp = Ng(), this.manager.emit(this.options.event, this._input)));
        }, e;
    }(Jy), hm = {
        domEvents: !1,
        touchAction: Lg,
        enable: !0,
        inputTarget: null,
        inputClass: null,
        cssProps: {
            userSelect: "none",
            touchSelect: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
        }
    }, dm = [
        [
            sm,
            {
                enable: !1
            }
        ],
        [
            rm,
            {
                enable: !1
            },
            [
                "rotate"
            ]
        ],
        [
            nm,
            {
                direction: ay
            }
        ],
        [
            om,
            {
                direction: ay
            },
            [
                "swipe"
            ]
        ],
        [
            tm
        ],
        [
            tm,
            {
                event: "doubletap",
                taps: 2
            },
            [
                "tap"
            ]
        ],
        [
            am
        ]
    ];
    function lm(t, e) {
        var i, o = t.element;
        o.style && (uy(t.options.cssProps, function(n, r) {
            i = Ag(o.style, r), e ? (t.oldCssProps[i] = o.style[i], o.style[i] = n) : o.style[i] = t.oldCssProps[i] || "";
        }), e || (t.oldCssProps = {}));
    }
    var cm = function() {
        function t(t, e) {
            var i, o = this;
            this.options = Dg({}, hm, e || {}), this.options.inputTarget = this.options.inputTarget || t, this.handlers = {}, this.session = {}, this.recognizers = [], this.oldCssProps = {}, this.element = t, this.input = new ((i = this).options.inputClass || (Kg ? zy : Gg ? jy : Xg ? Xy : Wy))(i, Ey), this.touchAction = new vy(this, this.options.touchAction), lm(this, !0), uy(this.options.recognizers, function(t) {
                var e = o.add(new t[0](t[1]));
                t[2] && e.recognizeWith(t[2]), t[3] && e.requireFailure(t[3]);
            }, this);
        }
        var e = t.prototype;
        return e.set = function(t) {
            return Dg(this.options, t), t.touchAction && this.touchAction.update(), t.inputTarget && (this.input.destroy(), this.input.target = t.inputTarget, this.input.init()), this;
        }, e.stop = function(t) {
            this.session.stopped = t ? 2 : 1;
        }, e.recognize = function(t) {
            var e = this.session;
            if (!e.stopped) {
                var i;
                this.touchAction.preventDefaults(t);
                var o = this.recognizers, n = e.curRecognizer;
                (!n || n && 8 & n.state) && (e.curRecognizer = null, n = null);
                for(var r = 0; r < o.length;)i = o[r], 2 === e.stopped || n && i !== n && !i.canRecognizeWith(n) ? i.reset() : i.recognize(t), !n && 14 & i.state && (e.curRecognizer = i, n = i), r++;
            }
        }, e.get = function(t) {
            if (t instanceof Jy) return t;
            for(var e = this.recognizers, i = 0; i < e.length; i++)if (e[i].options.event === t) return e[i];
            return null;
        }, e.add = function(t) {
            if (Ky(t, "add", this)) return this;
            var e = this.get(t.options.event);
            return e && this.remove(e), this.recognizers.push(t), t.manager = this, this.touchAction.update(), t;
        }, e.remove = function(t) {
            if (Ky(t, "remove", this)) return this;
            var e = this.get(t);
            if (t) {
                var i = this.recognizers, o = Py(i, e);
                -1 !== o && (i.splice(o, 1), this.touchAction.update());
            }
            return this;
        }, e.on = function(t, e) {
            if (void 0 === t || void 0 === e) return this;
            var i = this.handlers;
            return uy(Oy(t), function(t) {
                i[t] = i[t] || [], i[t].push(e);
            }), this;
        }, e.off = function(t, e) {
            if (void 0 === t) return this;
            var i = this.handlers;
            return uy(Oy(t), function(t) {
                e ? i[t] && i[t].splice(Py(i[t], e), 1) : delete i[t];
            }), this;
        }, e.emit = function(t, e) {
            this.options.domEvents && function(t, e) {
                var i = document.createEvent("Event");
                i.initEvent(t, !0, !0), i.gesture = e, e.target.dispatchEvent(i);
            }(t, e);
            var i = this.handlers[t] && this.handlers[t].slice();
            if (i && i.length) {
                e.type = t, e.preventDefault = function() {
                    e.srcEvent.preventDefault();
                };
                for(var o = 0; o < i.length;)i[o](e), o++;
            }
        }, e.destroy = function() {
            this.element && lm(this, !1), this.handlers = {}, this.session = {}, this.input.destroy(), this.element = null;
        }, t;
    }(), um = {
        touchstart: Jg,
        touchmove: 2,
        touchend: ty,
        touchcancel: ey
    }, fm = function(t) {
        function e() {
            var i, o = e.prototype;
            return o.evTarget = "touchstart", o.evWin = "touchstart touchmove touchend touchcancel", (i = t.apply(this, arguments) || this).started = !1, i;
        }
        return Tg(e, t), e.prototype.handler = function(t) {
            var e = um[t.type];
            if (e === Jg && (this.started = !0), this.started) {
                var i = pm.call(this, t, e);
                e & (ty | ey) && i[0].length - i[1].length == 0 && (this.started = !1), this.callback(this.manager, e, {
                    pointers: i[0],
                    changedPointers: i[1],
                    pointerType: $g,
                    srcEvent: t
                });
            }
        }, e;
    }(My);
    function pm(t, e) {
        var i = Ny(t.touches), o = Ny(t.changedTouches);
        return e & (ty | ey) && (i = Ay(i.concat(o), "identifier", !0)), [
            i,
            o
        ];
    }
    function vm(t, e, i) {
        var o = "DEPRECATED METHOD: " + e + "\n" + i + " AT \n";
        return function() {
            var e = new Error("get-stack-trace"), i = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace", n = window.console && (window.console.warn || window.console.log);
            return n && n.call(window.console, o, i), t.apply(this, arguments);
        };
    }
    var gm = vm(function(t, e, i) {
        for(var o = Object.keys(e), n = 0; n < o.length;)(!i || i && void 0 === t[o[n]]) && (t[o[n]] = e[o[n]]), n++;
        return t;
    }, "extend", "Use `assign`."), ym = vm(function(t, e) {
        return gm(t, e, !0);
    }, "merge", "Use `assign`.");
    function mm(t, e, i) {
        var o, n = e.prototype;
        (o = t.prototype = Object.create(n)).constructor = t, o._super = n, i && Dg(o, i);
    }
    function bm(t, e) {
        return function() {
            return t.apply(e, arguments);
        };
    }
    var wm = function() {
        var t = function(t, e) {
            return void 0 === e && (e = {}), new cm(t, Sg({
                recognizers: dm.concat()
            }, e));
        };
        return t.VERSION = "2.0.17-rc", t.DIRECTION_ALL = dy, t.DIRECTION_DOWN = sy, t.DIRECTION_LEFT = oy, t.DIRECTION_RIGHT = ny, t.DIRECTION_UP = ry, t.DIRECTION_HORIZONTAL = ay, t.DIRECTION_VERTICAL = hy, t.DIRECTION_NONE = iy, t.DIRECTION_DOWN = sy, t.INPUT_START = Jg, t.INPUT_MOVE = 2, t.INPUT_END = ty, t.INPUT_CANCEL = ey, t.STATE_POSSIBLE = 1, t.STATE_BEGAN = 2, t.STATE_CHANGED = 4, t.STATE_ENDED = 8, t.STATE_RECOGNIZED = 8, t.STATE_CANCELLED = 16, t.STATE_FAILED = Gy, t.Manager = cm, t.Input = My, t.TouchAction = vy, t.TouchInput = jy, t.MouseInput = Wy, t.PointerEventInput = zy, t.TouchMouseInput = Xy, t.SingleTouchInput = fm, t.Recognizer = Jy, t.AttrRecognizer = em, t.Tap = tm, t.Pan = om, t.Swipe = nm, t.Pinch = rm, t.Rotate = sm, t.Press = am, t.on = Cy, t.off = Sy, t.each = uy, t.merge = ym, t.extend = gm, t.bindFn = bm, t.assign = Dg, t.inherit = mm, t.bindFn = bm, t.prefixed = Ag, t.toArray = Ny, t.inArray = Py, t.uniqueArray = Ay, t.splitStr = Oy, t.boolOrFn = fy, t.hasParent = gy, t.addEventListeners = Cy, t.removeEventListeners = Sy, t.defaults = Dg({}, hm, {
            preset: dm
        }), t;
    }();
    wm.defaults;
    var km = wm;
    function _m(t, e) {
        var i = void 0 !== cf && ph(t) || t["@@iterator"];
        if (!i) {
            if (Of(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return xm(t, e);
                var o = mf(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return Xa(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return xm(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function xm(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function Em() {
        for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
        return function(t) {
            var e = function() {
                for(var t = function() {
                    var t = 4022871197;
                    return function(e) {
                        for(var i = e.toString(), o = 0; o < i.length; o++){
                            var n = .02519603282416938 * (t += i.charCodeAt(o));
                            n -= t = n >>> 0, t = (n *= t) >>> 0, t += 4294967296 * (n -= t);
                        }
                        return 2.3283064365386963e-10 * (t >>> 0);
                    };
                }(), e = t(" "), i = t(" "), o = t(" "), n = 0; n < arguments.length; n++)(e -= t(n < 0 || arguments.length <= n ? void 0 : arguments[n])) < 0 && (e += 1), (i -= t(n < 0 || arguments.length <= n ? void 0 : arguments[n])) < 0 && (i += 1), (o -= t(n < 0 || arguments.length <= n ? void 0 : arguments[n])) < 0 && (o += 1);
                return [
                    e,
                    i,
                    o
                ];
            }(t), i = df(e, 3), o = i[0], n = i[1], r = i[2], s = 1, a = function() {
                var t = 2091639 * o + 2.3283064365386963e-10 * s;
                return o = n, n = r, r = t - (s = 0 | t);
            };
            return a.uint32 = function() {
                return 4294967296 * a();
            }, a.fract53 = function() {
                return a() + 11102230246251565e-32 * (2097152 * a() | 0);
            }, a.algorithm = "Alea", a.seed = t, a.version = "0.9", a;
        }(e.length ? e : [
            jf()
        ]);
    }
    cf("DELETE");
    var Om = "undefined" != typeof window ? window.Hammer || km : function() {
        return function() {
            var t = function() {};
            return {
                on: t,
                off: t,
                destroy: t,
                emit: t,
                get: function() {
                    return {
                        set: t
                    };
                }
            };
        }();
    };
    function Cm(t) {
        var e, i = this;
        this._cleanupQueue = [], this.active = !1, this._dom = {
            container: t,
            overlay: document.createElement("div")
        }, this._dom.overlay.classList.add("vis-overlay"), this._dom.container.appendChild(this._dom.overlay), this._cleanupQueue.push(function() {
            i._dom.overlay.parentNode.removeChild(i._dom.overlay);
        });
        var o = Om(this._dom.overlay);
        o.on("tap", Wo(e = this._onTapOverlay).call(e, this)), this._cleanupQueue.push(function() {
            o.destroy();
        });
        var n = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        Qf(n).call(n, function(t) {
            o.on(t, function(t) {
                t.srcEvent.stopPropagation();
            });
        }), document && document.body && (this._onClick = function(e) {
            (function(t, e) {
                for(; t;){
                    if (t === e) return !0;
                    t = t.parentNode;
                }
                return !1;
            })(e.target, t) || i.deactivate();
        }, document.body.addEventListener("click", this._onClick), this._cleanupQueue.push(function() {
            document.body.removeEventListener("click", i._onClick);
        })), this._escListener = function(t) {
            ("key" in t ? "Escape" === t.key : 27 === t.keyCode) && i.deactivate();
        };
    }
    $o(Cm.prototype), Cm.current = null, Cm.prototype.destroy = function() {
        var t, e;
        this.deactivate();
        var i, o = _m(hp(t = Pp(e = this._cleanupQueue).call(e, 0)).call(t));
        try {
            for(o.s(); !(i = o.n()).done;)(0, i.value)();
        } catch (t) {
            o.e(t);
        } finally{
            o.f();
        }
    }, Cm.prototype.activate = function() {
        Cm.current && Cm.current.deactivate(), Cm.current = this, this.active = !0, this._dom.overlay.style.display = "none", this._dom.container.classList.add("vis-active"), this.emit("change"), this.emit("activate"), document.body.addEventListener("keydown", this._escListener);
    }, Cm.prototype.deactivate = function() {
        this.active = !1, this._dom.overlay.style.display = "block", this._dom.container.classList.remove("vis-active"), document.body.removeEventListener("keydown", this._escListener), this.emit("change"), this.emit("deactivate");
    }, Cm.prototype._onTapOverlay = function(t) {
        this.activate(), t.srcEvent.stopPropagation();
    };
    var Sm = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i, Tm = /^#?([a-f\d])([a-f\d])([a-f\d])$/i, Mm = /^rgb\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *\)$/i, Pm = /^rgba\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *([01]|0?\.\d+) *\)$/i;
    function Dm(t) {
        if (t) for(; !0 === t.hasChildNodes();){
            var e = t.firstChild;
            e && (Dm(e), t.removeChild(e));
        }
    }
    function Im(t) {
        return t instanceof String || "string" == typeof t;
    }
    function Bm(t) {
        return "object" === gu(t) && null !== t;
    }
    function Fm(t, e, i, o) {
        var n = !1;
        !0 === o && (n = null === e[i] && void 0 !== t[i]), n ? delete t[i] : t[i] = e[i];
    }
    function zm(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        for(var o in t)if (void 0 !== e[o]) {
            if (null === e[o] || "object" !== gu(e[o])) Fm(t, e, o, i);
            else {
                var n = t[o], r = e[o];
                Bm(n) && Bm(r) && zm(n, r, i);
            }
        }
    }
    function Nm(t, e, i) {
        var o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        if (Of(i)) throw new TypeError("Arrays are not supported by deepExtend");
        for(var n = 0; n < t.length; n++){
            var r = t[n];
            if (Object.prototype.hasOwnProperty.call(i, r)) {
                if (i[r] && i[r].constructor === Object) void 0 === e[r] && (e[r] = {}), e[r].constructor === Object ? Rm(e[r], i[r], !1, o) : Fm(e, i, r, o);
                else {
                    if (Of(i[r])) throw new TypeError("Arrays are not supported by deepExtend");
                    Fm(e, i, r, o);
                }
            }
        }
        return e;
    }
    function Am(t, e, i) {
        var o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        if (Of(i)) throw new TypeError("Arrays are not supported by deepExtend");
        for(var n in i)if (Object.prototype.hasOwnProperty.call(i, n) && !Qp(t).call(t, n)) {
            if (i[n] && i[n].constructor === Object) void 0 === e[n] && (e[n] = {}), e[n].constructor === Object ? Rm(e[n], i[n]) : Fm(e, i, n, o);
            else if (Of(i[n])) {
                e[n] = [];
                for(var r = 0; r < i[n].length; r++)e[n].push(i[n][r]);
            } else Fm(e, i, n, o);
        }
        return e;
    }
    function Rm(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        for(var n in e)if (Object.prototype.hasOwnProperty.call(e, n) || !0 === i) {
            if ("object" === gu(e[n]) && null !== e[n] && ov(e[n]) === Object.prototype) void 0 === t[n] ? t[n] = Rm({}, e[n], i) : "object" === gu(t[n]) && null !== t[n] && ov(t[n]) === Object.prototype ? Rm(t[n], e[n], i) : Fm(t, e, n, o);
            else if (Of(e[n])) {
                var r;
                t[n] = mf(r = e[n]).call(r);
            } else Fm(t, e, n, o);
        }
        return t;
    }
    function jm(t, e) {
        var i;
        return yf(i = []).call(i, lf(t), [
            e
        ]);
    }
    function Lm(t) {
        return t.getBoundingClientRect().top;
    }
    function Hm(t, e) {
        if (Of(t)) for(var i = t.length, o = 0; o < i; o++)e(t[o], o, t);
        else for(var n in t)Object.prototype.hasOwnProperty.call(t, n) && e(t[n], n, t);
    }
    function Wm(t) {
        var e;
        switch(t.length){
            case 3:
            case 4:
                return (e = Tm.exec(t)) ? {
                    r: Iv(e[1] + e[1], 16),
                    g: Iv(e[2] + e[2], 16),
                    b: Iv(e[3] + e[3], 16)
                } : null;
            case 6:
            case 7:
                return (e = Sm.exec(t)) ? {
                    r: Iv(e[1], 16),
                    g: Iv(e[2], 16),
                    b: Iv(e[3], 16)
                } : null;
            default:
                return null;
        }
    }
    function Vm(t, e) {
        if (Qp(t).call(t, "rgba")) return t;
        if (Qp(t).call(t, "rgb")) {
            var i = t.substr(Vv(t).call(t, "(") + 1).replace(")", "").split(",");
            return "rgba(" + i[0] + "," + i[1] + "," + i[2] + "," + e + ")";
        }
        var o = Wm(t);
        return null == o ? t : "rgba(" + o.r + "," + o.g + "," + o.b + "," + e + ")";
    }
    function qm(t, e, i) {
        var o;
        return "#" + mf(o = (16777216 + (t << 16) + (e << 8) + i).toString(16)).call(o, 1);
    }
    function Um(t, e) {
        if (Im(t)) {
            var i = t;
            if ($m(i)) {
                var o, n = If(o = i.substr(4).substr(0, i.length - 5).split(",")).call(o, function(t) {
                    return Iv(t);
                });
                i = qm(n[0], n[1], n[2]);
            }
            if (!0 === Gm(i)) {
                var r = function(t) {
                    var e = Wm(t);
                    if (!e) throw new TypeError("'".concat(t, "' is not a valid color."));
                    return Ym(e.r, e.g, e.b);
                }(i), s = {
                    h: r.h,
                    s: .8 * r.s,
                    v: Math.min(1, 1.02 * r.v)
                }, a = {
                    h: r.h,
                    s: Math.min(1, 1.25 * r.s),
                    v: .8 * r.v
                }, h = Km(a.h, a.s, a.v), d = Km(s.h, s.s, s.v);
                return {
                    background: i,
                    border: h,
                    highlight: {
                        background: d,
                        border: h
                    },
                    hover: {
                        background: d,
                        border: h
                    }
                };
            }
            return {
                background: i,
                border: i,
                highlight: {
                    background: i,
                    border: i
                },
                hover: {
                    background: i,
                    border: i
                }
            };
        }
        return e ? {
            background: t.background || e.background,
            border: t.border || e.border,
            highlight: Im(t.highlight) ? {
                border: t.highlight,
                background: t.highlight
            } : {
                background: t.highlight && t.highlight.background || e.highlight.background,
                border: t.highlight && t.highlight.border || e.highlight.border
            },
            hover: Im(t.hover) ? {
                border: t.hover,
                background: t.hover
            } : {
                border: t.hover && t.hover.border || e.hover.border,
                background: t.hover && t.hover.background || e.hover.background
            }
        } : {
            background: t.background || void 0,
            border: t.border || void 0,
            highlight: Im(t.highlight) ? {
                border: t.highlight,
                background: t.highlight
            } : {
                background: t.highlight && t.highlight.background || void 0,
                border: t.highlight && t.highlight.border || void 0
            },
            hover: Im(t.hover) ? {
                border: t.hover,
                background: t.hover
            } : {
                border: t.hover && t.hover.border || void 0,
                background: t.hover && t.hover.background || void 0
            }
        };
    }
    function Ym(t, e, i) {
        t /= 255, e /= 255, i /= 255;
        var o = Math.min(t, Math.min(e, i)), n = Math.max(t, Math.max(e, i));
        return o === n ? {
            h: 0,
            s: 0,
            v: o
        } : {
            h: 60 * ((t === o ? 3 : i === o ? 1 : 5) - (t === o ? e - i : i === o ? t - e : i - t) / (n - o)) / 360,
            s: (n - o) / n,
            v: n
        };
    }
    function Xm(t, e, i) {
        var o, n, r, s = Math.floor(6 * t), a = 6 * t - s, h = i * (1 - e), d = i * (1 - a * e), l = i * (1 - (1 - a) * e);
        switch(s % 6){
            case 0:
                o = i, n = l, r = h;
                break;
            case 1:
                o = d, n = i, r = h;
                break;
            case 2:
                o = h, n = i, r = l;
                break;
            case 3:
                o = h, n = d, r = i;
                break;
            case 4:
                o = l, n = h, r = i;
                break;
            case 5:
                o = i, n = h, r = d;
        }
        return {
            r: Math.floor(255 * o),
            g: Math.floor(255 * n),
            b: Math.floor(255 * r)
        };
    }
    function Km(t, e, i) {
        var o = Xm(t, e, i);
        return qm(o.r, o.g, o.b);
    }
    function Gm(t) {
        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t);
    }
    function $m(t) {
        return Mm.test(t);
    }
    function Zm(t) {
        if (null === t || "object" !== gu(t)) return null;
        if (t instanceof Element) return t;
        var e = Yv(t);
        for(var i in t)Object.prototype.hasOwnProperty.call(t, i) && "object" == gu(t[i]) && (e[i] = Zm(t[i]));
        return e;
    }
    function Qm(t, e, i) {
        var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, n = function(t) {
            return null != t;
        }, r = function(t) {
            return null !== t && "object" === gu(t);
        };
        if (!r(t)) throw new Error("Parameter mergeTarget must be an object");
        if (!r(e)) throw new Error("Parameter options must be an object");
        if (!n(i)) throw new Error("Parameter option must have a value");
        if (!r(o)) throw new Error("Parameter globalOptions must be an object");
        var s = e[i], a = r(o) && !function(t) {
            for(var e in t)if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
            return !0;
        }(o) ? o[i] : void 0, h = a ? a.enabled : void 0;
        if (void 0 !== s) {
            if ("boolean" == typeof s) return r(t[i]) || (t[i] = {}), void (t[i].enabled = s);
            if (null === s && !r(t[i])) {
                if (!n(a)) return;
                t[i] = Yv(a);
            }
            if (r(s)) {
                var d = !0;
                void 0 !== s.enabled ? d = s.enabled : void 0 !== h && (d = a.enabled), function(t, e, i) {
                    r(t[i]) || (t[i] = {});
                    var o = e[i], n = t[i];
                    for(var s in o)Object.prototype.hasOwnProperty.call(o, s) && (n[s] = o[s]);
                }(t, e, i), t[i].enabled = d;
            }
        }
    }
    var Jm = {
        linear: function(t) {
            return t;
        },
        easeInQuad: function(t) {
            return t * t;
        },
        easeOutQuad: function(t) {
            return t * (2 - t);
        },
        easeInOutQuad: function(t) {
            return t < .5 ? 2 * t * t : (4 - 2 * t) * t - 1;
        },
        easeInCubic: function(t) {
            return t * t * t;
        },
        easeOutCubic: function(t) {
            return --t * t * t + 1;
        },
        easeInOutCubic: function(t) {
            return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
        },
        easeInQuart: function(t) {
            return t * t * t * t;
        },
        easeOutQuart: function(t) {
            return 1 - --t * t * t * t;
        },
        easeInOutQuart: function(t) {
            return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
        },
        easeInQuint: function(t) {
            return t * t * t * t * t;
        },
        easeOutQuint: function(t) {
            return 1 + --t * t * t * t * t;
        },
        easeInOutQuint: function(t) {
            return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
        }
    };
    function tb(t, e) {
        var i;
        Of(e) || (e = [
            e
        ]);
        var o, n = _m(t);
        try {
            for(n.s(); !(o = n.n()).done;){
                var r = o.value;
                if (r) {
                    i = r[e[0]];
                    for(var s = 1; s < e.length; s++)i && (i = i[e[s]]);
                    if (void 0 !== i) break;
                }
            }
        } catch (t) {
            n.e(t);
        } finally{
            n.f();
        }
        return i;
    }
    var eb = {
        black: "#000000",
        navy: "#000080",
        darkblue: "#00008B",
        mediumblue: "#0000CD",
        blue: "#0000FF",
        darkgreen: "#006400",
        green: "#008000",
        teal: "#008080",
        darkcyan: "#008B8B",
        deepskyblue: "#00BFFF",
        darkturquoise: "#00CED1",
        mediumspringgreen: "#00FA9A",
        lime: "#00FF00",
        springgreen: "#00FF7F",
        aqua: "#00FFFF",
        cyan: "#00FFFF",
        midnightblue: "#191970",
        dodgerblue: "#1E90FF",
        lightseagreen: "#20B2AA",
        forestgreen: "#228B22",
        seagreen: "#2E8B57",
        darkslategray: "#2F4F4F",
        limegreen: "#32CD32",
        mediumseagreen: "#3CB371",
        turquoise: "#40E0D0",
        royalblue: "#4169E1",
        steelblue: "#4682B4",
        darkslateblue: "#483D8B",
        mediumturquoise: "#48D1CC",
        indigo: "#4B0082",
        darkolivegreen: "#556B2F",
        cadetblue: "#5F9EA0",
        cornflowerblue: "#6495ED",
        mediumaquamarine: "#66CDAA",
        dimgray: "#696969",
        slateblue: "#6A5ACD",
        olivedrab: "#6B8E23",
        slategray: "#708090",
        lightslategray: "#778899",
        mediumslateblue: "#7B68EE",
        lawngreen: "#7CFC00",
        chartreuse: "#7FFF00",
        aquamarine: "#7FFFD4",
        maroon: "#800000",
        purple: "#800080",
        olive: "#808000",
        gray: "#808080",
        skyblue: "#87CEEB",
        lightskyblue: "#87CEFA",
        blueviolet: "#8A2BE2",
        darkred: "#8B0000",
        darkmagenta: "#8B008B",
        saddlebrown: "#8B4513",
        darkseagreen: "#8FBC8F",
        lightgreen: "#90EE90",
        mediumpurple: "#9370D8",
        darkviolet: "#9400D3",
        palegreen: "#98FB98",
        darkorchid: "#9932CC",
        yellowgreen: "#9ACD32",
        sienna: "#A0522D",
        brown: "#A52A2A",
        darkgray: "#A9A9A9",
        lightblue: "#ADD8E6",
        greenyellow: "#ADFF2F",
        paleturquoise: "#AFEEEE",
        lightsteelblue: "#B0C4DE",
        powderblue: "#B0E0E6",
        firebrick: "#B22222",
        darkgoldenrod: "#B8860B",
        mediumorchid: "#BA55D3",
        rosybrown: "#BC8F8F",
        darkkhaki: "#BDB76B",
        silver: "#C0C0C0",
        mediumvioletred: "#C71585",
        indianred: "#CD5C5C",
        peru: "#CD853F",
        chocolate: "#D2691E",
        tan: "#D2B48C",
        lightgrey: "#D3D3D3",
        palevioletred: "#D87093",
        thistle: "#D8BFD8",
        orchid: "#DA70D6",
        goldenrod: "#DAA520",
        crimson: "#DC143C",
        gainsboro: "#DCDCDC",
        plum: "#DDA0DD",
        burlywood: "#DEB887",
        lightcyan: "#E0FFFF",
        lavender: "#E6E6FA",
        darksalmon: "#E9967A",
        violet: "#EE82EE",
        palegoldenrod: "#EEE8AA",
        lightcoral: "#F08080",
        khaki: "#F0E68C",
        aliceblue: "#F0F8FF",
        honeydew: "#F0FFF0",
        azure: "#F0FFFF",
        sandybrown: "#F4A460",
        wheat: "#F5DEB3",
        beige: "#F5F5DC",
        whitesmoke: "#F5F5F5",
        mintcream: "#F5FFFA",
        ghostwhite: "#F8F8FF",
        salmon: "#FA8072",
        antiquewhite: "#FAEBD7",
        linen: "#FAF0E6",
        lightgoldenrodyellow: "#FAFAD2",
        oldlace: "#FDF5E6",
        red: "#FF0000",
        fuchsia: "#FF00FF",
        magenta: "#FF00FF",
        deeppink: "#FF1493",
        orangered: "#FF4500",
        tomato: "#FF6347",
        hotpink: "#FF69B4",
        coral: "#FF7F50",
        darkorange: "#FF8C00",
        lightsalmon: "#FFA07A",
        orange: "#FFA500",
        lightpink: "#FFB6C1",
        pink: "#FFC0CB",
        gold: "#FFD700",
        peachpuff: "#FFDAB9",
        navajowhite: "#FFDEAD",
        moccasin: "#FFE4B5",
        bisque: "#FFE4C4",
        mistyrose: "#FFE4E1",
        blanchedalmond: "#FFEBCD",
        papayawhip: "#FFEFD5",
        lavenderblush: "#FFF0F5",
        seashell: "#FFF5EE",
        cornsilk: "#FFF8DC",
        lemonchiffon: "#FFFACD",
        floralwhite: "#FFFAF0",
        snow: "#FFFAFA",
        yellow: "#FFFF00",
        lightyellow: "#FFFFE0",
        ivory: "#FFFFF0",
        white: "#FFFFFF"
    }, ib = function() {
        function t() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
            vh(this, t), this.pixelRatio = e, this.generated = !1, this.centerCoordinates = {
                x: 144.5,
                y: 144.5
            }, this.r = 289 * .49, this.color = {
                r: 255,
                g: 255,
                b: 255,
                a: 1
            }, this.hueCircle = void 0, this.initialColor = {
                r: 255,
                g: 255,
                b: 255,
                a: 1
            }, this.previousColor = void 0, this.applied = !1, this.updateCallback = function() {}, this.closeCallback = function() {}, this._create();
        }
        return wu(t, [
            {
                key: "insertTo",
                value: function(t) {
                    void 0 !== this.hammer && (this.hammer.destroy(), this.hammer = void 0), this.container = t, this.container.appendChild(this.frame), this._bindHammer(), this._setSize();
                }
            },
            {
                key: "setUpdateCallback",
                value: function(t) {
                    if ("function" != typeof t) throw new Error("Function attempted to set as colorPicker update callback is not a function.");
                    this.updateCallback = t;
                }
            },
            {
                key: "setCloseCallback",
                value: function(t) {
                    if ("function" != typeof t) throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
                    this.closeCallback = t;
                }
            },
            {
                key: "_isColorString",
                value: function(t) {
                    if ("string" == typeof t) return eb[t];
                }
            },
            {
                key: "setColor",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if ("none" !== t) {
                        var i, o = this._isColorString(t);
                        if (void 0 !== o && (t = o), !0 === Im(t)) {
                            if (!0 === $m(t)) {
                                var n = t.substr(4).substr(0, t.length - 5).split(",");
                                i = {
                                    r: n[0],
                                    g: n[1],
                                    b: n[2],
                                    a: 1
                                };
                            } else if (!0 === function(t) {
                                return Pm.test(t);
                            }(t)) {
                                var r = t.substr(5).substr(0, t.length - 6).split(",");
                                i = {
                                    r: r[0],
                                    g: r[1],
                                    b: r[2],
                                    a: r[3]
                                };
                            } else if (!0 === Gm(t)) {
                                var s = Wm(t);
                                i = {
                                    r: s.r,
                                    g: s.g,
                                    b: s.b,
                                    a: 1
                                };
                            }
                        } else if (t instanceof Object && void 0 !== t.r && void 0 !== t.g && void 0 !== t.b) {
                            var a = void 0 !== t.a ? t.a : "1.0";
                            i = {
                                r: t.r,
                                g: t.g,
                                b: t.b,
                                a: a
                            };
                        }
                        if (void 0 === i) throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + $v(t));
                        this._setColor(i, e);
                    }
                }
            },
            {
                key: "show",
                value: function() {
                    void 0 !== this.closeCallback && (this.closeCallback(), this.closeCallback = void 0), this.applied = !1, this.frame.style.display = "block", this._generateHueCircle();
                }
            },
            {
                key: "_hide",
                value: function() {
                    var t = this;
                    !0 === (!(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0]) && (this.previousColor = wo({}, this.color)), !0 === this.applied && this.updateCallback(this.initialColor), this.frame.style.display = "none", vg(function() {
                        void 0 !== t.closeCallback && (t.closeCallback(), t.closeCallback = void 0);
                    }, 0);
                }
            },
            {
                key: "_save",
                value: function() {
                    this.updateCallback(this.color), this.applied = !1, this._hide();
                }
            },
            {
                key: "_apply",
                value: function() {
                    this.applied = !0, this.updateCallback(this.color), this._updatePicker(this.color);
                }
            },
            {
                key: "_loadLast",
                value: function() {
                    void 0 !== this.previousColor ? this.setColor(this.previousColor, !1) : alert("There is no last color to load...");
                }
            },
            {
                key: "_setColor",
                value: function(t) {
                    !0 === (!(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]) && (this.initialColor = wo({}, t)), this.color = t;
                    var e = Ym(t.r, t.g, t.b), i = 2 * Math.PI, o = this.r * e.s, n = this.centerCoordinates.x + o * Math.sin(i * e.h), r = this.centerCoordinates.y + o * Math.cos(i * e.h);
                    this.colorPickerSelector.style.left = n - .5 * this.colorPickerSelector.clientWidth + "px", this.colorPickerSelector.style.top = r - .5 * this.colorPickerSelector.clientHeight + "px", this._updatePicker(t);
                }
            },
            {
                key: "_setOpacity",
                value: function(t) {
                    this.color.a = t / 100, this._updatePicker(this.color);
                }
            },
            {
                key: "_setBrightness",
                value: function(t) {
                    var e = Ym(this.color.r, this.color.g, this.color.b);
                    e.v = t / 100;
                    var i = Xm(e.h, e.s, e.v);
                    i.a = this.color.a, this.color = i, this._updatePicker();
                }
            },
            {
                key: "_updatePicker",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.color, e = Ym(t.r, t.g, t.b), i = this.colorPickerCanvas.getContext("2d");
                    void 0 === this.pixelRation && (this.pixelRatio = (window.devicePixelRatio || 1) / (i.webkitBackingStorePixelRatio || i.mozBackingStorePixelRatio || i.msBackingStorePixelRatio || i.oBackingStorePixelRatio || i.backingStorePixelRatio || 1)), i.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                    var o = this.colorPickerCanvas.clientWidth, n = this.colorPickerCanvas.clientHeight;
                    i.clearRect(0, 0, o, n), i.putImageData(this.hueCircle, 0, 0), i.fillStyle = "rgba(0,0,0," + (1 - e.v) + ")", i.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r), Cg(i).call(i), this.brightnessRange.value = 100 * e.v, this.opacityRange.value = 100 * t.a, this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")", this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
                }
            },
            {
                key: "_setSize",
                value: function() {
                    this.colorPickerCanvas.style.width = "100%", this.colorPickerCanvas.style.height = "100%", this.colorPickerCanvas.width = 289 * this.pixelRatio, this.colorPickerCanvas.height = 289 * this.pixelRatio;
                }
            },
            {
                key: "_create",
                value: function() {
                    var t, e, i, o;
                    if (this.frame = document.createElement("div"), this.frame.className = "vis-color-picker", this.colorPickerDiv = document.createElement("div"), this.colorPickerSelector = document.createElement("div"), this.colorPickerSelector.className = "vis-selector", this.colorPickerDiv.appendChild(this.colorPickerSelector), this.colorPickerCanvas = document.createElement("canvas"), this.colorPickerDiv.appendChild(this.colorPickerCanvas), this.colorPickerCanvas.getContext) {
                        var n = this.colorPickerCanvas.getContext("2d");
                        this.pixelRatio = (window.devicePixelRatio || 1) / (n.webkitBackingStorePixelRatio || n.mozBackingStorePixelRatio || n.msBackingStorePixelRatio || n.oBackingStorePixelRatio || n.backingStorePixelRatio || 1), this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                    } else {
                        var r = document.createElement("DIV");
                        r.style.color = "red", r.style.fontWeight = "bold", r.style.padding = "10px", r.innerText = "Error: your browser does not support HTML canvas", this.colorPickerCanvas.appendChild(r);
                    }
                    this.colorPickerDiv.className = "vis-color", this.opacityDiv = document.createElement("div"), this.opacityDiv.className = "vis-opacity", this.brightnessDiv = document.createElement("div"), this.brightnessDiv.className = "vis-brightness", this.arrowDiv = document.createElement("div"), this.arrowDiv.className = "vis-arrow", this.opacityRange = document.createElement("input");
                    try {
                        this.opacityRange.type = "range", this.opacityRange.min = "0", this.opacityRange.max = "100";
                    } catch (t) {}
                    this.opacityRange.value = "100", this.opacityRange.className = "vis-range", this.brightnessRange = document.createElement("input");
                    try {
                        this.brightnessRange.type = "range", this.brightnessRange.min = "0", this.brightnessRange.max = "100";
                    } catch (t) {}
                    this.brightnessRange.value = "100", this.brightnessRange.className = "vis-range", this.opacityDiv.appendChild(this.opacityRange), this.brightnessDiv.appendChild(this.brightnessRange);
                    var s = this;
                    this.opacityRange.onchange = function() {
                        s._setOpacity(this.value);
                    }, this.opacityRange.oninput = function() {
                        s._setOpacity(this.value);
                    }, this.brightnessRange.onchange = function() {
                        s._setBrightness(this.value);
                    }, this.brightnessRange.oninput = function() {
                        s._setBrightness(this.value);
                    }, this.brightnessLabel = document.createElement("div"), this.brightnessLabel.className = "vis-label vis-brightness", this.brightnessLabel.innerText = "brightness:", this.opacityLabel = document.createElement("div"), this.opacityLabel.className = "vis-label vis-opacity", this.opacityLabel.innerText = "opacity:", this.newColorDiv = document.createElement("div"), this.newColorDiv.className = "vis-new-color", this.newColorDiv.innerText = "new", this.initialColorDiv = document.createElement("div"), this.initialColorDiv.className = "vis-initial-color", this.initialColorDiv.innerText = "initial", this.cancelButton = document.createElement("div"), this.cancelButton.className = "vis-button vis-cancel", this.cancelButton.innerText = "cancel", this.cancelButton.onclick = Wo(t = this._hide).call(t, this, !1), this.applyButton = document.createElement("div"), this.applyButton.className = "vis-button vis-apply", this.applyButton.innerText = "apply", this.applyButton.onclick = Wo(e = this._apply).call(e, this), this.saveButton = document.createElement("div"), this.saveButton.className = "vis-button vis-save", this.saveButton.innerText = "save", this.saveButton.onclick = Wo(i = this._save).call(i, this), this.loadButton = document.createElement("div"), this.loadButton.className = "vis-button vis-load", this.loadButton.innerText = "load last", this.loadButton.onclick = Wo(o = this._loadLast).call(o, this), this.frame.appendChild(this.colorPickerDiv), this.frame.appendChild(this.arrowDiv), this.frame.appendChild(this.brightnessLabel), this.frame.appendChild(this.brightnessDiv), this.frame.appendChild(this.opacityLabel), this.frame.appendChild(this.opacityDiv), this.frame.appendChild(this.newColorDiv), this.frame.appendChild(this.initialColorDiv), this.frame.appendChild(this.cancelButton), this.frame.appendChild(this.applyButton), this.frame.appendChild(this.saveButton), this.frame.appendChild(this.loadButton);
                }
            },
            {
                key: "_bindHammer",
                value: function() {
                    var t = this;
                    this.drag = {}, this.pinch = {}, this.hammer = new Om(this.colorPickerCanvas), this.hammer.get("pinch").set({
                        enable: !0
                    }), this.hammer.on("hammer.input", function(e) {
                        e.isFirst && t._moveSelector(e);
                    }), this.hammer.on("tap", function(e) {
                        t._moveSelector(e);
                    }), this.hammer.on("panstart", function(e) {
                        t._moveSelector(e);
                    }), this.hammer.on("panmove", function(e) {
                        t._moveSelector(e);
                    }), this.hammer.on("panend", function(e) {
                        t._moveSelector(e);
                    });
                }
            },
            {
                key: "_generateHueCircle",
                value: function() {
                    if (!1 === this.generated) {
                        var t = this.colorPickerCanvas.getContext("2d");
                        void 0 === this.pixelRation && (this.pixelRatio = (window.devicePixelRatio || 1) / (t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1)), t.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                        var e, i, o, n, r = this.colorPickerCanvas.clientWidth, s = this.colorPickerCanvas.clientHeight;
                        t.clearRect(0, 0, r, s), this.centerCoordinates = {
                            x: .5 * r,
                            y: .5 * s
                        }, this.r = .49 * r;
                        var a, h = 2 * Math.PI / 360, d = 1 / this.r;
                        for(o = 0; o < 360; o++)for(n = 0; n < this.r; n++)e = this.centerCoordinates.x + n * Math.sin(h * o), i = this.centerCoordinates.y + n * Math.cos(h * o), a = Xm(.002777777777777778 * o, n * d, 1), t.fillStyle = "rgb(" + a.r + "," + a.g + "," + a.b + ")", t.fillRect(e - .5, i - .5, 2, 2);
                        t.strokeStyle = "rgba(0,0,0,1)", t.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r), t.stroke(), this.hueCircle = t.getImageData(0, 0, r, s);
                    }
                    this.generated = !0;
                }
            },
            {
                key: "_moveSelector",
                value: function(t) {
                    var e = this.colorPickerDiv.getBoundingClientRect(), i = t.center.x - e.left, o = t.center.y - e.top, n = .5 * this.colorPickerDiv.clientHeight, r = .5 * this.colorPickerDiv.clientWidth, s = i - r, a = o - n, h = Math.atan2(s, a), d = .98 * Math.min(Math.sqrt(s * s + a * a), r), l = Math.cos(h) * d + n, c = Math.sin(h) * d + r;
                    this.colorPickerSelector.style.top = l - .5 * this.colorPickerSelector.clientHeight + "px", this.colorPickerSelector.style.left = c - .5 * this.colorPickerSelector.clientWidth + "px";
                    var u = h / (2 * Math.PI);
                    u = u < 0 ? u + 1 : u;
                    var f = d / this.r, p = Ym(this.color.r, this.color.g, this.color.b);
                    p.h = u, p.s = f;
                    var v = Xm(p.h, p.s, p.v);
                    v.a = this.color.a, this.color = v, this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")", this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
                }
            }
        ]), t;
    }();
    function ob() {
        for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
        if (e.length < 1) throw new TypeError("Invalid arguments.");
        if (1 === e.length) return document.createTextNode(e[0]);
        var o = document.createElement(e[0]);
        return o.appendChild(ob.apply(void 0, lf(mf(e).call(e, 1)))), o;
    }
    var nb, rb = function() {
        function t(e, i, o) {
            var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : function() {
                return !1;
            };
            vh(this, t), this.parent = e, this.changedOptions = [], this.container = i, this.allowCreation = !1, this.hideOption = r, this.options = {}, this.initialized = !1, this.popupCounter = 0, this.defaultOptions = {
                enabled: !1,
                filter: !0,
                container: void 0,
                showButton: !0
            }, wo(this.options, this.defaultOptions), this.configureOptions = o, this.moduleOptions = {}, this.domElements = [], this.popupDiv = {}, this.popupLimit = 5, this.popupHistory = {}, this.colorPicker = new ib(n), this.wrapper = void 0;
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        this.popupHistory = {}, this._removePopup();
                        var e = !0;
                        if ("string" == typeof t) this.options.filter = t;
                        else if (Of(t)) this.options.filter = t.join();
                        else if ("object" === gu(t)) {
                            if (null == t) throw new TypeError("options cannot be null");
                            void 0 !== t.container && (this.options.container = t.container), void 0 !== lv(t) && (this.options.filter = lv(t)), void 0 !== t.showButton && (this.options.showButton = t.showButton), void 0 !== t.enabled && (e = t.enabled);
                        } else "boolean" == typeof t ? (this.options.filter = !0, e = t) : "function" == typeof t && (this.options.filter = t, e = !0);
                        !1 === lv(this.options) && (e = !1), this.options.enabled = e;
                    }
                    this._clean();
                }
            },
            {
                key: "setModuleOptions",
                value: function(t) {
                    this.moduleOptions = t, !0 === this.options.enabled && (this._clean(), void 0 !== this.options.container && (this.container = this.options.container), this._create());
                }
            },
            {
                key: "_create",
                value: function() {
                    this._clean(), this.changedOptions = [];
                    var t = lv(this.options), e = 0, i = !1;
                    for(var o in this.configureOptions)Object.prototype.hasOwnProperty.call(this.configureOptions, o) && (this.allowCreation = !1, i = !1, "function" == typeof t ? i = (i = t(o, [])) || this._handleObject(this.configureOptions[o], [
                        o
                    ], !0) : !0 !== t && -1 === Vv(t).call(t, o) || (i = !0), !1 !== i && (this.allowCreation = !0, e > 0 && this._makeItem([]), this._makeHeader(o), this._handleObject(this.configureOptions[o], [
                        o
                    ])), e++);
                    this._makeButton(), this._push();
                }
            },
            {
                key: "_push",
                value: function() {
                    this.wrapper = document.createElement("div"), this.wrapper.className = "vis-configuration-wrapper", this.container.appendChild(this.wrapper);
                    for(var t = 0; t < this.domElements.length; t++)this.wrapper.appendChild(this.domElements[t]);
                    this._showPopupIfNeeded();
                }
            },
            {
                key: "_clean",
                value: function() {
                    for(var t = 0; t < this.domElements.length; t++)this.wrapper.removeChild(this.domElements[t]);
                    void 0 !== this.wrapper && (this.container.removeChild(this.wrapper), this.wrapper = void 0), this.domElements = [], this._removePopup();
                }
            },
            {
                key: "_getValue",
                value: function(t) {
                    for(var e = this.moduleOptions, i = 0; i < t.length; i++){
                        if (void 0 === e[t[i]]) {
                            e = void 0;
                            break;
                        }
                        e = e[t[i]];
                    }
                    return e;
                }
            },
            {
                key: "_makeItem",
                value: function(t) {
                    if (!0 === this.allowCreation) {
                        var e = document.createElement("div");
                        e.className = "vis-configuration vis-config-item vis-config-s" + t.length;
                        for(var i = arguments.length, o = new Array(i > 1 ? i - 1 : 0), n = 1; n < i; n++)o[n - 1] = arguments[n];
                        return Qf(o).call(o, function(t) {
                            e.appendChild(t);
                        }), this.domElements.push(e), this.domElements.length;
                    }
                    return 0;
                }
            },
            {
                key: "_makeHeader",
                value: function(t) {
                    var e = document.createElement("div");
                    e.className = "vis-configuration vis-config-header", e.innerText = t, this._makeItem([], e);
                }
            },
            {
                key: "_makeLabel",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = document.createElement("div");
                    if (o.className = "vis-configuration vis-config-label vis-config-s" + e.length, !0 === i) {
                        for(; o.firstChild;)o.removeChild(o.firstChild);
                        o.appendChild(ob("i", "b", t));
                    } else o.innerText = t + ":";
                    return o;
                }
            },
            {
                key: "_makeDropdown",
                value: function(t, e, i) {
                    var o = document.createElement("select");
                    o.className = "vis-configuration vis-config-select";
                    var n = 0;
                    void 0 !== e && -1 !== Vv(t).call(t, e) && (n = Vv(t).call(t, e));
                    for(var r = 0; r < t.length; r++){
                        var s = document.createElement("option");
                        s.value = t[r], r === n && (s.selected = "selected"), s.innerText = t[r], o.appendChild(s);
                    }
                    var a = this;
                    o.onchange = function() {
                        a._update(this.value, i);
                    };
                    var h = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, h, o);
                }
            },
            {
                key: "_makeRange",
                value: function(t, e, i) {
                    var o = t[0], n = t[1], r = t[2], s = t[3], a = document.createElement("input");
                    a.className = "vis-configuration vis-config-range";
                    try {
                        a.type = "range", a.min = n, a.max = r;
                    } catch (t) {}
                    a.step = s;
                    var h = "", d = 0;
                    if (void 0 !== e) {
                        var l = 1.2;
                        e < 0 && e * l < n ? (a.min = Math.ceil(e * l), d = a.min, h = "range increased") : e / l < n && (a.min = Math.ceil(e / l), d = a.min, h = "range increased"), e * l > r && 1 !== r && (a.max = Math.ceil(e * l), d = a.max, h = "range increased"), a.value = e;
                    } else a.value = o;
                    var c = document.createElement("input");
                    c.className = "vis-configuration vis-config-rangeinput", c.value = a.value;
                    var u = this;
                    a.onchange = function() {
                        c.value = this.value, u._update(Number(this.value), i);
                    }, a.oninput = function() {
                        c.value = this.value;
                    };
                    var f = this._makeLabel(i[i.length - 1], i), p = this._makeItem(i, f, a, c);
                    "" !== h && this.popupHistory[p] !== d && (this.popupHistory[p] = d, this._setupPopup(h, p));
                }
            },
            {
                key: "_makeButton",
                value: function() {
                    var t = this;
                    if (!0 === this.options.showButton) {
                        var e = document.createElement("div");
                        e.className = "vis-configuration vis-config-button", e.innerText = "generate options", e.onclick = function() {
                            t._printOptions();
                        }, e.onmouseover = function() {
                            e.className = "vis-configuration vis-config-button hover";
                        }, e.onmouseout = function() {
                            e.className = "vis-configuration vis-config-button";
                        }, this.optionsContainer = document.createElement("div"), this.optionsContainer.className = "vis-configuration vis-config-option-container", this.domElements.push(this.optionsContainer), this.domElements.push(e);
                    }
                }
            },
            {
                key: "_setupPopup",
                value: function(t, e) {
                    var i = this;
                    if (!0 === this.initialized && !0 === this.allowCreation && this.popupCounter < this.popupLimit) {
                        var o = document.createElement("div");
                        o.id = "vis-configuration-popup", o.className = "vis-configuration-popup", o.innerText = t, o.onclick = function() {
                            i._removePopup();
                        }, this.popupCounter += 1, this.popupDiv = {
                            html: o,
                            index: e
                        };
                    }
                }
            },
            {
                key: "_removePopup",
                value: function() {
                    void 0 !== this.popupDiv.html && (this.popupDiv.html.parentNode.removeChild(this.popupDiv.html), clearTimeout(this.popupDiv.hideTimeout), clearTimeout(this.popupDiv.deleteTimeout), this.popupDiv = {});
                }
            },
            {
                key: "_showPopupIfNeeded",
                value: function() {
                    var t = this;
                    if (void 0 !== this.popupDiv.html) {
                        var e = this.domElements[this.popupDiv.index].getBoundingClientRect();
                        this.popupDiv.html.style.left = e.left + "px", this.popupDiv.html.style.top = e.top - 30 + "px", document.body.appendChild(this.popupDiv.html), this.popupDiv.hideTimeout = vg(function() {
                            t.popupDiv.html.style.opacity = 0;
                        }, 1500), this.popupDiv.deleteTimeout = vg(function() {
                            t._removePopup();
                        }, 1800);
                    }
                }
            },
            {
                key: "_makeCheckbox",
                value: function(t, e, i) {
                    var o = document.createElement("input");
                    o.type = "checkbox", o.className = "vis-configuration vis-config-checkbox", o.checked = t, void 0 !== e && (o.checked = e, e !== t && ("object" === gu(t) ? e !== t.enabled && this.changedOptions.push({
                        path: i,
                        value: e
                    }) : this.changedOptions.push({
                        path: i,
                        value: e
                    })));
                    var n = this;
                    o.onchange = function() {
                        n._update(this.checked, i);
                    };
                    var r = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, r, o);
                }
            },
            {
                key: "_makeTextInput",
                value: function(t, e, i) {
                    var o = document.createElement("input");
                    o.type = "text", o.className = "vis-configuration vis-config-text", o.value = e, e !== t && this.changedOptions.push({
                        path: i,
                        value: e
                    });
                    var n = this;
                    o.onchange = function() {
                        n._update(this.value, i);
                    };
                    var r = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, r, o);
                }
            },
            {
                key: "_makeColorField",
                value: function(t, e, i) {
                    var o = this, n = t[1], r = document.createElement("div");
                    "none" !== (e = void 0 === e ? n : e) ? (r.className = "vis-configuration vis-config-colorBlock", r.style.backgroundColor = e) : r.className = "vis-configuration vis-config-colorBlock none", e = void 0 === e ? n : e, r.onclick = function() {
                        o._showColorPicker(e, r, i);
                    };
                    var s = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, s, r);
                }
            },
            {
                key: "_showColorPicker",
                value: function(t, e, i) {
                    var o = this;
                    e.onclick = function() {}, this.colorPicker.insertTo(e), this.colorPicker.show(), this.colorPicker.setColor(t), this.colorPicker.setUpdateCallback(function(t) {
                        var n = "rgba(" + t.r + "," + t.g + "," + t.b + "," + t.a + ")";
                        e.style.backgroundColor = n, o._update(n, i);
                    }), this.colorPicker.setCloseCallback(function() {
                        e.onclick = function() {
                            o._showColorPicker(t, e, i);
                        };
                    });
                }
            },
            {
                key: "_handleObject",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = !1, n = lv(this.options), r = !1;
                    for(var s in t)if (Object.prototype.hasOwnProperty.call(t, s)) {
                        o = !0;
                        var a = t[s], h = jm(e, s);
                        if ("function" == typeof n && !1 === (o = n(s, e)) && !Of(a) && "string" != typeof a && "boolean" != typeof a && a instanceof Object && (this.allowCreation = !1, o = this._handleObject(a, h, !0), this.allowCreation = !1 === i), !1 !== o) {
                            r = !0;
                            var d = this._getValue(h);
                            if (Of(a)) this._handleArray(a, d, h);
                            else if ("string" == typeof a) this._makeTextInput(a, d, h);
                            else if ("boolean" == typeof a) this._makeCheckbox(a, d, h);
                            else if (a instanceof Object) {
                                if (!this.hideOption(e, s, this.moduleOptions)) {
                                    if (void 0 !== a.enabled) {
                                        var l = jm(h, "enabled"), c = this._getValue(l);
                                        if (!0 === c) {
                                            var u = this._makeLabel(s, h, !0);
                                            this._makeItem(h, u), r = this._handleObject(a, h) || r;
                                        } else this._makeCheckbox(a, c, h);
                                    } else {
                                        var f = this._makeLabel(s, h, !0);
                                        this._makeItem(h, f), r = this._handleObject(a, h) || r;
                                    }
                                }
                            } else console.error("dont know how to handle", a, s, h);
                        }
                    }
                    return r;
                }
            },
            {
                key: "_handleArray",
                value: function(t, e, i) {
                    "string" == typeof t[0] && "color" === t[0] ? (this._makeColorField(t, e, i), t[1] !== e && this.changedOptions.push({
                        path: i,
                        value: e
                    })) : "string" == typeof t[0] ? (this._makeDropdown(t, e, i), t[0] !== e && this.changedOptions.push({
                        path: i,
                        value: e
                    })) : "number" == typeof t[0] && (this._makeRange(t, e, i), t[0] !== e && this.changedOptions.push({
                        path: i,
                        value: Number(e)
                    }));
                }
            },
            {
                key: "_update",
                value: function(t, e) {
                    var i = this._constructOptions(t, e);
                    this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit && this.parent.body.emitter.emit("configChange", i), this.initialized = !0, this.parent.setOptions(i);
                }
            },
            {
                key: "_constructOptions",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, o = i;
                    t = "false" !== (t = "true" === t || t) && t;
                    for(var n = 0; n < e.length; n++)"global" !== e[n] && (void 0 === o[e[n]] && (o[e[n]] = {}), n !== e.length - 1 ? o = o[e[n]] : o[e[n]] = t);
                    return i;
                }
            },
            {
                key: "_printOptions",
                value: function() {
                    for(var t = this.getOptions(); this.optionsContainer.firstChild;)this.optionsContainer.removeChild(this.optionsContainer.firstChild);
                    this.optionsContainer.appendChild(ob("pre", "const options = " + $v(t, null, 2)));
                }
            },
            {
                key: "getOptions",
                value: function() {
                    for(var t = {}, e = 0; e < this.changedOptions.length; e++)this._constructOptions(this.changedOptions[e].value, this.changedOptions[e].path, t);
                    return t;
                }
            }
        ]), t;
    }(), sb = function() {
        function t(e, i) {
            vh(this, t), this.container = e, this.overflowMethod = i || "cap", this.x = 0, this.y = 0, this.padding = 5, this.hidden = !1, this.frame = document.createElement("div"), this.frame.className = "vis-tooltip", this.container.appendChild(this.frame);
        }
        return wu(t, [
            {
                key: "setPosition",
                value: function(t, e) {
                    this.x = Iv(t), this.y = Iv(e);
                }
            },
            {
                key: "setText",
                value: function(t) {
                    if (t instanceof Element) {
                        for(; this.frame.firstChild;)this.frame.removeChild(this.frame.firstChild);
                        this.frame.appendChild(t);
                    } else this.frame.innerText = t;
                }
            },
            {
                key: "show",
                value: function(t) {
                    if (void 0 === t && (t = !0), !0 === t) {
                        var e = this.frame.clientHeight, i = this.frame.clientWidth, o = this.frame.parentNode.clientHeight, n = this.frame.parentNode.clientWidth, r = 0, s = 0;
                        if ("flip" == this.overflowMethod) {
                            var a = !1, h = !0;
                            this.y - e < this.padding && (h = !1), this.x + i > n - this.padding && (a = !0), r = a ? this.x - i : this.x, s = h ? this.y - e : this.y;
                        } else (s = this.y - e) + e + this.padding > o && (s = o - e - this.padding), s < this.padding && (s = this.padding), (r = this.x) + i + this.padding > n && (r = n - i - this.padding), r < this.padding && (r = this.padding);
                        this.frame.style.left = r + "px", this.frame.style.top = s + "px", this.frame.style.visibility = "visible", this.hidden = !1;
                    } else this.hide();
                }
            },
            {
                key: "hide",
                value: function() {
                    this.hidden = !0, this.frame.style.left = "0", this.frame.style.top = "0", this.frame.style.visibility = "hidden";
                }
            },
            {
                key: "destroy",
                value: function() {
                    this.frame.parentNode.removeChild(this.frame);
                }
            }
        ]), t;
    }(), ab = !1, hb = "background: #FFeeee; color: #dd0000", db = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "validate",
                value: function(e, i, o) {
                    ab = !1, nb = i;
                    var n = i;
                    return void 0 !== o && (n = i[o]), t.parse(e, n, []), ab;
                }
            },
            {
                key: "parse",
                value: function(e, i, o) {
                    for(var n in e)Object.prototype.hasOwnProperty.call(e, n) && t.check(n, e, i, o);
                }
            },
            {
                key: "check",
                value: function(e, i, o, n) {
                    if (void 0 !== o[e] || void 0 !== o.__any__) {
                        var r = e, s = !0;
                        void 0 === o[e] && void 0 !== o.__any__ && (r = "__any__", s = "object" === t.getType(i[e]));
                        var a = o[r];
                        s && void 0 !== a.__type__ && (a = a.__type__), t.checkFields(e, i, o, r, a, n);
                    } else t.getSuggestion(e, o, n);
                }
            },
            {
                key: "checkFields",
                value: function(e, i, o, n, r, s) {
                    var a = function(i) {
                        console.error("%c" + i + t.printLocation(s, e), hb);
                    }, h = t.getType(i[e]), d = r[h];
                    void 0 !== d ? "array" === t.getType(d) && -1 === Vv(d).call(d, i[e]) ? (a('Invalid option detected in "' + e + '". Allowed values are:' + t.print(d) + ' not "' + i[e] + '". '), ab = !0) : "object" === h && "__any__" !== n && (s = jm(s, e), t.parse(i[e], o[n], s)) : void 0 === r.any && (a('Invalid type received for "' + e + '". Expected: ' + t.print(zf(r)) + ". Received [" + h + '] "' + i[e] + '"'), ab = !0);
                }
            },
            {
                key: "getType",
                value: function(t) {
                    var e = gu(t);
                    return "object" === e ? null === t ? "null" : t instanceof Boolean ? "boolean" : t instanceof Number ? "number" : t instanceof String ? "string" : Of(t) ? "array" : t instanceof Date ? "date" : void 0 !== t.nodeType ? "dom" : !0 === t._isAMomentObject ? "moment" : "object" : "number" === e ? "number" : "boolean" === e ? "boolean" : "string" === e ? "string" : void 0 === e ? "undefined" : e;
                }
            },
            {
                key: "getSuggestion",
                value: function(e, i, o) {
                    var n, r = t.findInOptions(e, i, o, !1), s = t.findInOptions(e, nb, [], !0);
                    n = void 0 !== r.indexMatch ? " in " + t.printLocation(r.path, e, "") + 'Perhaps it was incomplete? Did you mean: "' + r.indexMatch + '"?\n\n' : s.distance <= 4 && r.distance > s.distance ? " in " + t.printLocation(r.path, e, "") + "Perhaps it was misplaced? Matching option found at: " + t.printLocation(s.path, s.closestMatch, "") : r.distance <= 8 ? '. Did you mean "' + r.closestMatch + '"?' + t.printLocation(r.path, e) : ". Did you mean one of these: " + t.print(zf(i)) + t.printLocation(o, e), console.error('%cUnknown option detected: "' + e + '"' + n, hb), ab = !0;
                }
            },
            {
                key: "findInOptions",
                value: function(e, i, o) {
                    var n, r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], s = 1e9, a = "", h = [], d = e.toLowerCase(), l = void 0;
                    for(var c in i){
                        var u = void 0;
                        if (void 0 !== i[c].__type__ && !0 === r) {
                            var f = t.findInOptions(e, i[c], jm(o, c));
                            s > f.distance && (a = f.closestMatch, h = f.path, s = f.distance, l = f.indexMatch);
                        } else {
                            var p;
                            -1 !== Vv(p = c.toLowerCase()).call(p, d) && (l = c), s > (u = t.levenshteinDistance(e, c)) && (a = c, h = mf(n = o).call(n), s = u);
                        }
                    }
                    return {
                        closestMatch: a,
                        path: h,
                        distance: s,
                        indexMatch: l
                    };
                }
            },
            {
                key: "printLocation",
                value: function(t, e) {
                    for(var i = "\n\n" + (arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "Problem value found at: \n") + "options = {\n", o = 0; o < t.length; o++){
                        for(var n = 0; n < o + 1; n++)i += "  ";
                        i += t[o] + ": {\n";
                    }
                    for(var r = 0; r < t.length + 1; r++)i += "  ";
                    i += e + "\n";
                    for(var s = 0; s < t.length + 1; s++){
                        for(var a = 0; a < t.length - s; a++)i += "  ";
                        i += "}\n";
                    }
                    return i + "\n\n";
                }
            },
            {
                key: "print",
                value: function(t) {
                    return $v(t).replace(/(")|(\[)|(\])|(,"__type__")/g, "").replace(/(,)/g, ", ");
                }
            },
            {
                key: "levenshteinDistance",
                value: function(t, e) {
                    if (0 === t.length) return e.length;
                    if (0 === e.length) return t.length;
                    var i, o, n = [];
                    for(i = 0; i <= e.length; i++)n[i] = [
                        i
                    ];
                    for(o = 0; o <= t.length; o++)n[0][o] = o;
                    for(i = 1; i <= e.length; i++)for(o = 1; o <= t.length; o++)e.charAt(i - 1) == t.charAt(o - 1) ? n[i][o] = n[i - 1][o - 1] : n[i][o] = Math.min(n[i - 1][o - 1] + 1, Math.min(n[i][o - 1] + 1, n[i - 1][o] + 1));
                    return n[e.length][t.length];
                }
            }
        ]), t;
    }(), lb = Cm, cb = rb, ub = Om, fb = sb, pb = hb, vb = db;
    function gb(t) {
        return kb = t, function() {
            var t = {};
            _b = 0, xb = kb.charAt(0), Fb(), "strict" === Eb && (t.strict = !0, Fb());
            "graph" !== Eb && "digraph" !== Eb || (t.type = Eb, Fb());
            Ob === bb.IDENTIFIER && (t.id = Eb, Fb());
            if ("{" != Eb) throw Lb("Angle bracket { expected");
            if (Fb(), zb(t), "}" != Eb) throw Lb("Angle bracket } expected");
            if (Fb(), "" !== Eb) throw Lb("End of file expected");
            return Fb(), delete t.node, delete t.edge, delete t.graph, t;
        }();
    }
    var yb = {
        fontsize: "font.size",
        fontcolor: "font.color",
        labelfontcolor: "font.color",
        fontname: "font.face",
        color: [
            "color.border",
            "color.background"
        ],
        fillcolor: "color.background",
        tooltip: "title",
        labeltooltip: "title"
    }, mb = Yv(yb);
    mb.color = "color.color", mb.style = "dashes";
    var bb = {
        NULL: 0,
        DELIMITER: 1,
        IDENTIFIER: 2,
        UNKNOWN: 3
    }, wb = {
        "{": !0,
        "}": !0,
        "[": !0,
        "]": !0,
        ";": !0,
        "=": !0,
        ",": !0,
        "->": !0,
        "--": !0
    }, kb = "", _b = 0, xb = "", Eb = "", Ob = bb.NULL;
    function Cb() {
        _b++, xb = kb.charAt(_b);
    }
    function Sb() {
        return kb.charAt(_b + 1);
    }
    function Tb(t) {
        var e = t.charCodeAt(0);
        return e < 47 ? 35 === e || 46 === e : e < 59 ? e > 47 : e < 91 ? e > 64 : e < 96 ? 95 === e : e < 123 && e > 96;
    }
    function Mb(t, e) {
        if (t || (t = {}), e) for(var i in e)e.hasOwnProperty(i) && (t[i] = e[i]);
        return t;
    }
    function Pb(t, e, i) {
        for(var o = e.split("."), n = t; o.length;){
            var r = o.shift();
            o.length ? (n[r] || (n[r] = {}), n = n[r]) : n[r] = i;
        }
    }
    function Db(t, e) {
        for(var i, o, n = null, r = [
            t
        ], s = t; s.parent;)r.push(s.parent), s = s.parent;
        if (s.nodes) {
            for(i = 0, o = s.nodes.length; i < o; i++)if (e.id === s.nodes[i].id) {
                n = s.nodes[i];
                break;
            }
        }
        for(n || (n = {
            id: e.id
        }, t.node && (n.attr = Mb(n.attr, t.node))), i = r.length - 1; i >= 0; i--){
            var a, h = r[i];
            h.nodes || (h.nodes = []), -1 === Vv(a = h.nodes).call(a, n) && h.nodes.push(n);
        }
        e.attr && (n.attr = Mb(n.attr, e.attr));
    }
    function Ib(t, e) {
        if (t.edges || (t.edges = []), t.edges.push(e), t.edge) {
            var i = Mb({}, t.edge);
            e.attr = Mb(i, e.attr);
        }
    }
    function Bb(t, e, i, o, n) {
        var r = {
            from: e,
            to: i,
            type: o
        };
        return t.edge && (r.attr = Mb({}, t.edge)), r.attr = Mb(r.attr || {}, n), null != n && n.hasOwnProperty("arrows") && null != n.arrows && (r.arrows = {
            to: {
                enabled: !0,
                type: n.arrows.type
            }
        }, n.arrows = null), r;
    }
    function Fb() {
        for(Ob = bb.NULL, Eb = ""; " " === xb || "	" === xb || "\n" === xb || "\r" === xb;)Cb();
        do {
            var t = !1;
            if ("#" === xb) {
                for(var e = _b - 1; " " === kb.charAt(e) || "	" === kb.charAt(e);)e--;
                if ("\n" === kb.charAt(e) || "" === kb.charAt(e)) {
                    for(; "" != xb && "\n" != xb;)Cb();
                    t = !0;
                }
            }
            if ("/" === xb && "/" === Sb()) {
                for(; "" != xb && "\n" != xb;)Cb();
                t = !0;
            }
            if ("/" === xb && "*" === Sb()) {
                for(; "" != xb;){
                    if ("*" === xb && "/" === Sb()) {
                        Cb(), Cb();
                        break;
                    }
                    Cb();
                }
                t = !0;
            }
            for(; " " === xb || "	" === xb || "\n" === xb || "\r" === xb;)Cb();
        }while (t);
        if ("" !== xb) {
            var i = xb + Sb();
            if (wb[i]) return Ob = bb.DELIMITER, Eb = i, Cb(), void Cb();
            if (wb[xb]) return Ob = bb.DELIMITER, Eb = xb, void Cb();
            if (Tb(xb) || "-" === xb) {
                for(Eb += xb, Cb(); Tb(xb);)Eb += xb, Cb();
                return "false" === Eb ? Eb = !1 : "true" === Eb ? Eb = !0 : isNaN(Number(Eb)) || (Eb = Number(Eb)), void (Ob = bb.IDENTIFIER);
            }
            if ('"' === xb) {
                for(Cb(); "" != xb && ('"' != xb || '"' === xb && '"' === Sb());)'"' === xb ? (Eb += xb, Cb()) : "\\" === xb && "n" === Sb() ? (Eb += "\n", Cb()) : Eb += xb, Cb();
                if ('"' != xb) throw Lb('End of string " expected');
                return Cb(), void (Ob = bb.IDENTIFIER);
            }
            for(Ob = bb.UNKNOWN; "" != xb;)Eb += xb, Cb();
            throw new SyntaxError('Syntax error in part "' + Hb(Eb, 30) + '"');
        }
        Ob = bb.DELIMITER;
    }
    function zb(t) {
        for(; "" !== Eb && "}" != Eb;)Nb(t), ";" === Eb && Fb();
    }
    function Nb(t) {
        var e = Ab(t);
        if (e) Rb(t, e);
        else {
            var i = function(t) {
                if ("node" === Eb) return Fb(), t.node = jb(), "node";
                if ("edge" === Eb) return Fb(), t.edge = jb(), "edge";
                if ("graph" === Eb) return Fb(), t.graph = jb(), "graph";
                return null;
            }(t);
            if (!i) {
                if (Ob != bb.IDENTIFIER) throw Lb("Identifier expected");
                var o = Eb;
                if (Fb(), "=" === Eb) {
                    if (Fb(), Ob != bb.IDENTIFIER) throw Lb("Identifier expected");
                    t[o] = Eb, Fb();
                } else !function(t, e) {
                    var i = {
                        id: e
                    }, o = jb();
                    o && (i.attr = o);
                    Db(t, i), Rb(t, e);
                }(t, o);
            }
        }
    }
    function Ab(t) {
        var e = null;
        if ("subgraph" === Eb && ((e = {}).type = "subgraph", Fb(), Ob === bb.IDENTIFIER && (e.id = Eb, Fb())), "{" === Eb) {
            if (Fb(), e || (e = {}), e.parent = t, e.node = t.node, e.edge = t.edge, e.graph = t.graph, zb(e), "}" != Eb) throw Lb("Angle bracket } expected");
            Fb(), delete e.node, delete e.edge, delete e.graph, delete e.parent, t.subgraphs || (t.subgraphs = []), t.subgraphs.push(e);
        }
        return e;
    }
    function Rb(t, e) {
        for(; "->" === Eb || "--" === Eb;){
            var i, o = Eb;
            Fb();
            var n = Ab(t);
            if (n) i = n;
            else {
                if (Ob != bb.IDENTIFIER) throw Lb("Identifier or subgraph expected");
                Db(t, {
                    id: i = Eb
                }), Fb();
            }
            Ib(t, Bb(t, e, i, o, jb())), e = i;
        }
    }
    function jb() {
        for(var t, e, i = null, o = {
            dashed: !0,
            solid: !1,
            dotted: [
                1,
                5
            ]
        }, n = {
            dot: "circle",
            box: "box",
            crow: "crow",
            curve: "curve",
            icurve: "inv_curve",
            normal: "triangle",
            inv: "inv_triangle",
            diamond: "diamond",
            tee: "bar",
            vee: "vee"
        }, r = new Array, s = new Array; "[" === Eb;){
            for(Fb(), i = {}; "" !== Eb && "]" != Eb;){
                if (Ob != bb.IDENTIFIER) throw Lb("Attribute name expected");
                var a = Eb;
                if (Fb(), "=" != Eb) throw Lb("Equal sign = expected");
                if (Fb(), Ob != bb.IDENTIFIER) throw Lb("Attribute value expected");
                var h = Eb;
                "style" === a && (h = o[h]), "arrowhead" === a && (a = "arrows", h = {
                    to: {
                        enabled: !0,
                        type: n[h]
                    }
                }), "arrowtail" === a && (a = "arrows", h = {
                    from: {
                        enabled: !0,
                        type: n[h]
                    }
                }), r.push({
                    attr: i,
                    name: a,
                    value: h
                }), s.push(a), Fb(), "," == Eb && Fb();
            }
            if ("]" != Eb) throw Lb("Bracket ] expected");
            Fb();
        }
        if (Qp(s).call(s, "dir")) {
            var d = {
                arrows: {}
            };
            for(t = 0; t < r.length; t++)if ("arrows" === r[t].name) {
                if (null != r[t].value.to) d.arrows.to = t;
                else {
                    if (null == r[t].value.from) throw Lb("Invalid value of arrows");
                    d.arrows.from = t;
                }
            } else "dir" === r[t].name && (d.dir = t);
            var l, c, u = r[d.dir].value;
            if (!Qp(s).call(s, "arrows")) {
                if ("both" === u) r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        to: {
                            enabled: !0
                        }
                    }
                }), d.arrows.to = r.length - 1, r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        from: {
                            enabled: !0
                        }
                    }
                }), d.arrows.from = r.length - 1;
                else if ("forward" === u) r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        to: {
                            enabled: !0
                        }
                    }
                }), d.arrows.to = r.length - 1;
                else if ("back" === u) r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        from: {
                            enabled: !0
                        }
                    }
                }), d.arrows.from = r.length - 1;
                else {
                    if ("none" !== u) throw Lb('Invalid dir type "' + u + '"');
                    r.push({
                        attr: r[d.dir].attr,
                        name: "arrows",
                        value: ""
                    }), d.arrows.to = r.length - 1;
                }
            }
            if ("both" === u) d.arrows.to && d.arrows.from ? (c = r[d.arrows.to].value.to.type, l = r[d.arrows.from].value.from.type, r[d.arrows.to] = {
                attr: r[d.arrows.to].attr,
                name: r[d.arrows.to].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }, Pp(r).call(r, d.arrows.from, 1)) : d.arrows.to ? (c = r[d.arrows.to].value.to.type, l = "arrow", r[d.arrows.to] = {
                attr: r[d.arrows.to].attr,
                name: r[d.arrows.to].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }) : d.arrows.from && (c = "arrow", l = r[d.arrows.from].value.from.type, r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            });
            else if ("back" === u) d.arrows.to && d.arrows.from ? (c = "", l = r[d.arrows.from].value.from.type, r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }) : d.arrows.to ? (c = "", l = "arrow", d.arrows.from = d.arrows.to, r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }) : d.arrows.from && (c = "", l = r[d.arrows.from].value.from.type, r[d.arrows.to] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }), r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    from: {
                        enabled: !0,
                        type: r[d.arrows.from].value.from.type
                    }
                }
            };
            else if ("none" === u) {
                var f;
                r[f = d.arrows.to ? d.arrows.to : d.arrows.from] = {
                    attr: r[f].attr,
                    name: r[f].name,
                    value: ""
                };
            } else {
                if ("forward" !== u) throw Lb('Invalid dir type "' + u + '"');
                d.arrows.to && d.arrows.from || d.arrows.to ? (c = r[d.arrows.to].value.to.type, l = "", r[d.arrows.to] = {
                    attr: r[d.arrows.to].attr,
                    name: r[d.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: c
                        },
                        from: {
                            enabled: !0,
                            type: l
                        }
                    }
                }) : d.arrows.from && (c = "arrow", l = "", d.arrows.to = d.arrows.from, r[d.arrows.to] = {
                    attr: r[d.arrows.to].attr,
                    name: r[d.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: c
                        },
                        from: {
                            enabled: !0,
                            type: l
                        }
                    }
                }), r[d.arrows.to] = {
                    attr: r[d.arrows.to].attr,
                    name: r[d.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: r[d.arrows.to].value.to.type
                        }
                    }
                };
            }
            Pp(r).call(r, d.dir, 1);
        }
        if (Qp(s).call(s, "penwidth")) {
            var p = [];
            for(e = r.length, t = 0; t < e; t++)"width" !== r[t].name && ("penwidth" === r[t].name && (r[t].name = "width"), p.push(r[t]));
            r = p;
        }
        for(e = r.length, t = 0; t < e; t++)Pb(r[t].attr, r[t].name, r[t].value);
        return i;
    }
    function Lb(t) {
        return new SyntaxError(t + ', got "' + Hb(Eb, 30) + '" (char ' + _b + ")");
    }
    function Hb(t, e) {
        return t.length <= e ? t : t.substr(0, 27) + "...";
    }
    function Wb(t, e, i) {
        for(var o = e.split("."), n = o.pop(), r = t, s = 0; s < o.length; s++){
            var a = o[s];
            a in r || (r[a] = {}), r = r[a];
        }
        return r[n] = i, t;
    }
    function Vb(t, e) {
        var i = {};
        for(var o in t)if (t.hasOwnProperty(o)) {
            var n = e[o];
            Of(n) ? Qf(n).call(n, function(e) {
                Wb(i, e, t[o]);
            }) : Wb(i, "string" == typeof n ? n : o, t[o]);
        }
        return i;
    }
    function qb(t) {
        var e, i = gb(t), o = {
            nodes: [],
            edges: [],
            options: {}
        };
        i.nodes && Qf(e = i.nodes).call(e, function(t) {
            var e = {
                id: t.id,
                label: String(t.label || t.id)
            };
            Mb(e, Vb(t.attr, yb)), e.image && (e.shape = "image"), o.nodes.push(e);
        });
        if (i.edges) {
            var n, r = function(t) {
                var e = {
                    from: t.from,
                    to: t.to
                };
                return Mb(e, Vb(t.attr, mb)), null == e.arrows && "->" === t.type && (e.arrows = "to"), e;
            };
            Qf(n = i.edges).call(n, function(t) {
                var e, i, n, s, a, h, d;
                (e = t.from instanceof Object ? t.from.nodes : {
                    id: t.from
                }, i = t.to instanceof Object ? t.to.nodes : {
                    id: t.to
                }, t.from instanceof Object && t.from.edges) && Qf(n = t.from.edges).call(n, function(t) {
                    var e = r(t);
                    o.edges.push(e);
                });
                (a = i, h = function(e, i) {
                    var n = Bb(o, e.id, i.id, t.type, t.attr), s = r(n);
                    o.edges.push(s);
                }, Of(s = e) ? Qf(s).call(s, function(t) {
                    Of(a) ? Qf(a).call(a, function(e) {
                        h(t, e);
                    }) : h(t, a);
                }) : Of(a) ? Qf(a).call(a, function(t) {
                    h(s, t);
                }) : h(s, a), t.to instanceof Object && t.to.edges) && Qf(d = t.to.edges).call(d, function(t) {
                    var e = r(t);
                    o.edges.push(e);
                });
            });
        }
        return i.attr && (o.options = i.attr), o;
    }
    var Ub = Object.freeze({
        __proto__: null,
        DOTToGraph: qb,
        parseDOT: gb
    });
    function Yb(t, e) {
        var i, o = {
            edges: {
                inheritColor: !1
            },
            nodes: {
                fixed: !1,
                parseColor: !1
            }
        };
        null != e && (null != e.fixed && (o.nodes.fixed = e.fixed), null != e.parseColor && (o.nodes.parseColor = e.parseColor), null != e.inheritColor && (o.edges.inheritColor = e.inheritColor));
        var n = t.edges, r = If(n).call(n, function(t) {
            var e = {
                from: t.source,
                id: t.id,
                to: t.target
            };
            return null != t.attributes && (e.attributes = t.attributes), null != t.label && (e.label = t.label), null != t.attributes && null != t.attributes.title && (e.title = t.attributes.title), "Directed" === t.type && (e.arrows = "to"), t.color && !1 === o.edges.inheritColor && (e.color = t.color), e;
        });
        return {
            nodes: If(i = t.nodes).call(i, function(t) {
                var e = {
                    id: t.id,
                    fixed: o.nodes.fixed && null != t.x && null != t.y
                };
                return null != t.attributes && (e.attributes = t.attributes), null != t.label && (e.label = t.label), null != t.size && (e.size = t.size), null != t.attributes && null != t.attributes.title && (e.title = t.attributes.title), null != t.title && (e.title = t.title), null != t.x && (e.x = t.x), null != t.y && (e.y = t.y), null != t.color && (!0 === o.nodes.parseColor ? e.color = t.color : e.color = {
                    background: t.color,
                    border: t.color,
                    highlight: {
                        background: t.color,
                        border: t.color
                    },
                    hover: {
                        background: t.color,
                        border: t.color
                    }
                }), e;
            }),
            edges: r
        };
    }
    var Xb = Object.freeze({
        __proto__: null,
        parseGephi: Yb
    }), Kb = Object.freeze({
        __proto__: null,
        cn: {
            addDescription: "\u5355\u51FB\u7A7A\u767D\u5904\u653E\u7F6E\u65B0\u8282\u70B9\u3002",
            addEdge: "\u6DFB\u52A0\u8FDE\u63A5\u7EBF",
            addNode: "\u6DFB\u52A0\u8282\u70B9",
            back: "\u8FD4\u56DE",
            close: "\u95DC\u9589",
            createEdgeError: "\u65E0\u6CD5\u5C06\u8FDE\u63A5\u7EBF\u8FDE\u63A5\u5230\u7FA4\u96C6\u3002",
            del: "\u5220\u9664\u9009\u5B9A",
            deleteClusterError: "\u65E0\u6CD5\u5220\u9664\u7FA4\u96C6\u3002",
            edgeDescription: "\u5355\u51FB\u67D0\u4E2A\u8282\u70B9\u5E76\u5C06\u8BE5\u8FDE\u63A5\u7EBF\u62D6\u52A8\u5230\u53E6\u4E00\u4E2A\u8282\u70B9\u4EE5\u8FDE\u63A5\u5B83\u4EEC\u3002",
            edit: "\u7F16\u8F91",
            editClusterError: "\u65E0\u6CD5\u7F16\u8F91\u7FA4\u96C6\u3002",
            editEdge: "\u7F16\u8F91\u8FDE\u63A5\u7EBF",
            editEdgeDescription: "\u5355\u51FB\u63A7\u5236\u8282\u70B9\u5E76\u5C06\u5B83\u4EEC\u62D6\u5230\u8282\u70B9\u4E0A\u8FDE\u63A5\u3002",
            editNode: "\u7F16\u8F91\u8282\u70B9"
        },
        cs: {
            addDescription: "Kluknut\xedm do pr\xe1zdn\xe9ho prostoru m\u016F\u017Eete p\u0159idat nov\xfd vrchol.",
            addEdge: "P\u0159idat hranu",
            addNode: "P\u0159idat vrchol",
            back: "Zp\u011Bt",
            close: "Zav\u0159\xedt",
            createEdgeError: "Nelze p\u0159ipojit hranu ke shluku.",
            del: "Smazat v\xfdb\u011Br",
            deleteClusterError: "Nelze mazat shluky.",
            edgeDescription: "P\u0159eta\u017Een\xedm z jednoho vrcholu do druh\xe9ho m\u016F\u017Eete spojit tyto vrcholy novou hranou.",
            edit: "Upravit",
            editClusterError: "Nelze upravovat shluky.",
            editEdge: "Upravit hranu",
            editEdgeDescription: "P\u0159eta\u017Een\xedm kontroln\xedho vrcholu hrany ji m\u016F\u017Eete p\u0159ipojit k jin\xe9mu vrcholu.",
            editNode: "Upravit vrchol"
        },
        de: {
            addDescription: "Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.",
            addEdge: "Kante hinzuf\xfcgen",
            addNode: "Knoten hinzuf\xfcgen",
            back: "Zur\xfcck",
            close: "Schlie\xdfen",
            createEdgeError: "Es ist nicht m\xf6glich, Kanten mit Clustern zu verbinden.",
            del: "L\xf6sche Auswahl",
            deleteClusterError: "Cluster k\xf6nnen nicht gel\xf6scht werden.",
            edgeDescription: "Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.",
            edit: "Editieren",
            editClusterError: "Cluster k\xf6nnen nicht editiert werden.",
            editEdge: "Kante editieren",
            editEdgeDescription: "Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.",
            editNode: "Knoten editieren"
        },
        en: {
            addDescription: "Click in an empty space to place a new node.",
            addEdge: "Add Edge",
            addNode: "Add Node",
            back: "Back",
            close: "Close",
            createEdgeError: "Cannot link edges to a cluster.",
            del: "Delete selected",
            deleteClusterError: "Clusters cannot be deleted.",
            edgeDescription: "Click on a node and drag the edge to another node to connect them.",
            edit: "Edit",
            editClusterError: "Clusters cannot be edited.",
            editEdge: "Edit Edge",
            editEdgeDescription: "Click on the control points and drag them to a node to connect to it.",
            editNode: "Edit Node"
        },
        es: {
            addDescription: "Haga clic en un lugar vac\xedo para colocar un nuevo nodo.",
            addEdge: "A\xf1adir arista",
            addNode: "A\xf1adir nodo",
            back: "Atr\xe1s",
            close: "Cerrar",
            createEdgeError: "No se puede conectar una arista a un grupo.",
            del: "Eliminar selecci\xf3n",
            deleteClusterError: "No es posible eliminar grupos.",
            edgeDescription: "Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.",
            edit: "Editar",
            editClusterError: "No es posible editar grupos.",
            editEdge: "Editar arista",
            editEdgeDescription: "Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.",
            editNode: "Editar nodo"
        },
        fr: {
            addDescription: "Cliquez dans un endroit vide pour placer un n\u0153ud.",
            addEdge: "Ajouter un lien",
            addNode: "Ajouter un n\u0153ud",
            back: "Retour",
            close: "Fermer",
            createEdgeError: "Impossible de cr\xe9er un lien vers un cluster.",
            del: "Effacer la s\xe9lection",
            deleteClusterError: "Les clusters ne peuvent pas \xeatre effac\xe9s.",
            edgeDescription: "Cliquez sur un n\u0153ud et glissez le lien vers un autre n\u0153ud pour les connecter.",
            edit: "\xc9diter",
            editClusterError: "Les clusters ne peuvent pas \xeatre \xe9dit\xe9s.",
            editEdge: "\xc9diter le lien",
            editEdgeDescription: "Cliquez sur les points de contr\xf4le et glissez-les pour connecter un n\u0153ud.",
            editNode: "\xc9diter le n\u0153ud"
        },
        it: {
            addDescription: "Clicca per aggiungere un nuovo nodo",
            addEdge: "Aggiungi un vertice",
            addNode: "Aggiungi un nodo",
            back: "Indietro",
            close: "Chiudere",
            createEdgeError: "Non si possono collegare vertici ad un cluster",
            del: "Cancella la selezione",
            deleteClusterError: "I cluster non possono essere cancellati",
            edgeDescription: "Clicca su un nodo e trascinalo ad un altro nodo per connetterli.",
            edit: "Modifica",
            editClusterError: "I clusters non possono essere modificati.",
            editEdge: "Modifica il vertice",
            editEdgeDescription: "Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.",
            editNode: "Modifica il nodo"
        },
        nl: {
            addDescription: "Klik op een leeg gebied om een nieuwe node te maken.",
            addEdge: "Link toevoegen",
            addNode: "Node toevoegen",
            back: "Terug",
            close: "Sluiten",
            createEdgeError: "Kan geen link maken naar een cluster.",
            del: "Selectie verwijderen",
            deleteClusterError: "Clusters kunnen niet worden verwijderd.",
            edgeDescription: "Klik op een node en sleep de link naar een andere node om ze te verbinden.",
            edit: "Wijzigen",
            editClusterError: "Clusters kunnen niet worden aangepast.",
            editEdge: "Link wijzigen",
            editEdgeDescription: "Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.",
            editNode: "Node wijzigen"
        },
        pt: {
            addDescription: "Clique em um espa\xe7o em branco para adicionar um novo n\xf3",
            addEdge: "Adicionar aresta",
            addNode: "Adicionar n\xf3",
            back: "Voltar",
            close: "Fechar",
            createEdgeError: "N\xe3o foi poss\xedvel linkar arestas a um cluster.",
            del: "Remover selecionado",
            deleteClusterError: "Clusters n\xe3o puderam ser removidos.",
            edgeDescription: "Clique em um n\xf3 e arraste a aresta at\xe9 outro n\xf3 para conect\xe1-los",
            edit: "Editar",
            editClusterError: "Clusters n\xe3o puderam ser editados.",
            editEdge: "Editar aresta",
            editEdgeDescription: "Clique nos pontos de controle e os arraste para um n\xf3 para conect\xe1-los",
            editNode: "Editar n\xf3"
        },
        ru: {
            addDescription: "\u041A\u043B\u0438\u043A\u043D\u0438\u0442\u0435 \u0432 \u0441\u0432\u043E\u0431\u043E\u0434\u043D\u043E\u0435 \u043C\u0435\u0441\u0442\u043E, \u0447\u0442\u043E\u0431\u044B \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043D\u043E\u0432\u044B\u0439 \u0443\u0437\u0435\u043B.",
            addEdge: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0440\u0435\u0431\u0440\u043E",
            addNode: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0443\u0437\u0435\u043B",
            back: "\u041D\u0430\u0437\u0430\u0434",
            close: "\u0417\u0430\u043A\u0440\u044B\u0432\u0430\u0442\u044C",
            createEdgeError: "\u041D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u044C \u0440\u0435\u0431\u0440\u0430 \u0432 \u043A\u043B\u0430\u0441\u0442\u0435\u0440.",
            del: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u043E\u0435",
            deleteClusterError: "\u041A\u043B\u0430\u0441\u0442\u0435\u0440\u044B \u043D\u0435 \u043C\u043E\u0433\u0443\u0442 \u0431\u044B\u0442\u044C \u0443\u0434\u0430\u043B\u0435\u043D\u044B",
            edgeDescription: "\u041A\u043B\u0438\u043A\u043D\u0438\u0442\u0435 \u043D\u0430 \u0443\u0437\u0435\u043B \u0438 \u043F\u0440\u043E\u0442\u044F\u043D\u0438\u0442\u0435 \u0440\u0435\u0431\u0440\u043E \u043A \u0434\u0440\u0443\u0433\u043E\u043C\u0443 \u0443\u0437\u043B\u0443, \u0447\u0442\u043E\u0431\u044B \u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u044C \u0438\u0445.",
            edit: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C",
            editClusterError: "\u041A\u043B\u0430\u0441\u0442\u0435\u0440\u044B \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B \u0434\u043B\u044F \u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F.",
            editEdge: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0440\u0435\u0431\u0440\u043E",
            editEdgeDescription: "\u041A\u043B\u0438\u043A\u043D\u0438\u0442\u0435 \u043D\u0430 \u043A\u043E\u043D\u0442\u0440\u043E\u043B\u044C\u043D\u044B\u0435 \u0442\u043E\u0447\u043A\u0438 \u0438 \u043F\u0435\u0440\u0435\u0442\u0430\u0449\u0438\u0442\u0435 \u0438\u0445 \u0432 \u0443\u0437\u0435\u043B, \u0447\u0442\u043E\u0431\u044B \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0441\u044F \u043A \u043D\u0435\u043C\u0443.",
            editNode: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0443\u0437\u0435\u043B"
        },
        uk: {
            addDescription: "K\u043B\u0456\u043A\u043D\u0456\u0442\u044C \u043D\u0430 \u0432\u0456\u043B\u044C\u043D\u0435 \u043C\u0456\u0441\u0446\u0435, \u0449\u043E\u0431 \u0434\u043E\u0434\u0430\u0442\u0438 \u043D\u043E\u0432\u0438\u0439 \u0432\u0443\u0437\u043E\u043B.",
            addEdge: "\u0414\u043E\u0434\u0430\u0442\u0438 \u043A\u0440\u0430\u0439",
            addNode: "\u0414\u043E\u0434\u0430\u0442\u0438 \u0432\u0443\u0437\u043E\u043B",
            back: "\u041D\u0430\u0437\u0430\u0434",
            close: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438",
            createEdgeError: "\u041D\u0435 \u043C\u043E\u0436\u043B\u0438\u0432\u043E \u043E\u0431'\u0454\u0434\u043D\u0430\u0442\u0438 \u043A\u0440\u0430\u0457 \u0432 \u0433\u0440\u0443\u043F\u0443.",
            del: "\u0412\u0438\u0434\u0430\u043B\u0438\u0442\u0438 \u043E\u0431\u0440\u0430\u043D\u0435",
            deleteClusterError: "\u0413\u0440\u0443\u043F\u0438 \u043D\u0435 \u043C\u043E\u0436\u0443\u0442\u044C \u0431\u0443\u0442\u0438 \u0432\u0438\u0434\u0430\u043B\u0435\u043D\u0456.",
            edgeDescription: "\u041A\u043B\u0456\u043A\u043D\u0456\u0442\u044C \u043D\u0430 \u0432\u0443\u0437\u043E\u043B \u0456 \u043F\u0435\u0440\u0435\u0442\u044F\u0433\u043D\u0456\u0442\u044C \u043A\u0440\u0430\u0439 \u0434\u043E \u0456\u043D\u0448\u043E\u0433\u043E \u0432\u0443\u0437\u043B\u0430, \u0449\u043E\u0431 \u0457\u0445 \u0437'\u0454\u0434\u043D\u0430\u0442\u0438.",
            edit: "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438",
            editClusterError: "\u0413\u0440\u0443\u043F\u0438 \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u043D\u0456 \u0434\u043B\u044F \u0440\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u043D\u043D\u044F.",
            editEdge: "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438 \u043A\u0440\u0430\u0439",
            editEdgeDescription: "\u041A\u043B\u0456\u043A\u043D\u0456\u0442\u044C \u043D\u0430 \u043A\u043E\u043D\u0442\u0440\u043E\u043B\u044C\u043D\u0456 \u0442\u043E\u0447\u043A\u0438 \u0456 \u043F\u0435\u0440\u0435\u0442\u044F\u0433\u043D\u0456\u0442\u044C \u0457\u0445 \u0443 \u0432\u0443\u0437\u043E\u043B, \u0449\u043E\u0431 \u043F\u0456\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u0438\u0441\u044F \u0434\u043E \u043D\u044C\u043E\u0433\u043E.",
            editNode: "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438 \u0432\u0443\u0437\u043E\u043B"
        }
    });
    var Gb = function() {
        function t() {
            vh(this, t), this.NUM_ITERATIONS = 4, this.image = new Image, this.canvas = document.createElement("canvas");
        }
        return wu(t, [
            {
                key: "init",
                value: function() {
                    if (!this.initialized()) {
                        this.src = this.image.src;
                        var t = this.image.width, e = this.image.height;
                        this.width = t, this.height = e;
                        var i = Math.floor(e / 2), o = Math.floor(e / 4), n = Math.floor(e / 8), r = Math.floor(e / 16), s = Math.floor(t / 2), a = Math.floor(t / 4), h = Math.floor(t / 8), d = Math.floor(t / 16);
                        this.canvas.width = 3 * a, this.canvas.height = i, this.coordinates = [
                            [
                                0,
                                0,
                                s,
                                i
                            ],
                            [
                                s,
                                0,
                                a,
                                o
                            ],
                            [
                                s,
                                o,
                                h,
                                n
                            ],
                            [
                                5 * h,
                                o,
                                d,
                                r
                            ]
                        ], this._fillMipMap();
                    }
                }
            },
            {
                key: "initialized",
                value: function() {
                    return void 0 !== this.coordinates;
                }
            },
            {
                key: "_fillMipMap",
                value: function() {
                    var t = this.canvas.getContext("2d"), e = this.coordinates[0];
                    t.drawImage(this.image, e[0], e[1], e[2], e[3]);
                    for(var i = 1; i < this.NUM_ITERATIONS; i++){
                        var o = this.coordinates[i - 1], n = this.coordinates[i];
                        t.drawImage(this.canvas, o[0], o[1], o[2], o[3], n[0], n[1], n[2], n[3]);
                    }
                }
            },
            {
                key: "drawImageAtPosition",
                value: function(t, e, i, o, n, r) {
                    if (this.initialized()) {
                        if (e > 2) {
                            e *= .5;
                            for(var s = 0; e > 2 && s < this.NUM_ITERATIONS;)e *= .5, s += 1;
                            s >= this.NUM_ITERATIONS && (s = this.NUM_ITERATIONS - 1);
                            var a = this.coordinates[s];
                            t.drawImage(this.canvas, a[0], a[1], a[2], a[3], i, o, n, r);
                        } else t.drawImage(this.image, i, o, n, r);
                    }
                }
            }
        ]), t;
    }(), $b = function() {
        function t(e) {
            vh(this, t), this.images = {}, this.imageBroken = {}, this.callback = e;
        }
        return wu(t, [
            {
                key: "_tryloadBrokenUrl",
                value: function(t, e, i) {
                    void 0 !== t && void 0 !== i && (void 0 !== e ? (i.image.onerror = function() {
                        console.error("Could not load brokenImage:", e);
                    }, i.image.src = e) : console.warn("No broken url image defined"));
                }
            },
            {
                key: "_redrawWithImage",
                value: function(t) {
                    this.callback && this.callback(t);
                }
            },
            {
                key: "load",
                value: function(t, e) {
                    var i = this, o = this.images[t];
                    if (o) return o;
                    var n = new Gb;
                    return this.images[t] = n, n.image.onload = function() {
                        i._fixImageCoordinates(n.image), n.init(), i._redrawWithImage(n);
                    }, n.image.onerror = function() {
                        console.error("Could not load image:", t), i._tryloadBrokenUrl(t, e, n);
                    }, n.image.src = t, n;
                }
            },
            {
                key: "_fixImageCoordinates",
                value: function(t) {
                    0 === t.width && (document.body.appendChild(t), t.width = t.offsetWidth, t.height = t.offsetHeight, document.body.removeChild(t));
                }
            }
        ]), t;
    }(), Zb = {
        exports: {}
    }, Qb = s(function() {
        if ("function" == typeof ArrayBuffer) {
            var t = new ArrayBuffer(8);
            Object.isExtensible(t) && Object.defineProperty(t, "a", {
                value: 8
            });
        }
    }), Jb = s, tw = et, ew = k, iw = Qb, ow = Object.isExtensible, nw = Jb(function() {
        ow(1);
    }) || iw ? function(t) {
        return !!tw(t) && (!iw || "ArrayBuffer" !== ew(t)) && (!ow || ow(t));
    } : ow, rw = !s(function() {
        return Object.isExtensible(Object.preventExtensions({}));
    }), sw = Mi, aw = y, hw = Xi, dw = et, lw = Jt, cw = Qe.f, uw = Jh, fw = id, pw = nw, vw = rw, gw = !1, yw = ne("meta"), mw = 0, bw = function(t) {
        cw(t, yw, {
            value: {
                objectID: "O" + mw++,
                weakData: {}
            }
        });
    }, ww = Zb.exports = {
        enable: function() {
            ww.enable = function() {}, gw = !0;
            var t = uw.f, e = aw([].splice), i = {};
            i[yw] = 1, t(i).length && (uw.f = function(i) {
                for(var o = t(i), n = 0, r = o.length; n < r; n++)if (o[n] === yw) {
                    e(o, n, 1);
                    break;
                }
                return o;
            }, sw({
                target: "Object",
                stat: !0,
                forced: !0
            }, {
                getOwnPropertyNames: fw.f
            }));
        },
        fastKey: function(t, e) {
            if (!dw(t)) return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;
            if (!lw(t, yw)) {
                if (!pw(t)) return "F";
                if (!e) return "E";
                bw(t);
            }
            return t[yw].objectID;
        },
        getWeakData: function(t, e) {
            if (!lw(t, yw)) {
                if (!pw(t)) return !0;
                if (!e) return !1;
                bw(t);
            }
            return t[yw].weakData;
        },
        onFreeze: function(t) {
            return vw && gw && pw(t) && !lw(t, yw) && bw(t), t;
        }
    };
    hw[yw] = !0;
    var kw = Zb.exports, _w = Ze, xw = B, Ew = oi, Ow = Tt, Cw = Xs, Sw = Hi, Tw = ht, Mw = Ta, Pw = ka, Dw = Hs, Iw = TypeError, Bw = function(t, e) {
        this.stopped = t, this.result = e;
    }, Fw = Bw.prototype, zw = function(t, e, i) {
        var o, n, r, s, a, h, d, l = i && i.that, c = !(!i || !i.AS_ENTRIES), u = !(!i || !i.IS_RECORD), f = !(!i || !i.IS_ITERATOR), p = !(!i || !i.INTERRUPTED), v = _w(e, l), g = function(t) {
            return o && Dw(o, "normal", t), new Bw(!0, t);
        }, y = function(t) {
            return c ? (Ew(t), p ? v(t[0], t[1], g) : v(t[0], t[1])) : p ? v(t, g) : v(t);
        };
        if (u) o = t.iterator;
        else if (f) o = t;
        else {
            if (!(n = Pw(t))) throw new Iw(Ow(t) + " is not iterable");
            if (Cw(n)) {
                for(r = 0, s = Sw(t); s > r; r++)if ((a = y(t[r])) && Tw(Fw, a)) return a;
                return new Bw(!1);
            }
            o = Mw(t, n);
        }
        for(h = u ? t.next : o.next; !(d = xw(h, o)).done;){
            try {
                a = y(d.value);
            } catch (t) {
                Dw(o, "throw", t);
            }
            if ("object" == typeof a && a && Tw(Fw, a)) return a;
        }
        return new Bw(!1);
    }, Nw = ht, Aw = TypeError, Rw = function(t, e) {
        if (Nw(e, t)) return t;
        throw new Aw("Incorrect invocation");
    }, jw = Mi, Lw = r, Hw = kw, Ww = s, Vw = yi, qw = zw, Uw = Rw, Yw = T, Xw = et, Kw = Y, Gw = Gr, $w = Qe.f, Zw = zd.forEach, Qw = P, Jw = Hn.set, tk = Hn.getterFor, ek = function(t, e, i) {
        var o, n = -1 !== t.indexOf("Map"), r = -1 !== t.indexOf("Weak"), s = n ? "set" : "add", a = Lw[t], h = a && a.prototype, d = {};
        if (Qw && Yw(a) && (r || h.forEach && !Ww(function() {
            (new a).entries().next();
        }))) {
            var l = (o = e(function(e, i) {
                Jw(Uw(e, l), {
                    type: t,
                    collection: new a
                }), Kw(i) || qw(i, e[s], {
                    that: e,
                    AS_ENTRIES: n
                });
            })).prototype, c = tk(t);
            Zw([
                "add",
                "clear",
                "delete",
                "forEach",
                "get",
                "has",
                "set",
                "keys",
                "values",
                "entries"
            ], function(t) {
                var e = "add" === t || "set" === t;
                !(t in h) || r && "clear" === t || Vw(l, t, function(i, o) {
                    var n = c(this).collection;
                    if (!e && r && !Xw(i)) return "get" === t && void 0;
                    var s = n[t](0 === i ? 0 : i, o);
                    return e ? this : s;
                });
            }), r || $w(l, "size", {
                configurable: !0,
                get: function() {
                    return c(this).collection.size;
                }
            });
        } else o = i.getConstructor(e, t, n, s), Hw.enable();
        return Gw(o, t, !1, !0), d[t] = o, jw({
            global: !0,
            forced: !0
        }, d), r || i.setStrong(o, t, n), o;
    }, ik = Pr, ok = function(t, e, i) {
        for(var o in e)i && i.unsafe && t[o] ? t[o] = e[o] : ik(t, o, e[o], i);
        return t;
    }, nk = at, rk = vd, sk = P, ak = fe("species"), hk = br, dk = vd, lk = ok, ck = Ze, uk = Rw, fk = Y, pk = zw, vk = Ts, gk = Ms, yk = function(t) {
        var e = nk(t);
        sk && e && !e[ak] && rk(e, ak, {
            configurable: !0,
            get: function() {
                return this;
            }
        });
    }, mk = P, bk = kw.fastKey, wk = Hn.set, kk = Hn.getterFor, _k = {
        getConstructor: function(t, e, i, o) {
            var n = t(function(t, n) {
                uk(t, r), wk(t, {
                    type: e,
                    index: hk(null),
                    first: void 0,
                    last: void 0,
                    size: 0
                }), mk || (t.size = 0), fk(n) || pk(n, t[o], {
                    that: t,
                    AS_ENTRIES: i
                });
            }), r = n.prototype, s = kk(e), a = function(t, e, i) {
                var o, n, r = s(t), a = h(t, e);
                return a ? a.value = i : (r.last = a = {
                    index: n = bk(e, !0),
                    key: e,
                    value: i,
                    previous: o = r.last,
                    next: void 0,
                    removed: !1
                }, r.first || (r.first = a), o && (o.next = a), mk ? r.size++ : t.size++, "F" !== n && (r.index[n] = a)), t;
            }, h = function(t, e) {
                var i, o = s(t), n = bk(e);
                if ("F" !== n) return o.index[n];
                for(i = o.first; i; i = i.next)if (i.key === e) return i;
            };
            return lk(r, {
                clear: function() {
                    for(var t = s(this), e = t.index, i = t.first; i;)i.removed = !0, i.previous && (i.previous = i.previous.next = void 0), delete e[i.index], i = i.next;
                    t.first = t.last = void 0, mk ? t.size = 0 : this.size = 0;
                },
                delete: function(t) {
                    var e = this, i = s(e), o = h(e, t);
                    if (o) {
                        var n = o.next, r = o.previous;
                        delete i.index[o.index], o.removed = !0, r && (r.next = n), n && (n.previous = r), i.first === o && (i.first = n), i.last === o && (i.last = r), mk ? i.size-- : e.size--;
                    }
                    return !!o;
                },
                forEach: function(t) {
                    for(var e, i = s(this), o = ck(t, arguments.length > 1 ? arguments[1] : void 0); e = e ? e.next : i.first;)for(o(e.value, e.key, this); e && e.removed;)e = e.previous;
                },
                has: function(t) {
                    return !!h(this, t);
                }
            }), lk(r, i ? {
                get: function(t) {
                    var e = h(this, t);
                    return e && e.value;
                },
                set: function(t, e) {
                    return a(this, 0 === t ? 0 : t, e);
                }
            } : {
                add: function(t) {
                    return a(this, t = 0 === t ? 0 : t, t);
                }
            }), mk && dk(r, "size", {
                configurable: !0,
                get: function() {
                    return s(this).size;
                }
            }), n;
        },
        setStrong: function(t, e, i) {
            var o = e + " Iterator", n = kk(e), r = kk(o);
            vk(t, e, function(t, e) {
                wk(this, {
                    type: o,
                    target: t,
                    state: n(t),
                    kind: e,
                    last: void 0
                });
            }, function() {
                for(var t = r(this), e = t.kind, i = t.last; i && i.removed;)i = i.previous;
                return t.target && (t.last = i = i ? i.next : t.state.first) ? gk("keys" === e ? i.key : "values" === e ? i.value : [
                    i.key,
                    i.value
                ], !1) : (t.target = void 0, gk(void 0, !0));
            }, i ? "entries" : "values", !i, !0), yk(e);
        }
    };
    ek("Map", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, _k);
    var xk = o(it.Map), Ek = function() {
        function t() {
            vh(this, t), this.clear(), this._defaultIndex = 0, this._groupIndex = 0, this._defaultGroups = [
                {
                    border: "#2B7CE9",
                    background: "#97C2FC",
                    highlight: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    },
                    hover: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    }
                },
                {
                    border: "#FFA500",
                    background: "#FFFF00",
                    highlight: {
                        border: "#FFA500",
                        background: "#FFFFA3"
                    },
                    hover: {
                        border: "#FFA500",
                        background: "#FFFFA3"
                    }
                },
                {
                    border: "#FA0A10",
                    background: "#FB7E81",
                    highlight: {
                        border: "#FA0A10",
                        background: "#FFAFB1"
                    },
                    hover: {
                        border: "#FA0A10",
                        background: "#FFAFB1"
                    }
                },
                {
                    border: "#41A906",
                    background: "#7BE141",
                    highlight: {
                        border: "#41A906",
                        background: "#A1EC76"
                    },
                    hover: {
                        border: "#41A906",
                        background: "#A1EC76"
                    }
                },
                {
                    border: "#E129F0",
                    background: "#EB7DF4",
                    highlight: {
                        border: "#E129F0",
                        background: "#F0B3F5"
                    },
                    hover: {
                        border: "#E129F0",
                        background: "#F0B3F5"
                    }
                },
                {
                    border: "#7C29F0",
                    background: "#AD85E4",
                    highlight: {
                        border: "#7C29F0",
                        background: "#D3BDF0"
                    },
                    hover: {
                        border: "#7C29F0",
                        background: "#D3BDF0"
                    }
                },
                {
                    border: "#C37F00",
                    background: "#FFA807",
                    highlight: {
                        border: "#C37F00",
                        background: "#FFCA66"
                    },
                    hover: {
                        border: "#C37F00",
                        background: "#FFCA66"
                    }
                },
                {
                    border: "#4220FB",
                    background: "#6E6EFD",
                    highlight: {
                        border: "#4220FB",
                        background: "#9B9BFD"
                    },
                    hover: {
                        border: "#4220FB",
                        background: "#9B9BFD"
                    }
                },
                {
                    border: "#FD5A77",
                    background: "#FFC0CB",
                    highlight: {
                        border: "#FD5A77",
                        background: "#FFD1D9"
                    },
                    hover: {
                        border: "#FD5A77",
                        background: "#FFD1D9"
                    }
                },
                {
                    border: "#4AD63A",
                    background: "#C2FABC",
                    highlight: {
                        border: "#4AD63A",
                        background: "#E6FFE3"
                    },
                    hover: {
                        border: "#4AD63A",
                        background: "#E6FFE3"
                    }
                },
                {
                    border: "#990000",
                    background: "#EE0000",
                    highlight: {
                        border: "#BB0000",
                        background: "#FF3333"
                    },
                    hover: {
                        border: "#BB0000",
                        background: "#FF3333"
                    }
                },
                {
                    border: "#FF6000",
                    background: "#FF6000",
                    highlight: {
                        border: "#FF6000",
                        background: "#FF6000"
                    },
                    hover: {
                        border: "#FF6000",
                        background: "#FF6000"
                    }
                },
                {
                    border: "#97C2FC",
                    background: "#2B7CE9",
                    highlight: {
                        border: "#D2E5FF",
                        background: "#2B7CE9"
                    },
                    hover: {
                        border: "#D2E5FF",
                        background: "#2B7CE9"
                    }
                },
                {
                    border: "#399605",
                    background: "#255C03",
                    highlight: {
                        border: "#399605",
                        background: "#255C03"
                    },
                    hover: {
                        border: "#399605",
                        background: "#255C03"
                    }
                },
                {
                    border: "#B70054",
                    background: "#FF007E",
                    highlight: {
                        border: "#B70054",
                        background: "#FF007E"
                    },
                    hover: {
                        border: "#B70054",
                        background: "#FF007E"
                    }
                },
                {
                    border: "#AD85E4",
                    background: "#7C29F0",
                    highlight: {
                        border: "#D3BDF0",
                        background: "#7C29F0"
                    },
                    hover: {
                        border: "#D3BDF0",
                        background: "#7C29F0"
                    }
                },
                {
                    border: "#4557FA",
                    background: "#000EA1",
                    highlight: {
                        border: "#6E6EFD",
                        background: "#000EA1"
                    },
                    hover: {
                        border: "#6E6EFD",
                        background: "#000EA1"
                    }
                },
                {
                    border: "#FFC0CB",
                    background: "#FD5A77",
                    highlight: {
                        border: "#FFD1D9",
                        background: "#FD5A77"
                    },
                    hover: {
                        border: "#FFD1D9",
                        background: "#FD5A77"
                    }
                },
                {
                    border: "#C2FABC",
                    background: "#74D66A",
                    highlight: {
                        border: "#E6FFE3",
                        background: "#74D66A"
                    },
                    hover: {
                        border: "#E6FFE3",
                        background: "#74D66A"
                    }
                },
                {
                    border: "#EE0000",
                    background: "#990000",
                    highlight: {
                        border: "#FF3333",
                        background: "#BB0000"
                    },
                    hover: {
                        border: "#FF3333",
                        background: "#BB0000"
                    }
                }
            ], this.options = {}, this.defaultOptions = {
                useDefaultGroups: !0
            }, wo(this.options, this.defaultOptions);
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    var e = [
                        "useDefaultGroups"
                    ];
                    if (void 0 !== t) {
                        for(var i in t)if (Object.prototype.hasOwnProperty.call(t, i) && -1 === Vv(e).call(e, i)) {
                            var o = t[i];
                            this.add(i, o);
                        }
                    }
                }
            },
            {
                key: "clear",
                value: function() {
                    this._groups = new xk, this._groupNames = [];
                }
            },
            {
                key: "get",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this._groups.get(t);
                    if (void 0 === i && e) {
                        if (!1 === this.options.useDefaultGroups && this._groupNames.length > 0) {
                            var o = this._groupIndex % this._groupNames.length;
                            ++this._groupIndex, (i = {}).color = this._groups.get(this._groupNames[o]), this._groups.set(t, i);
                        } else {
                            var n = this._defaultIndex % this._defaultGroups.length;
                            this._defaultIndex++, (i = {}).color = this._defaultGroups[n], this._groups.set(t, i);
                        }
                    }
                    return i;
                }
            },
            {
                key: "add",
                value: function(t, e) {
                    return this._groups.has(t) || this._groupNames.push(t), this._groups.set(t, e), e;
                }
            }
        ]), t;
    }();
    Mi({
        target: "Number",
        stat: !0
    }, {
        isNaN: function(t) {
            return t != t;
        }
    });
    var Ok = o(it.Number.isNaN), Ck = r.isFinite, Sk = Number.isFinite || function(t) {
        return "number" == typeof t && Ck(t);
    };
    Mi({
        target: "Number",
        stat: !0
    }, {
        isFinite: Sk
    });
    var Tk = o(it.Number.isFinite), Mk = zd.some;
    Mi({
        target: "Array",
        proto: !0,
        forced: !Hf("some")
    }, {
        some: function(t) {
            return Mk(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Pk = zo("Array").some, Dk = ht, Ik = Pk, Bk = Array.prototype, Fk = function(t) {
        var e = t.some;
        return t === Bk || Dk(Bk, t) && e === Bk.some ? Ik : e;
    }, zk = o(Fk), Nk = o(it.Object.getOwnPropertySymbols), Ak = {
        exports: {}
    }, Rk = Mi, jk = s, Lk = Q, Hk = M.f, Wk = P;
    Rk({
        target: "Object",
        stat: !0,
        forced: !Wk || jk(function() {
            Hk(1);
        }),
        sham: !Wk
    }, {
        getOwnPropertyDescriptor: function(t, e) {
            return Hk(Lk(t), e);
        }
    });
    var Vk = it.Object, qk = Ak.exports = function(t, e) {
        return Vk.getOwnPropertyDescriptor(t, e);
    };
    Vk.getOwnPropertyDescriptor.sham && (qk.sham = !0);
    var Uk = Ak.exports, Yk = o(Uk), Xk = Ef, Kk = Q, Gk = M, $k = va;
    Mi({
        target: "Object",
        stat: !0,
        sham: !P
    }, {
        getOwnPropertyDescriptors: function(t) {
            for(var e, i, o = Kk(t), n = Gk.f, r = Xk(o), s = {}, a = 0; r.length > a;)void 0 !== (i = n(o, e = r[a++])) && $k(s, e, i);
            return s;
        }
    });
    var Zk = o(it.Object.getOwnPropertyDescriptors), Qk = {
        exports: {}
    }, Jk = Mi, t_ = P, e_ = Kn.f;
    Jk({
        target: "Object",
        stat: !0,
        forced: Object.defineProperties !== e_,
        sham: !t_
    }, {
        defineProperties: e_
    });
    var i_ = it.Object, o_ = Qk.exports = function(t, e) {
        return i_.defineProperties(t, e);
    };
    i_.defineProperties.sham && (o_.sham = !0);
    var n_ = o(Qk.exports), r_ = o(_h);
    function s_(t, e, i) {
        return (e = mu(e)) in t ? xh(t, e, {
            value: i,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = i, t;
    }
    var a_ = r, h_ = s, d_ = un, l_ = bv.trim, c_ = cv, u_ = y("".charAt), f_ = a_.parseFloat, p_ = a_.Symbol, v_ = p_ && p_.iterator, g_ = 1 / f_(c_ + "-0") != -1 / 0 || v_ && !h_(function() {
        f_(Object(v_));
    }) ? function(t) {
        var e = l_(d_(t)), i = f_(e);
        return 0 === i && "-" === u_(e, 0) ? -0 : i;
    } : f_;
    Mi({
        global: !0,
        forced: parseFloat !== g_
    }, {
        parseFloat: g_
    });
    var y_ = o(it.parseFloat), m_ = Mi, b_ = s, w_ = id.f;
    m_({
        target: "Object",
        stat: !0,
        forced: b_(function() {
            return !Object.getOwnPropertyNames(1);
        })
    }, {
        getOwnPropertyNames: w_
    });
    var k_ = it.Object, __ = function(t) {
        return k_.getOwnPropertyNames(t);
    }, x_ = o(__);
    function E_(t, e) {
        var i = [
            "node",
            "edge",
            "label"
        ], o = !0, n = tb(e, "chosen");
        if ("boolean" == typeof n) o = n;
        else if ("object" === gu(n)) {
            if (-1 === Vv(i).call(i, t)) throw new Error("choosify: subOption '" + t + "' should be one of '" + i.join("', '") + "'");
            var r = tb(e, [
                "chosen",
                t
            ]);
            "boolean" != typeof r && "function" != typeof r || (o = r);
        }
        return o;
    }
    function O_(t, e, i) {
        if (t.width <= 0 || t.height <= 0) return !1;
        if (void 0 !== i) {
            var o = {
                x: e.x - i.x,
                y: e.y - i.y
            };
            if (0 !== i.angle) {
                var n = -i.angle;
                e = {
                    x: Math.cos(n) * o.x - Math.sin(n) * o.y,
                    y: Math.sin(n) * o.x + Math.cos(n) * o.y
                };
            } else e = o;
        }
        var r = t.x + t.width, s = t.y + t.width;
        return t.left < e.x && r > e.x && t.top < e.y && s > e.y;
    }
    function C_(t) {
        return "string" == typeof t && "" !== t;
    }
    function S_(t, e, i, o) {
        var n = o.x, r = o.y;
        if ("function" == typeof o.distanceToBorder) {
            var s = o.distanceToBorder(t, e), a = Math.sin(e) * s, h = Math.cos(e) * s;
            h === s ? (n += s, r = o.y) : a === s ? (n = o.x, r -= s) : (n += h, r -= a);
        } else o.shape.width > o.shape.height ? (n = o.x + .5 * o.shape.width, r = o.y - i) : (n = o.x + i, r = o.y - .5 * o.shape.height);
        return {
            x: n,
            y: r
        };
    }
    var T_ = zo("Array").values, M_ = dn, P_ = Jt, D_ = ht, I_ = T_, B_ = Array.prototype, F_ = {
        DOMTokenList: !0,
        NodeList: !0
    }, z_ = function(t) {
        var e = t.values;
        return t === B_ || D_(B_, t) && e === B_.values || P_(F_, M_(t)) ? I_ : e;
    }, N_ = o(z_), A_ = function() {
        function t(e) {
            vh(this, t), this.measureText = e, this.current = 0, this.width = 0, this.height = 0, this.lines = [];
        }
        return wu(t, [
            {
                key: "_add",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "normal";
                    void 0 === this.lines[t] && (this.lines[t] = {
                        width: 0,
                        height: 0,
                        blocks: []
                    });
                    var o = e;
                    void 0 !== e && "" !== e || (o = " ");
                    var n = this.measureText(o, i), r = wo({}, N_(n));
                    r.text = e, r.width = n.width, r.mod = i, void 0 !== e && "" !== e || (r.width = 0), this.lines[t].blocks.push(r), this.lines[t].width += r.width;
                }
            },
            {
                key: "curWidth",
                value: function() {
                    var t = this.lines[this.current];
                    return void 0 === t ? 0 : t.width;
                }
            },
            {
                key: "append",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal";
                    this._add(this.current, t, e);
                }
            },
            {
                key: "newLine",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal";
                    this._add(this.current, t, e), this.current++;
                }
            },
            {
                key: "determineLineHeights",
                value: function() {
                    for(var t = 0; t < this.lines.length; t++){
                        var e = this.lines[t], i = 0;
                        if (void 0 !== e.blocks) for(var o = 0; o < e.blocks.length; o++){
                            var n = e.blocks[o];
                            i < n.height && (i = n.height);
                        }
                        e.height = i;
                    }
                }
            },
            {
                key: "determineLabelSize",
                value: function() {
                    for(var t = 0, e = 0, i = 0; i < this.lines.length; i++){
                        var o = this.lines[i];
                        o.width > t && (t = o.width), e += o.height;
                    }
                    this.width = t, this.height = e;
                }
            },
            {
                key: "removeEmptyBlocks",
                value: function() {
                    for(var t = [], e = 0; e < this.lines.length; e++){
                        var i = this.lines[e];
                        if (0 !== i.blocks.length && (e !== this.lines.length - 1 || 0 !== i.width)) {
                            var o = {};
                            wo(o, i), o.blocks = [];
                            for(var n = void 0, r = [], s = 0; s < i.blocks.length; s++){
                                var a = i.blocks[s];
                                0 !== a.width ? r.push(a) : void 0 === n && (n = a);
                            }
                            0 === r.length && void 0 !== n && r.push(n), o.blocks = r, t.push(o);
                        }
                    }
                    return t;
                }
            },
            {
                key: "finalize",
                value: function() {
                    this.determineLineHeights(), this.determineLabelSize();
                    var t = this.removeEmptyBlocks();
                    return {
                        width: this.width,
                        height: this.height,
                        lines: t
                    };
                }
            }
        ]), t;
    }(), R_ = {
        "<b>": /<b>/,
        "<i>": /<i>/,
        "<code>": /<code>/,
        "</b>": /<\/b>/,
        "</i>": /<\/i>/,
        "</code>": /<\/code>/,
        "*": /\*/,
        _: /_/,
        "`": /`/,
        afterBold: /[^*]/,
        afterItal: /[^_]/,
        afterMono: /[^`]/
    }, j_ = function() {
        function t(e) {
            vh(this, t), this.text = e, this.bold = !1, this.ital = !1, this.mono = !1, this.spacing = !1, this.position = 0, this.buffer = "", this.modStack = [], this.blocks = [];
        }
        return wu(t, [
            {
                key: "mod",
                value: function() {
                    return 0 === this.modStack.length ? "normal" : this.modStack[0];
                }
            },
            {
                key: "modName",
                value: function() {
                    return 0 === this.modStack.length ? "normal" : "mono" === this.modStack[0] ? "mono" : this.bold && this.ital ? "boldital" : this.bold ? "bold" : this.ital ? "ital" : void 0;
                }
            },
            {
                key: "emitBlock",
                value: function() {
                    this.spacing && (this.add(" "), this.spacing = !1), this.buffer.length > 0 && (this.blocks.push({
                        text: this.buffer,
                        mod: this.modName()
                    }), this.buffer = "");
                }
            },
            {
                key: "add",
                value: function(t) {
                    " " === t && (this.spacing = !0), this.spacing && (this.buffer += " ", this.spacing = !1), " " != t && (this.buffer += t);
                }
            },
            {
                key: "parseWS",
                value: function(t) {
                    return !!/[ \t]/.test(t) && (this.mono ? this.add(t) : this.spacing = !0, !0);
                }
            },
            {
                key: "setTag",
                value: function(t) {
                    this.emitBlock(), this[t] = !0, this.modStack.unshift(t);
                }
            },
            {
                key: "unsetTag",
                value: function(t) {
                    this.emitBlock(), this[t] = !1, this.modStack.shift();
                }
            },
            {
                key: "parseStartTag",
                value: function(t, e) {
                    return !(this.mono || this[t] || !this.match(e)) && (this.setTag(t), !0);
                }
            },
            {
                key: "match",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = df(this.prepareRegExp(t), 2), o = i[0], n = i[1], r = o.test(this.text.substr(this.position, n));
                    return r && e && (this.position += n - 1), r;
                }
            },
            {
                key: "parseEndTag",
                value: function(t, e, i) {
                    var o = this.mod() === t;
                    return !(!(o = "mono" === t ? o && this.mono : o && !this.mono) || !this.match(e)) && (void 0 !== i ? (this.position === this.text.length - 1 || this.match(i, !1)) && this.unsetTag(t) : this.unsetTag(t), !0);
                }
            },
            {
                key: "replace",
                value: function(t, e) {
                    return !!this.match(t) && (this.add(e), this.position += length - 1, !0);
                }
            },
            {
                key: "prepareRegExp",
                value: function(t) {
                    var e, i;
                    if (t instanceof RegExp) i = t, e = 1;
                    else {
                        var o = R_[t];
                        i = void 0 !== o ? o : new RegExp(t), e = t.length;
                    }
                    return [
                        i,
                        e
                    ];
                }
            }
        ]), t;
    }(), L_ = function() {
        function t(e, i, o, n) {
            var r = this;
            vh(this, t), this.ctx = e, this.parent = i, this.selected = o, this.hover = n;
            this.lines = new A_(function(t, i) {
                if (void 0 === t) return 0;
                var s = r.parent.getFormattingValues(e, o, n, i), a = 0;
                "" !== t && (a = r.ctx.measureText(t).width);
                return {
                    width: a,
                    values: s
                };
            });
        }
        return wu(t, [
            {
                key: "process",
                value: function(t) {
                    if (!C_(t)) return this.lines.finalize();
                    var e = this.parent.fontOptions;
                    t = (t = t.replace(/\r\n/g, "\n")).replace(/\r/g, "\n");
                    var i = String(t).split("\n"), o = i.length;
                    if (e.multi) for(var n = 0; n < o; n++){
                        var r = this.splitBlocks(i[n], e.multi);
                        if (void 0 !== r) {
                            if (0 !== r.length) {
                                if (e.maxWdt > 0) for(var s = 0; s < r.length; s++){
                                    var a = r[s].mod, h = r[s].text;
                                    this.splitStringIntoLines(h, a, !0);
                                }
                                else for(var d = 0; d < r.length; d++){
                                    var l = r[d].mod, c = r[d].text;
                                    this.lines.append(c, l);
                                }
                                this.lines.newLine();
                            } else this.lines.newLine("");
                        }
                    }
                    else if (e.maxWdt > 0) for(var u = 0; u < o; u++)this.splitStringIntoLines(i[u]);
                    else for(var f = 0; f < o; f++)this.lines.newLine(i[f]);
                    return this.lines.finalize();
                }
            },
            {
                key: "decodeMarkupSystem",
                value: function(t) {
                    var e = "none";
                    return "markdown" === t || "md" === t ? e = "markdown" : !0 !== t && "html" !== t || (e = "html"), e;
                }
            },
            {
                key: "splitHtmlBlocks",
                value: function(t) {
                    for(var e = new j_(t), i = function(t) {
                        return !!/&/.test(t) && (e.replace(e.text, "&lt;", "<") || e.replace(e.text, "&amp;", "&") || e.add("&"), !0);
                    }; e.position < e.text.length;){
                        var o = e.text.charAt(e.position);
                        e.parseWS(o) || /</.test(o) && (e.parseStartTag("bold", "<b>") || e.parseStartTag("ital", "<i>") || e.parseStartTag("mono", "<code>") || e.parseEndTag("bold", "</b>") || e.parseEndTag("ital", "</i>") || e.parseEndTag("mono", "</code>")) || i(o) || e.add(o), e.position++;
                    }
                    return e.emitBlock(), e.blocks;
                }
            },
            {
                key: "splitMarkdownBlocks",
                value: function(t) {
                    for(var e = this, i = new j_(t), o = !0, n = function(t) {
                        return !!/\\/.test(t) && (i.position < e.text.length + 1 && (i.position++, t = e.text.charAt(i.position), / \t/.test(t) ? i.spacing = !0 : (i.add(t), o = !1)), !0);
                    }; i.position < i.text.length;){
                        var r = i.text.charAt(i.position);
                        i.parseWS(r) || n(r) || (o || i.spacing) && (i.parseStartTag("bold", "*") || i.parseStartTag("ital", "_") || i.parseStartTag("mono", "`")) || i.parseEndTag("bold", "*", "afterBold") || i.parseEndTag("ital", "_", "afterItal") || i.parseEndTag("mono", "`", "afterMono") || (i.add(r), o = !1), i.position++;
                    }
                    return i.emitBlock(), i.blocks;
                }
            },
            {
                key: "splitBlocks",
                value: function(t, e) {
                    var i = this.decodeMarkupSystem(e);
                    return "none" === i ? [
                        {
                            text: t,
                            mod: "normal"
                        }
                    ] : "markdown" === i ? this.splitMarkdownBlocks(t) : "html" === i ? this.splitHtmlBlocks(t) : void 0;
                }
            },
            {
                key: "overMaxWidth",
                value: function(t) {
                    var e = this.ctx.measureText(t).width;
                    return this.lines.curWidth() + e > this.parent.fontOptions.maxWdt;
                }
            },
            {
                key: "getLongestFit",
                value: function(t) {
                    for(var e = "", i = 0; i < t.length;){
                        var o = e + ("" === e ? "" : " ") + t[i];
                        if (this.overMaxWidth(o)) break;
                        e = o, i++;
                    }
                    return i;
                }
            },
            {
                key: "getLongestFitWord",
                value: function(t) {
                    for(var e = 0; e < t.length && !this.overMaxWidth(mf(t).call(t, 0, e));)e++;
                    return e;
                }
            },
            {
                key: "splitStringIntoLines",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal", i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    this.parent.getFormattingValues(this.ctx, this.selected, this.hover, e);
                    for(var o = (t = (t = t.replace(/^( +)/g, "$1\r")).replace(/([^\r][^ ]*)( +)/g, "$1\r$2\r")).split("\r"); o.length > 0;){
                        var n = this.getLongestFit(o);
                        if (0 === n) {
                            var r = o[0], s = this.getLongestFitWord(r);
                            this.lines.newLine(mf(r).call(r, 0, s), e), o[0] = mf(r).call(r, s);
                        } else {
                            var a = n;
                            " " === o[n - 1] ? n-- : " " === o[a] && a++;
                            var h = mf(o).call(o, 0, n).join("");
                            n == o.length && i ? this.lines.append(h, e) : this.lines.newLine(h, e), o = mf(o).call(o, a);
                        }
                    }
                }
            }
        ]), t;
    }(), H_ = [
        "bold",
        "ital",
        "boldital",
        "mono"
    ], W_ = function() {
        function t(e, i) {
            var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            vh(this, t), this.body = e, this.pointToSelf = !1, this.baseSize = void 0, this.fontOptions = {}, this.setOptions(i), this.size = {
                top: 0,
                left: 0,
                width: 0,
                height: 0,
                yLine: 0
            }, this.isEdgeLabel = o;
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    if (this.elementOptions = t, this.initFontOptions(t.font), C_(t.label) ? this.labelDirty = !0 : t.label = void 0, void 0 !== t.font && null !== t.font) {
                        if ("string" == typeof t.font) this.baseSize = this.fontOptions.size;
                        else if ("object" === gu(t.font)) {
                            var e = t.font.size;
                            void 0 !== e && (this.baseSize = e);
                        }
                    }
                }
            },
            {
                key: "initFontOptions",
                value: function(e) {
                    var i = this;
                    Hm(H_, function(t) {
                        i.fontOptions[t] = {};
                    }), t.parseFontString(this.fontOptions, e) ? this.fontOptions.vadjust = 0 : Hm(e, function(t, e) {
                        null != t && "object" !== gu(t) && (i.fontOptions[e] = t);
                    });
                }
            },
            {
                key: "constrain",
                value: function(t) {
                    var e = {
                        constrainWidth: !1,
                        maxWdt: -1,
                        minWdt: -1,
                        constrainHeight: !1,
                        minHgt: -1,
                        valign: "middle"
                    }, i = tb(t, "widthConstraint");
                    if ("number" == typeof i) e.maxWdt = Number(i), e.minWdt = Number(i);
                    else if ("object" === gu(i)) {
                        var o = tb(t, [
                            "widthConstraint",
                            "maximum"
                        ]);
                        "number" == typeof o && (e.maxWdt = Number(o));
                        var n = tb(t, [
                            "widthConstraint",
                            "minimum"
                        ]);
                        "number" == typeof n && (e.minWdt = Number(n));
                    }
                    var r = tb(t, "heightConstraint");
                    if ("number" == typeof r) e.minHgt = Number(r);
                    else if ("object" === gu(r)) {
                        var s = tb(t, [
                            "heightConstraint",
                            "minimum"
                        ]);
                        "number" == typeof s && (e.minHgt = Number(s));
                        var a = tb(t, [
                            "heightConstraint",
                            "valign"
                        ]);
                        "string" == typeof a && ("top" !== a && "bottom" !== a || (e.valign = a));
                    }
                    return e;
                }
            },
            {
                key: "update",
                value: function(t, e) {
                    this.setOptions(t, !0), this.propagateFonts(e), Rm(this.fontOptions, this.constrain(e)), this.fontOptions.chooser = E_("label", e);
                }
            },
            {
                key: "adjustSizes",
                value: function(t) {
                    var e = t ? t.right + t.left : 0;
                    this.fontOptions.constrainWidth && (this.fontOptions.maxWdt -= e, this.fontOptions.minWdt -= e);
                    var i = t ? t.top + t.bottom : 0;
                    this.fontOptions.constrainHeight && (this.fontOptions.minHgt -= i);
                }
            },
            {
                key: "addFontOptionsToPile",
                value: function(t, e) {
                    for(var i = 0; i < e.length; ++i)this.addFontToPile(t, e[i]);
                }
            },
            {
                key: "addFontToPile",
                value: function(t, e) {
                    if (void 0 !== e && void 0 !== e.font && null !== e.font) {
                        var i = e.font;
                        t.push(i);
                    }
                }
            },
            {
                key: "getBasicOptions",
                value: function(e) {
                    for(var i = {}, o = 0; o < e.length; ++o){
                        var n = e[o], r = {};
                        t.parseFontString(r, n) && (n = r), Hm(n, function(t, e) {
                            void 0 !== t && (Object.prototype.hasOwnProperty.call(i, e) || (-1 !== Vv(H_).call(H_, e) ? i[e] = {} : i[e] = t));
                        });
                    }
                    return i;
                }
            },
            {
                key: "getFontOption",
                value: function(e, i, o) {
                    for(var n, r = 0; r < e.length; ++r){
                        var s = e[r];
                        if (Object.prototype.hasOwnProperty.call(s, i)) {
                            if (null == (n = s[i])) continue;
                            var a = {};
                            if (t.parseFontString(a, n) && (n = a), Object.prototype.hasOwnProperty.call(n, o)) return n[o];
                        }
                    }
                    if (Object.prototype.hasOwnProperty.call(this.fontOptions, o)) return this.fontOptions[o];
                    throw new Error("Did not find value for multi-font for property: '" + o + "'");
                }
            },
            {
                key: "getFontOptions",
                value: function(t, e) {
                    for(var i = {}, o = [
                        "color",
                        "size",
                        "face",
                        "mod",
                        "vadjust"
                    ], n = 0; n < o.length; ++n){
                        var r = o[n];
                        i[r] = this.getFontOption(t, e, r);
                    }
                    return i;
                }
            },
            {
                key: "propagateFonts",
                value: function(t) {
                    var e = this, i = [];
                    this.addFontOptionsToPile(i, t), this.fontOptions = this.getBasicOptions(i);
                    for(var o = function() {
                        var t = H_[n], o = e.fontOptions[t];
                        Hm(e.getFontOptions(i, t), function(t, e) {
                            o[e] = t;
                        }), o.size = Number(o.size), o.vadjust = Number(o.vadjust);
                    }, n = 0; n < H_.length; ++n)o();
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n) {
                    var r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "middle";
                    if (void 0 !== this.elementOptions.label) {
                        var s = this.fontOptions.size * this.body.view.scale;
                        this.elementOptions.label && s < this.elementOptions.scaling.label.drawThreshold - 1 || (s >= this.elementOptions.scaling.label.maxVisible && (s = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale), this.calculateLabelSize(t, o, n, e, i, r), this._drawBackground(t), this._drawText(t, e, this.size.yLine, r, s));
                    }
                }
            },
            {
                key: "_drawBackground",
                value: function(t) {
                    if (void 0 !== this.fontOptions.background && "none" !== this.fontOptions.background) {
                        t.fillStyle = this.fontOptions.background;
                        var e = this.getSize();
                        t.fillRect(e.left, e.top, e.width, e.height);
                    }
                }
            },
            {
                key: "_drawText",
                value: function(t, e, i) {
                    var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "middle", n = arguments.length > 4 ? arguments[4] : void 0, r = df(this._setAlignment(t, e, i, o), 2);
                    e = r[0], i = r[1], t.textAlign = "left", e -= this.size.width / 2, this.fontOptions.valign && this.size.height > this.size.labelHeight && ("top" === this.fontOptions.valign && (i -= (this.size.height - this.size.labelHeight) / 2), "bottom" === this.fontOptions.valign && (i += (this.size.height - this.size.labelHeight) / 2));
                    for(var s = 0; s < this.lineCount; s++){
                        var a = this.lines[s];
                        if (a && a.blocks) {
                            var h = 0;
                            this.isEdgeLabel || "center" === this.fontOptions.align ? h += (this.size.width - a.width) / 2 : "right" === this.fontOptions.align && (h += this.size.width - a.width);
                            for(var d = 0; d < a.blocks.length; d++){
                                var l = a.blocks[d];
                                t.font = l.font;
                                var c = df(this._getColor(l.color, n, l.strokeColor), 2), u = c[0], f = c[1];
                                l.strokeWidth > 0 && (t.lineWidth = l.strokeWidth, t.strokeStyle = f, t.lineJoin = "round"), t.fillStyle = u, l.strokeWidth > 0 && t.strokeText(l.text, e + h, i + l.vadjust), t.fillText(l.text, e + h, i + l.vadjust), h += l.width;
                            }
                            i += a.height;
                        }
                    }
                }
            },
            {
                key: "_setAlignment",
                value: function(t, e, i, o) {
                    if (this.isEdgeLabel && "horizontal" !== this.fontOptions.align && !1 === this.pointToSelf) {
                        e = 0, i = 0;
                        "top" === this.fontOptions.align ? (t.textBaseline = "alphabetic", i -= 4) : "bottom" === this.fontOptions.align ? (t.textBaseline = "hanging", i += 4) : t.textBaseline = "middle";
                    } else t.textBaseline = o;
                    return [
                        e,
                        i
                    ];
                }
            },
            {
                key: "_getColor",
                value: function(t, e, i) {
                    var o = t || "#000000", n = i || "#ffffff";
                    if (e <= this.elementOptions.scaling.label.drawThreshold) {
                        var r = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - e)));
                        o = Vm(o, r), n = Vm(n, r);
                    }
                    return [
                        o,
                        n
                    ];
                }
            },
            {
                key: "getTextSize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    return this._processLabel(t, e, i), {
                        width: this.size.width,
                        height: this.size.height,
                        lineCount: this.lineCount
                    };
                }
            },
            {
                key: "getSize",
                value: function() {
                    var t = this.size.left, e = this.size.top - 1;
                    if (this.isEdgeLabel) {
                        var i = .5 * -this.size.width;
                        switch(this.fontOptions.align){
                            case "middle":
                                t = i, e = .5 * -this.size.height;
                                break;
                            case "top":
                                t = i, e = -(this.size.height + 2);
                                break;
                            case "bottom":
                                t = i, e = 2;
                        }
                    }
                    return {
                        left: t,
                        top: e,
                        width: this.size.width,
                        height: this.size.height
                    };
                }
            },
            {
                key: "calculateLabelSize",
                value: function(t, e, i) {
                    var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "middle";
                    this._processLabel(t, e, i), this.size.left = o - .5 * this.size.width, this.size.top = n - .5 * this.size.height, this.size.yLine = n + .5 * (1 - this.lineCount) * this.fontOptions.size, "hanging" === r && (this.size.top += .5 * this.fontOptions.size, this.size.top += 4, this.size.yLine += 4);
                }
            },
            {
                key: "getFormattingValues",
                value: function(t, e, i, o) {
                    var n = function(t, e, i) {
                        return "normal" === e ? "mod" === i ? "" : t[i] : void 0 !== t[e][i] ? t[e][i] : t[i];
                    }, r = {
                        color: n(this.fontOptions, o, "color"),
                        size: n(this.fontOptions, o, "size"),
                        face: n(this.fontOptions, o, "face"),
                        mod: n(this.fontOptions, o, "mod"),
                        vadjust: n(this.fontOptions, o, "vadjust"),
                        strokeWidth: this.fontOptions.strokeWidth,
                        strokeColor: this.fontOptions.strokeColor
                    };
                    (e || i) && ("normal" === o && !0 === this.fontOptions.chooser && this.elementOptions.labelHighlightBold ? r.mod = "bold" : "function" == typeof this.fontOptions.chooser && this.fontOptions.chooser(r, this.elementOptions.id, e, i));
                    var s = "";
                    return void 0 !== r.mod && "" !== r.mod && (s += r.mod + " "), s += r.size + "px " + r.face, t.font = s.replace(/"/g, ""), r.font = t.font, r.height = r.size, r;
                }
            },
            {
                key: "differentState",
                value: function(t, e) {
                    return t !== this.selectedState || e !== this.hoverState;
                }
            },
            {
                key: "_processLabelText",
                value: function(t, e, i, o) {
                    return new L_(t, this, e, i).process(o);
                }
            },
            {
                key: "_processLabel",
                value: function(t, e, i) {
                    if (!1 !== this.labelDirty || this.differentState(e, i)) {
                        var o = this._processLabelText(t, e, i, this.elementOptions.label);
                        this.fontOptions.minWdt > 0 && o.width < this.fontOptions.minWdt && (o.width = this.fontOptions.minWdt), this.size.labelHeight = o.height, this.fontOptions.minHgt > 0 && o.height < this.fontOptions.minHgt && (o.height = this.fontOptions.minHgt), this.lines = o.lines, this.lineCount = o.lines.length, this.size.width = o.width, this.size.height = o.height, this.selectedState = e, this.hoverState = i, this.labelDirty = !1;
                    }
                }
            },
            {
                key: "visible",
                value: function() {
                    return 0 !== this.size.width && 0 !== this.size.height && void 0 !== this.elementOptions.label && !(this.fontOptions.size * this.body.view.scale < this.elementOptions.scaling.label.drawThreshold - 1);
                }
            }
        ], [
            {
                key: "parseFontString",
                value: function(t, e) {
                    if (!e || "string" != typeof e) return !1;
                    var i = e.split(" ");
                    return t.size = +i[0].replace("px", ""), t.face = i[1], t.color = i[2], !0;
                }
            }
        ]), t;
    }(), V_ = ca, q_ = Tt, U_ = TypeError, Y_ = Mi, X_ = u, K_ = Io, G_ = function(t) {
        if (V_(t)) return t;
        throw new U_(q_(t) + " is not a constructor");
    }, $_ = oi, Z_ = et, Q_ = br, J_ = s, tx = at("Reflect", "construct"), ex = Object.prototype, ix = [].push, ox = J_(function() {
        function t() {}
        return !(tx(function() {}, [], t) instanceof t);
    }), nx = !J_(function() {
        tx(function() {});
    }), rx = ox || nx;
    Y_({
        target: "Reflect",
        stat: !0,
        forced: rx,
        sham: rx
    }, {
        construct: function(t, e) {
            G_(t), $_(e);
            var i = arguments.length < 3 ? t : G_(arguments[2]);
            if (nx && !ox) return tx(t, e, i);
            if (t === i) {
                switch(e.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(e[0]);
                    case 2:
                        return new t(e[0], e[1]);
                    case 3:
                        return new t(e[0], e[1], e[2]);
                    case 4:
                        return new t(e[0], e[1], e[2], e[3]);
                }
                var o = [
                    null
                ];
                return X_(ix, o, e), new (X_(K_, t, o));
            }
            var n = i.prototype, r = Q_(Z_(n) ? n : ex), s = X_(t, r, e);
            return Z_(s) ? s : r;
        }
    });
    var sx = o(it.Reflect.construct), ax = o(Uv);
    Mi({
        target: "Object",
        stat: !0
    }, {
        setPrototypeOf: cs
    });
    var hx = o(it.Object.setPrototypeOf), dx = o(Ho);
    function lx(t, e) {
        var i;
        return lx = hx ? dx(i = hx).call(i) : function(t, e) {
            return t.__proto__ = e, t;
        }, lx(t, e);
    }
    function cx(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = ax(e && e.prototype, {
            constructor: {
                value: t,
                writable: !0,
                configurable: !0
            }
        }), xh(t, "prototype", {
            writable: !1
        }), e && lx(t, e);
    }
    function ux(t, e) {
        if (e && ("object" === gu(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return function(t) {
            if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return t;
        }(t);
    }
    var fx = o(iv);
    function px(t) {
        var e;
        return px = hx ? dx(e = fx).call(e) : function(t) {
            return t.__proto__ || fx(t);
        }, px(t);
    }
    var vx = function() {
        function t(e, i, o) {
            vh(this, t), this.body = i, this.labelModule = o, this.setOptions(e), this.top = void 0, this.left = void 0, this.height = void 0, this.width = void 0, this.radius = void 0, this.margin = void 0, this.refreshNeeded = !0, this.boundingBox = {
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            };
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "_setMargins",
                value: function(t) {
                    this.margin = {}, this.options.margin && ("object" == gu(this.options.margin) ? (this.margin.top = this.options.margin.top, this.margin.right = this.options.margin.right, this.margin.bottom = this.options.margin.bottom, this.margin.left = this.options.margin.left) : (this.margin.top = this.options.margin, this.margin.right = this.options.margin, this.margin.bottom = this.options.margin, this.margin.left = this.options.margin)), t.adjustSizes(this.margin);
                }
            },
            {
                key: "_distanceToBorder",
                value: function(t, e) {
                    var i = this.options.borderWidth;
                    return t && this.resize(t), Math.min(Math.abs(this.width / 2 / Math.cos(e)), Math.abs(this.height / 2 / Math.sin(e))) + i;
                }
            },
            {
                key: "enableShadow",
                value: function(t, e) {
                    e.shadow && (t.shadowColor = e.shadowColor, t.shadowBlur = e.shadowSize, t.shadowOffsetX = e.shadowX, t.shadowOffsetY = e.shadowY);
                }
            },
            {
                key: "disableShadow",
                value: function(t, e) {
                    e.shadow && (t.shadowColor = "rgba(0,0,0,0)", t.shadowBlur = 0, t.shadowOffsetX = 0, t.shadowOffsetY = 0);
                }
            },
            {
                key: "enableBorderDashes",
                value: function(t, e) {
                    if (!1 !== e.borderDashes) {
                        if (void 0 !== t.setLineDash) {
                            var i = e.borderDashes;
                            !0 === i && (i = [
                                5,
                                15
                            ]), t.setLineDash(i);
                        } else console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."), this.options.shapeProperties.borderDashes = !1, e.borderDashes = !1;
                    }
                }
            },
            {
                key: "disableBorderDashes",
                value: function(t, e) {
                    !1 !== e.borderDashes && (void 0 !== t.setLineDash ? t.setLineDash([
                        0
                    ]) : (console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."), this.options.shapeProperties.borderDashes = !1, e.borderDashes = !1));
                }
            },
            {
                key: "needsRefresh",
                value: function(t, e) {
                    return !0 === this.refreshNeeded ? (this.refreshNeeded = !1, !0) : void 0 === this.width || this.labelModule.differentState(t, e);
                }
            },
            {
                key: "initContextForDraw",
                value: function(t, e) {
                    var i = e.borderWidth / this.body.view.scale;
                    t.lineWidth = Math.min(this.width, i), t.strokeStyle = e.borderColor, t.fillStyle = e.color;
                }
            },
            {
                key: "performStroke",
                value: function(t, e) {
                    var i = e.borderWidth / this.body.view.scale;
                    t.save(), i > 0 && (this.enableBorderDashes(t, e), t.stroke(), this.disableBorderDashes(t, e)), t.restore();
                }
            },
            {
                key: "performFill",
                value: function(t, e) {
                    t.save(), t.fillStyle = e.color, this.enableShadow(t, e), Cg(t).call(t), this.disableShadow(t, e), t.restore(), this.performStroke(t, e);
                }
            },
            {
                key: "_addBoundingBoxMargin",
                value: function(t) {
                    this.boundingBox.left -= t, this.boundingBox.top -= t, this.boundingBox.bottom += t, this.boundingBox.right += t;
                }
            },
            {
                key: "_updateBoundingBox",
                value: function(t, e, i, o, n) {
                    void 0 !== i && this.resize(i, o, n), this.left = t - this.width / 2, this.top = e - this.height / 2, this.boundingBox.left = this.left, this.boundingBox.top = this.top, this.boundingBox.bottom = this.top + this.height, this.boundingBox.right = this.left + this.width;
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e, i, o, n) {
                    this._updateBoundingBox(t, e, i, o, n);
                }
            },
            {
                key: "getDimensionsFromLabel",
                value: function(t, e, i) {
                    this.textSize = this.labelModule.getTextSize(t, e, i);
                    var o = this.textSize.width, n = this.textSize.height;
                    return 0 === o && (o = 14, n = 14), {
                        width: o,
                        height: n
                    };
                }
            }
        ]), t;
    }();
    function gx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var yx = function(t) {
        cx(i, t);
        var e = gx(i);
        function i(t, o, n) {
            var r;
            return vh(this, i), (r = e.call(this, t, o, n))._setMargins(n), r;
        }
        return wu(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i);
                        this.width = o.width + this.margin.right + this.margin.left, this.height = o.height + this.margin.top + this.margin.bottom, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.initContextForDraw(t, r), qo(t, this.left, this.top, this.width, this.height, r.borderRadius), this.performFill(t, r), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e, i, o, n) {
                    this._updateBoundingBox(t, e, i, o, n);
                    var r = this.options.shapeProperties.borderRadius;
                    this._addBoundingBoxMargin(r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    t && this.resize(t);
                    var i = this.options.borderWidth;
                    return Math.min(Math.abs(this.width / 2 / Math.cos(e)), Math.abs(this.height / 2 / Math.sin(e))) + i;
                }
            }
        ]), i;
    }(vx);
    function mx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var bx = function(t) {
        cx(i, t);
        var e = mx(i);
        function i(t, o, n) {
            var r;
            return vh(this, i), (r = e.call(this, t, o, n)).labelOffset = 0, r.selected = !1, r;
        }
        return wu(i, [
            {
                key: "setOptions",
                value: function(t, e, i) {
                    this.options = t, void 0 === e && void 0 === i || this.setImages(e, i);
                }
            },
            {
                key: "setImages",
                value: function(t, e) {
                    e && this.selected ? (this.imageObj = e, this.imageObjAlt = t) : (this.imageObj = t, this.imageObjAlt = e);
                }
            },
            {
                key: "switchImages",
                value: function(t) {
                    var e = t && !this.selected || !t && this.selected;
                    if (this.selected = t, void 0 !== this.imageObjAlt && e) {
                        var i = this.imageObj;
                        this.imageObj = this.imageObjAlt, this.imageObjAlt = i;
                    }
                }
            },
            {
                key: "_getImagePadding",
                value: function() {
                    var t = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    };
                    if (this.options.imagePadding) {
                        var e = this.options.imagePadding;
                        "object" == gu(e) ? (t.top = e.top, t.right = e.right, t.bottom = e.bottom, t.left = e.left) : (t.top = e, t.right = e, t.bottom = e, t.left = e);
                    }
                    return t;
                }
            },
            {
                key: "_resizeImage",
                value: function() {
                    var t, e;
                    if (!1 === this.options.shapeProperties.useImageSize) {
                        var i = 1, o = 1;
                        this.imageObj.width && this.imageObj.height && (this.imageObj.width > this.imageObj.height ? i = this.imageObj.width / this.imageObj.height : o = this.imageObj.height / this.imageObj.width), t = 2 * this.options.size * i, e = 2 * this.options.size * o;
                    } else {
                        var n = this._getImagePadding();
                        t = this.imageObj.width + n.left + n.right, e = this.imageObj.height + n.top + n.bottom;
                    }
                    this.width = t, this.height = e, this.radius = .5 * this.width;
                }
            },
            {
                key: "_drawRawCircle",
                value: function(t, e, i, o) {
                    this.initContextForDraw(t, o), Vo(t, e, i, o.size), this.performFill(t, o);
                }
            },
            {
                key: "_drawImageAtPosition",
                value: function(t, e) {
                    if (0 != this.imageObj.width) {
                        t.globalAlpha = void 0 !== e.opacity ? e.opacity : 1, this.enableShadow(t, e);
                        var i = 1;
                        !0 === this.options.shapeProperties.interpolation && (i = this.imageObj.width / this.width / this.body.view.scale);
                        var o = this._getImagePadding(), n = this.left + o.left, r = this.top + o.top, s = this.width - o.left - o.right, a = this.height - o.top - o.bottom;
                        this.imageObj.drawImageAtPosition(t, i, n, r, s, a), this.disableShadow(t, e);
                    }
                }
            },
            {
                key: "_drawImageLabel",
                value: function(t, e, i, o, n) {
                    var r = 0;
                    if (void 0 !== this.height) {
                        r = .5 * this.height;
                        var s = this.labelModule.getTextSize(t, o, n);
                        s.lineCount >= 1 && (r += s.height / 2);
                    }
                    var a = i + r;
                    this.options.label && (this.labelOffset = r), this.labelModule.draw(t, e, a, o, n, "hanging");
                }
            }
        ]), i;
    }(vx);
    function wx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var kx = function(t) {
        cx(i, t);
        var e = wx(i);
        function i(t, o, n) {
            var r;
            return vh(this, i), (r = e.call(this, t, o, n))._setMargins(n), r;
        }
        return wu(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i), n = Math.max(o.width + this.margin.right + this.margin.left, o.height + this.margin.top + this.margin.bottom);
                        this.options.size = n / 2, this.width = n, this.height = n, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this._drawRawCircle(t, e, i, r), this.updateBoundingBox(e, i), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, i, o, n);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t) {
                    return t && this.resize(t), .5 * this.width;
                }
            }
        ]), i;
    }(bx);
    function _x(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var xx = function(t) {
        cx(i, t);
        var e = _x(i);
        function i(t, o, n, r, s) {
            var a;
            return vh(this, i), (a = e.call(this, t, o, n)).setImages(r, s), a;
        }
        return wu(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;
                    if (void 0 === this.imageObj.src || void 0 === this.imageObj.width || void 0 === this.imageObj.height) {
                        var o = 2 * this.options.size;
                        return this.width = o, this.height = o, void (this.radius = .5 * this.width);
                    }
                    this.needsRefresh(e, i) && this._resizeImage();
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.switchImages(o), this.resize();
                    var s = e, a = i;
                    "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = e, this.top = i, s += this.width / 2, a += this.height / 2) : (this.left = e - this.width / 2, this.top = i - this.height / 2), this._drawRawCircle(t, s, a, r), t.save(), t.clip(), this._drawImageAtPosition(t, r), t.restore(), this._drawImageLabel(t, s, a, o, n), this.updateBoundingBox(e, i);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.boundingBox.top = e, this.boundingBox.left = t, this.boundingBox.right = t + 2 * this.options.size, this.boundingBox.bottom = e + 2 * this.options.size) : (this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size), this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t) {
                    return t && this.resize(t), .5 * this.width;
                }
            }
        ]), i;
    }(bx);
    function Ex(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Ox = function(t) {
        cx(i, t);
        var e = Ex(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {
                        size: this.options.size
                    };
                    if (this.needsRefresh(e, i)) {
                        var n, r;
                        this.labelModule.getTextSize(t, e, i);
                        var s = 2 * o.size;
                        this.width = null !== (n = this.customSizeWidth) && void 0 !== n ? n : s, this.height = null !== (r = this.customSizeHeight) && void 0 !== r ? r : s, this.radius = .5 * this.width;
                    }
                }
            },
            {
                key: "_drawShape",
                value: function(t, e, i, o, n, r, s, a) {
                    var h, d = this;
                    return this.resize(t, r, s, a), this.left = o - this.width / 2, this.top = n - this.height / 2, this.initContextForDraw(t, a), (h = e, Object.prototype.hasOwnProperty.call(Ko, h) ? Ko[h] : function(t) {
                        for(var e = arguments.length, i = new Array(e > 1 ? e - 1 : 0), o = 1; o < e; o++)i[o - 1] = arguments[o];
                        CanvasRenderingContext2D.prototype[h].call(t, i);
                    })(t, o, n, a.size), this.performFill(t, a), void 0 !== this.options.icon && void 0 !== this.options.icon.code && (t.font = (r ? "bold " : "") + this.height / 2 + "px " + (this.options.icon.face || "FontAwesome"), t.fillStyle = this.options.icon.color || "black", t.textAlign = "center", t.textBaseline = "middle", t.fillText(this.options.icon.code, o, n)), {
                        drawExternalLabel: function() {
                            if (void 0 !== d.options.label) {
                                d.labelModule.calculateLabelSize(t, r, s, o, n, "hanging");
                                var e = n + .5 * d.height + .5 * d.labelModule.size.height;
                                d.labelModule.draw(t, o, e, r, s, "hanging");
                            }
                            d.updateBoundingBox(o, n);
                        }
                    };
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size, void 0 !== this.options.label && this.labelModule.size.width > 0 && (this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height));
                }
            }
        ]), i;
    }(vx);
    function Cx(t, e) {
        var i = zf(t);
        if (Nk) {
            var o = Nk(t);
            e && (o = lv(o).call(o, function(e) {
                return Yk(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function Sx(t) {
        for(var e = 1; e < arguments.length; e++){
            var i, o, n = null != arguments[e] ? arguments[e] : {};
            e % 2 ? Qf(i = Cx(Object(n), !0)).call(i, function(e) {
                s_(t, e, n[e]);
            }) : Zk ? n_(t, Zk(n)) : Qf(o = Cx(Object(n))).call(o, function(e) {
                r_(t, e, Yk(n, e));
            });
        }
        return t;
    }
    function Tx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Mx = function(t) {
        cx(i, t);
        var e = Tx(i);
        function i(t, o, n, r) {
            var s;
            return vh(this, i), (s = e.call(this, t, o, n, r)).ctxRenderer = r, s;
        }
        return wu(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n, r), this.left = e - this.width / 2, this.top = i - this.height / 2, t.save();
                    var s = this.ctxRenderer({
                        ctx: t,
                        id: this.options.id,
                        x: e,
                        y: i,
                        state: {
                            selected: o,
                            hover: n
                        },
                        style: Sx({}, r),
                        label: this.options.label
                    });
                    if (null != s.drawNode && s.drawNode(), t.restore(), s.drawExternalLabel) {
                        var a = s.drawExternalLabel;
                        s.drawExternalLabel = function() {
                            t.save(), a(), t.restore();
                        };
                    }
                    return s.nodeDimensions && (this.customSizeWidth = s.nodeDimensions.width, this.customSizeHeight = s.nodeDimensions.height), s;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Ox);
    function Px(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Dx = function(t) {
        cx(i, t);
        var e = Px(i);
        function i(t, o, n) {
            var r;
            return vh(this, i), (r = e.call(this, t, o, n))._setMargins(n), r;
        }
        return wu(i, [
            {
                key: "resize",
                value: function(t, e, i) {
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i).width + this.margin.right + this.margin.left;
                        this.width = o, this.height = o, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.initContextForDraw(t, r), Yo(t, e - this.width / 2, i - this.height / 2, this.width, this.height), this.performFill(t, r), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(vx);
    function Ix(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Bx = function(t) {
        cx(i, t);
        var e = Ix(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "diamond", 4, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Ox);
    function Fx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var zx = function(t) {
        cx(i, t);
        var e = Fx(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "circle", 2, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t) {
                    return t && this.resize(t), this.options.size;
                }
            }
        ]), i;
    }(Ox);
    function Nx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Ax = function(t) {
        cx(i, t);
        var e = Nx(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i);
                        this.height = 2 * o.height, this.width = o.width + o.height, this.radius = .5 * this.width;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - .5 * this.width, this.top = i - .5 * this.height, this.initContextForDraw(t, r), Uo(t, this.left, this.top, this.width, this.height), this.performFill(t, r), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, e, i, o, n);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    t && this.resize(t);
                    var i = .5 * this.width, o = .5 * this.height, n = Math.sin(e) * i, r = Math.cos(e) * o;
                    return i * o / Math.sqrt(n * n + r * r);
                }
            }
        ]), i;
    }(vx);
    function Rx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var jx = function(t) {
        cx(i, t);
        var e = Rx(i);
        function i(t, o, n) {
            var r;
            return vh(this, i), (r = e.call(this, t, o, n))._setMargins(n), r;
        }
        return wu(i, [
            {
                key: "resize",
                value: function(t, e, i) {
                    this.needsRefresh(e, i) && (this.iconSize = {
                        width: Number(this.options.icon.size),
                        height: Number(this.options.icon.size)
                    }, this.width = this.iconSize.width + this.margin.right + this.margin.left, this.height = this.iconSize.height + this.margin.top + this.margin.bottom, this.radius = .5 * this.width);
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    var s = this;
                    return this.resize(t, o, n), this.options.icon.size = this.options.icon.size || 50, this.left = e - this.width / 2, this.top = i - this.height / 2, this._icon(t, e, i, o, n, r), {
                        drawExternalLabel: function() {
                            if (void 0 !== s.options.label) s.labelModule.draw(t, s.left + s.iconSize.width / 2 + s.margin.left, i + s.height / 2 + 5, o);
                            s.updateBoundingBox(e, i);
                        }
                    };
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    if (this.boundingBox.top = e - .5 * this.options.icon.size, this.boundingBox.left = t - .5 * this.options.icon.size, this.boundingBox.right = t + .5 * this.options.icon.size, this.boundingBox.bottom = e + .5 * this.options.icon.size, void 0 !== this.options.label && this.labelModule.size.width > 0) this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + 5);
                }
            },
            {
                key: "_icon",
                value: function(t, e, i, o, n, r) {
                    var s = Number(this.options.icon.size);
                    void 0 !== this.options.icon.code ? (t.font = [
                        null != this.options.icon.weight ? this.options.icon.weight : o ? "bold" : "",
                        (null != this.options.icon.weight && o ? 5 : 0) + s + "px",
                        this.options.icon.face
                    ].join(" "), t.fillStyle = this.options.icon.color || "black", t.textAlign = "center", t.textBaseline = "middle", this.enableShadow(t, r), t.fillText(this.options.icon.code, e, i), this.disableShadow(t, r)) : console.error("When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.");
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(vx);
    function Lx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Hx = function(t) {
        cx(i, t);
        var e = Lx(i);
        function i(t, o, n, r, s) {
            var a;
            return vh(this, i), (a = e.call(this, t, o, n)).setImages(r, s), a;
        }
        return wu(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;
                    if (void 0 === this.imageObj.src || void 0 === this.imageObj.width || void 0 === this.imageObj.height) {
                        var o = 2 * this.options.size;
                        return this.width = o, void (this.height = o);
                    }
                    this.needsRefresh(e, i) && this._resizeImage();
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    t.save(), this.switchImages(o), this.resize();
                    var s = e, a = i;
                    if ("top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = e, this.top = i, s += this.width / 2, a += this.height / 2) : (this.left = e - this.width / 2, this.top = i - this.height / 2), !0 === this.options.shapeProperties.useBorderWithImage) {
                        var h = this.options.borderWidth, d = this.options.borderWidthSelected || 2 * this.options.borderWidth, l = (o ? d : h) / this.body.view.scale;
                        t.lineWidth = Math.min(this.width, l), t.beginPath();
                        var c = o ? this.options.color.highlight.border : n ? this.options.color.hover.border : this.options.color.border, u = o ? this.options.color.highlight.background : n ? this.options.color.hover.background : this.options.color.background;
                        void 0 !== r.opacity && (c = Vm(c, r.opacity), u = Vm(u, r.opacity)), t.strokeStyle = c, t.fillStyle = u, t.rect(this.left - .5 * t.lineWidth, this.top - .5 * t.lineWidth, this.width + t.lineWidth, this.height + t.lineWidth), Cg(t).call(t), this.performStroke(t, r), t.closePath();
                    }
                    this._drawImageAtPosition(t, r), this._drawImageLabel(t, s, a, o, n), this.updateBoundingBox(e, i), t.restore();
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    this.resize(), "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = t, this.top = e) : (this.left = t - this.width / 2, this.top = e - this.height / 2), this.boundingBox.left = this.left, this.boundingBox.top = this.top, this.boundingBox.bottom = this.top + this.height, this.boundingBox.right = this.left + this.width, void 0 !== this.options.label && this.labelModule.size.width > 0 && (this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset));
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(bx);
    function Wx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Vx = function(t) {
        cx(i, t);
        var e = Wx(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "square", 2, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Ox);
    function qx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Ux = function(t) {
        cx(i, t);
        var e = qx(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "hexagon", 4, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Ox);
    function Yx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Xx = function(t) {
        cx(i, t);
        var e = Yx(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "star", 4, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Ox);
    function Kx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Gx = function(t) {
        cx(i, t);
        var e = Kx(i);
        function i(t, o, n) {
            var r;
            return vh(this, i), (r = e.call(this, t, o, n))._setMargins(n), r;
        }
        return wu(i, [
            {
                key: "resize",
                value: function(t, e, i) {
                    this.needsRefresh(e, i) && (this.textSize = this.labelModule.getTextSize(t, e, i), this.width = this.textSize.width + this.margin.right + this.margin.left, this.height = this.textSize.height + this.margin.top + this.margin.bottom, this.radius = .5 * this.width);
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.enableShadow(t, r), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n), this.disableShadow(t, r), this.updateBoundingBox(e, i, t, o, n);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(vx);
    function $x(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Zx = function(t) {
        cx(i, t);
        var e = $x(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "triangle", 3, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Ox);
    function Qx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var Jx = function(t) {
        cx(i, t);
        var e = Qx(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "triangleDown", 3, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Ox);
    function tE(t, e) {
        var i = zf(t);
        if (Nk) {
            var o = Nk(t);
            e && (o = lv(o).call(o, function(e) {
                return Yk(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function eE(t) {
        for(var e = 1; e < arguments.length; e++){
            var i, o, n = null != arguments[e] ? arguments[e] : {};
            e % 2 ? Qf(i = tE(Object(n), !0)).call(i, function(e) {
                s_(t, e, n[e]);
            }) : Zk ? n_(t, Zk(n)) : Qf(o = tE(Object(n))).call(o, function(e) {
                r_(t, e, Yk(n, e));
            });
        }
        return t;
    }
    var iE = function() {
        function t(e, i, o, n, r, s) {
            vh(this, t), this.options = Zm(r), this.globalOptions = r, this.defaultOptions = s, this.body = i, this.edges = [], this.id = void 0, this.imagelist = o, this.grouplist = n, this.x = void 0, this.y = void 0, this.baseSize = this.options.size, this.baseFontSize = this.options.font.size, this.predefinedPosition = !1, this.selected = !1, this.hover = !1, this.labelModule = new W_(this.body, this.options, !1), this.setOptions(e);
        }
        return wu(t, [
            {
                key: "attachEdge",
                value: function(t) {
                    var e;
                    -1 === Vv(e = this.edges).call(e, t) && this.edges.push(t);
                }
            },
            {
                key: "detachEdge",
                value: function(t) {
                    var e, i, o = Vv(e = this.edges).call(e, t);
                    -1 != o && Pp(i = this.edges).call(i, o, 1);
                }
            },
            {
                key: "setOptions",
                value: function(e) {
                    var i = this.options.shape;
                    if (e) {
                        if (void 0 !== e.color && (this._localColor = e.color), void 0 !== e.id && (this.id = e.id), void 0 === this.id) throw new Error("Node must have an id");
                        t.checkMass(e, this.id), void 0 !== e.x && (null === e.x ? (this.x = void 0, this.predefinedPosition = !1) : (this.x = Iv(e.x), this.predefinedPosition = !0)), void 0 !== e.y && (null === e.y ? (this.y = void 0, this.predefinedPosition = !1) : (this.y = Iv(e.y), this.predefinedPosition = !0)), void 0 !== e.size && (this.baseSize = e.size), void 0 !== e.value && (e.value = y_(e.value)), t.parseOptions(this.options, e, !0, this.globalOptions, this.grouplist);
                        var o = [
                            e,
                            this.options,
                            this.defaultOptions
                        ];
                        return this.chooser = E_("node", o), this._load_images(), this.updateLabelModule(e), void 0 !== e.opacity && t.checkOpacity(e.opacity) && (this.options.opacity = e.opacity), this.updateShape(i), void 0 !== e.hidden || void 0 !== e.physics;
                    }
                }
            },
            {
                key: "_load_images",
                value: function() {
                    if (("circularImage" === this.options.shape || "image" === this.options.shape) && void 0 === this.options.image) throw new Error("Option image must be defined for node type '" + this.options.shape + "'");
                    if (void 0 !== this.options.image) {
                        if (void 0 === this.imagelist) throw new Error("Internal Error: No images provided");
                        if ("string" == typeof this.options.image) this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);
                        else {
                            if (void 0 === this.options.image.unselected) throw new Error("No unselected image provided");
                            this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id), void 0 !== this.options.image.selected ? this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id) : this.imageObjAlt = void 0;
                        }
                    }
                }
            },
            {
                key: "getFormattingValues",
                value: function() {
                    var t = {
                        color: this.options.color.background,
                        opacity: this.options.opacity,
                        borderWidth: this.options.borderWidth,
                        borderColor: this.options.color.border,
                        size: this.options.size,
                        borderDashes: this.options.shapeProperties.borderDashes,
                        borderRadius: this.options.shapeProperties.borderRadius,
                        shadow: this.options.shadow.enabled,
                        shadowColor: this.options.shadow.color,
                        shadowSize: this.options.shadow.size,
                        shadowX: this.options.shadow.x,
                        shadowY: this.options.shadow.y
                    };
                    if (this.selected || this.hover ? !0 === this.chooser ? this.selected ? (null != this.options.borderWidthSelected ? t.borderWidth = this.options.borderWidthSelected : t.borderWidth *= 2, t.color = this.options.color.highlight.background, t.borderColor = this.options.color.highlight.border, t.shadow = this.options.shadow.enabled) : this.hover && (t.color = this.options.color.hover.background, t.borderColor = this.options.color.hover.border, t.shadow = this.options.shadow.enabled) : "function" == typeof this.chooser && (this.chooser(t, this.options.id, this.selected, this.hover), !1 === t.shadow && (t.shadowColor === this.options.shadow.color && t.shadowSize === this.options.shadow.size && t.shadowX === this.options.shadow.x && t.shadowY === this.options.shadow.y || (t.shadow = !0))) : t.shadow = this.options.shadow.enabled, void 0 !== this.options.opacity) {
                        var e = this.options.opacity;
                        t.borderColor = Vm(t.borderColor, e), t.color = Vm(t.color, e), t.shadowColor = Vm(t.shadowColor, e);
                    }
                    return t;
                }
            },
            {
                key: "updateLabelModule",
                value: function(e) {
                    void 0 !== this.options.label && null !== this.options.label || (this.options.label = ""), t.updateGroupOptions(this.options, eE(eE({}, e), {}, {
                        color: e && e.color || this._localColor || void 0
                    }), this.grouplist);
                    var i = this.grouplist.get(this.options.group, !1), o = [
                        e,
                        this.options,
                        i,
                        this.globalOptions,
                        this.defaultOptions
                    ];
                    this.labelModule.update(this.options, o), void 0 !== this.labelModule.baseSize && (this.baseFontSize = this.labelModule.baseSize);
                }
            },
            {
                key: "updateShape",
                value: function(t) {
                    if (t === this.options.shape && this.shape) this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);
                    else switch(this.options.shape){
                        case "box":
                            this.shape = new yx(this.options, this.body, this.labelModule);
                            break;
                        case "circle":
                            this.shape = new kx(this.options, this.body, this.labelModule);
                            break;
                        case "circularImage":
                            this.shape = new xx(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                            break;
                        case "custom":
                            this.shape = new Mx(this.options, this.body, this.labelModule, this.options.ctxRenderer);
                            break;
                        case "database":
                            this.shape = new Dx(this.options, this.body, this.labelModule);
                            break;
                        case "diamond":
                            this.shape = new Bx(this.options, this.body, this.labelModule);
                            break;
                        case "dot":
                            this.shape = new zx(this.options, this.body, this.labelModule);
                            break;
                        case "ellipse":
                        default:
                            this.shape = new Ax(this.options, this.body, this.labelModule);
                            break;
                        case "icon":
                            this.shape = new jx(this.options, this.body, this.labelModule);
                            break;
                        case "image":
                            this.shape = new Hx(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                            break;
                        case "square":
                            this.shape = new Vx(this.options, this.body, this.labelModule);
                            break;
                        case "hexagon":
                            this.shape = new Ux(this.options, this.body, this.labelModule);
                            break;
                        case "star":
                            this.shape = new Xx(this.options, this.body, this.labelModule);
                            break;
                        case "text":
                            this.shape = new Gx(this.options, this.body, this.labelModule);
                            break;
                        case "triangle":
                            this.shape = new Zx(this.options, this.body, this.labelModule);
                            break;
                        case "triangleDown":
                            this.shape = new Jx(this.options, this.body, this.labelModule);
                    }
                    this.needsRefresh();
                }
            },
            {
                key: "select",
                value: function() {
                    this.selected = !0, this.needsRefresh();
                }
            },
            {
                key: "unselect",
                value: function() {
                    this.selected = !1, this.needsRefresh();
                }
            },
            {
                key: "needsRefresh",
                value: function() {
                    this.shape.refreshNeeded = !0;
                }
            },
            {
                key: "getTitle",
                value: function() {
                    return this.options.title;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this.shape.distanceToBorder(t, e);
                }
            },
            {
                key: "isFixed",
                value: function() {
                    return this.options.fixed.x && this.options.fixed.y;
                }
            },
            {
                key: "isSelected",
                value: function() {
                    return this.selected;
                }
            },
            {
                key: "getValue",
                value: function() {
                    return this.options.value;
                }
            },
            {
                key: "getLabelSize",
                value: function() {
                    return this.labelModule.size();
                }
            },
            {
                key: "setValueRange",
                value: function(t, e, i) {
                    if (void 0 !== this.options.value) {
                        var o = this.options.scaling.customScalingFunction(t, e, i, this.options.value), n = this.options.scaling.max - this.options.scaling.min;
                        if (!0 === this.options.scaling.label.enabled) {
                            var r = this.options.scaling.label.max - this.options.scaling.label.min;
                            this.options.font.size = this.options.scaling.label.min + o * r;
                        }
                        this.options.size = this.options.scaling.min + o * n;
                    } else this.options.size = this.baseSize, this.options.font.size = this.baseFontSize;
                    this.updateLabelModule();
                }
            },
            {
                key: "draw",
                value: function(t) {
                    var e = this.getFormattingValues();
                    return this.shape.draw(t, this.x, this.y, this.selected, this.hover, e) || {};
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t) {
                    this.shape.updateBoundingBox(this.x, this.y, t);
                }
            },
            {
                key: "resize",
                value: function(t) {
                    var e = this.getFormattingValues();
                    this.shape.resize(t, this.selected, this.hover, e);
                }
            },
            {
                key: "getItemsOnPoint",
                value: function(t) {
                    var e = [];
                    return this.labelModule.visible() && O_(this.labelModule.getSize(), t) && e.push({
                        nodeId: this.id,
                        labelId: 0
                    }), O_(this.shape.boundingBox, t) && e.push({
                        nodeId: this.id
                    }), e;
                }
            },
            {
                key: "isOverlappingWith",
                value: function(t) {
                    return this.shape.left < t.right && this.shape.left + this.shape.width > t.left && this.shape.top < t.bottom && this.shape.top + this.shape.height > t.top;
                }
            },
            {
                key: "isBoundingBoxOverlappingWith",
                value: function(t) {
                    return this.shape.boundingBox.left < t.right && this.shape.boundingBox.right > t.left && this.shape.boundingBox.top < t.bottom && this.shape.boundingBox.bottom > t.top;
                }
            }
        ], [
            {
                key: "checkOpacity",
                value: function(t) {
                    return 0 <= t && t <= 1;
                }
            },
            {
                key: "checkCoordinateOrigin",
                value: function(t) {
                    return void 0 === t || "center" === t || "top-left" === t;
                }
            },
            {
                key: "updateGroupOptions",
                value: function(e, i, o) {
                    var n;
                    if (void 0 !== o) {
                        var r = e.group;
                        if (void 0 !== i && void 0 !== i.group && r !== i.group) throw new Error("updateGroupOptions: group values in options don't match.");
                        if ("number" == typeof r || "string" == typeof r && "" != r) {
                            var s = o.get(r);
                            void 0 !== s.opacity && void 0 === i.opacity && (t.checkOpacity(s.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + s.opacity), s.opacity = void 0));
                            var a = lv(n = x_(i)).call(n, function(t) {
                                return null != i[t];
                            });
                            a.push("font"), Am(a, e, s), e.color = Um(e.color);
                        }
                    }
                }
            },
            {
                key: "parseOptions",
                value: function(e, i) {
                    var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, r = arguments.length > 4 ? arguments[4] : void 0;
                    if (Am([
                        "color",
                        "fixed",
                        "shadow"
                    ], e, i, o), t.checkMass(i), void 0 !== e.opacity && (t.checkOpacity(e.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + e.opacity), e.opacity = void 0)), void 0 !== i.opacity && (t.checkOpacity(i.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + i.opacity), i.opacity = void 0)), i.shapeProperties && !t.checkCoordinateOrigin(i.shapeProperties.coordinateOrigin) && console.error("Invalid option for node coordinateOrigin, found: " + i.shapeProperties.coordinateOrigin), Qm(e, i, "shadow", n), void 0 !== i.color && null !== i.color) {
                        var s = Um(i.color);
                        zm(e.color, s);
                    } else !0 === o && null === i.color && (e.color = Zm(n.color));
                    void 0 !== i.fixed && null !== i.fixed && ("boolean" == typeof i.fixed ? (e.fixed.x = i.fixed, e.fixed.y = i.fixed) : (void 0 !== i.fixed.x && "boolean" == typeof i.fixed.x && (e.fixed.x = i.fixed.x), void 0 !== i.fixed.y && "boolean" == typeof i.fixed.y && (e.fixed.y = i.fixed.y))), !0 === o && null === i.font && (e.font = Zm(n.font)), t.updateGroupOptions(e, i, r), void 0 !== i.scaling && Qm(e.scaling, i.scaling, "label", n.scaling);
                }
            },
            {
                key: "checkMass",
                value: function(t, e) {
                    if (void 0 !== t.mass && t.mass <= 0) {
                        var i = "";
                        void 0 !== e && (i = " in node id: " + e), console.error("%cNegative or zero mass disallowed" + i + ", setting mass to 1.", pb), t.mass = 1;
                    }
                }
            }
        ]), t;
    }();
    function oE(t, e) {
        var i = void 0 !== cf && ph(t) || t["@@iterator"];
        if (!i) {
            if (Of(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return nE(t, e);
                var o = mf(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return Xa(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return nE(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function nE(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    var rE = function() {
        function t(e, i, o, n) {
            var r, s = this;
            if (vh(this, t), this.body = e, this.images = i, this.groups = o, this.layoutEngine = n, this.body.functions.createNode = Wo(r = this.create).call(r, this), this.nodesListeners = {
                add: function(t, e) {
                    s.add(e.items);
                },
                update: function(t, e) {
                    s.update(e.items, e.data, e.oldData);
                },
                remove: function(t, e) {
                    s.remove(e.items);
                }
            }, this.defaultOptions = {
                borderWidth: 1,
                borderWidthSelected: void 0,
                brokenImage: void 0,
                color: {
                    border: "#2B7CE9",
                    background: "#97C2FC",
                    highlight: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    },
                    hover: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    }
                },
                opacity: void 0,
                fixed: {
                    x: !1,
                    y: !1
                },
                font: {
                    color: "#343434",
                    size: 14,
                    face: "arial",
                    background: "none",
                    strokeWidth: 0,
                    strokeColor: "#ffffff",
                    align: "center",
                    vadjust: 0,
                    multi: !1,
                    bold: {
                        mod: "bold"
                    },
                    boldital: {
                        mod: "bold italic"
                    },
                    ital: {
                        mod: "italic"
                    },
                    mono: {
                        mod: "",
                        size: 15,
                        face: "monospace",
                        vadjust: 2
                    }
                },
                group: void 0,
                hidden: !1,
                icon: {
                    face: "FontAwesome",
                    code: void 0,
                    size: 50,
                    color: "#2B7CE9"
                },
                image: void 0,
                imagePadding: {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                },
                label: void 0,
                labelHighlightBold: !0,
                level: void 0,
                margin: {
                    top: 5,
                    right: 5,
                    bottom: 5,
                    left: 5
                },
                mass: 1,
                physics: !0,
                scaling: {
                    min: 10,
                    max: 30,
                    label: {
                        enabled: !1,
                        min: 14,
                        max: 30,
                        maxVisible: 30,
                        drawThreshold: 5
                    },
                    customScalingFunction: function(t, e, i, o) {
                        if (e === t) return .5;
                        var n = 1 / (e - t);
                        return Math.max(0, (o - t) * n);
                    }
                },
                shadow: {
                    enabled: !1,
                    color: "rgba(0,0,0,0.5)",
                    size: 10,
                    x: 5,
                    y: 5
                },
                shape: "ellipse",
                shapeProperties: {
                    borderDashes: !1,
                    borderRadius: 6,
                    interpolation: !0,
                    useImageSize: !1,
                    useBorderWithImage: !1,
                    coordinateOrigin: "center"
                },
                size: 25,
                title: void 0,
                value: void 0,
                x: void 0,
                y: void 0
            }, this.defaultOptions.mass <= 0) throw "Internal error: mass in defaultOptions of NodesHandler may not be zero or negative";
            this.options = Zm(this.defaultOptions), this.bindEventListeners();
        }
        return wu(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t, e, i = this;
                    this.body.emitter.on("refreshNodes", Wo(t = this.refresh).call(t, this)), this.body.emitter.on("refresh", Wo(e = this.refresh).call(e, this)), this.body.emitter.on("destroy", function() {
                        Hm(i.nodesListeners, function(t, e) {
                            i.body.data.nodes && i.body.data.nodes.off(e, t);
                        }), delete i.body.functions.createNode, delete i.nodesListeners.add, delete i.nodesListeners.update, delete i.nodesListeners.remove, delete i.nodesListeners;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        if (iE.parseOptions(this.options, t), void 0 !== t.opacity && (Ok(t.opacity) || !Tk(t.opacity) || t.opacity < 0 || t.opacity > 1 ? console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + t.opacity) : this.options.opacity = t.opacity), void 0 !== t.shape) for(var e in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, e) && this.body.nodes[e].updateShape();
                        if (void 0 !== t.font || void 0 !== t.widthConstraint || void 0 !== t.heightConstraint) for(var i = 0, o = zf(this.body.nodes); i < o.length; i++){
                            var n = o[i];
                            this.body.nodes[n].updateLabelModule(), this.body.nodes[n].needsRefresh();
                        }
                        if (void 0 !== t.size) for(var r in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, r) && this.body.nodes[r].needsRefresh();
                        void 0 === t.hidden && void 0 === t.physics || this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "setData",
                value: function(t) {
                    var i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], o = this.body.data.nodes;
                    if (e.isDataViewLike("id", t)) this.body.data.nodes = t;
                    else if (Of(t)) this.body.data.nodes = new e.DataSet, this.body.data.nodes.add(t);
                    else {
                        if (t) throw new TypeError("Array or DataSet expected");
                        this.body.data.nodes = new e.DataSet;
                    }
                    if (o && Hm(this.nodesListeners, function(t, e) {
                        o.off(e, t);
                    }), this.body.nodes = {}, this.body.data.nodes) {
                        var n = this;
                        Hm(this.nodesListeners, function(t, e) {
                            n.body.data.nodes.on(e, t);
                        });
                        var r = this.body.data.nodes.getIds();
                        this.add(r, !0);
                    }
                    !1 === i && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "add",
                value: function(t) {
                    for(var e, i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], o = [], n = 0; n < t.length; n++){
                        e = t[n];
                        var r = this.body.data.nodes.get(e), s = this.create(r);
                        o.push(s), this.body.nodes[e] = s;
                    }
                    this.layoutEngine.positionInitially(o), !1 === i && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "update",
                value: function(t, e, i) {
                    for(var o = this.body.nodes, n = !1, r = 0; r < t.length; r++){
                        var s = t[r], a = o[s], h = e[r];
                        void 0 !== a ? a.setOptions(h) && (n = !0) : (n = !0, a = this.create(h), o[s] = a);
                    }
                    n || void 0 === i || (n = zk(e).call(e, function(t, e) {
                        var o = i[e];
                        return o && o.level !== t.level;
                    })), !0 === n ? this.body.emitter.emit("_dataChanged") : this.body.emitter.emit("_dataUpdated");
                }
            },
            {
                key: "remove",
                value: function(t) {
                    for(var e = this.body.nodes, i = 0; i < t.length; i++)delete e[t[i]];
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "create",
                value: function(t) {
                    return new (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : iE)(t, this.body, this.images, this.groups, this.options, this.defaultOptions);
                }
            },
            {
                key: "refresh",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    Hm(this.body.nodes, function(i, o) {
                        var n = t.body.data.nodes.get(o);
                        void 0 !== n && (!0 === e && i.setOptions({
                            x: null,
                            y: null
                        }), i.setOptions({
                            fixed: !1
                        }), i.setOptions(n));
                    });
                }
            },
            {
                key: "getPositions",
                value: function(t) {
                    var e = {};
                    if (void 0 !== t) {
                        if (!0 === Of(t)) {
                            for(var i = 0; i < t.length; i++)if (void 0 !== this.body.nodes[t[i]]) {
                                var o = this.body.nodes[t[i]];
                                e[t[i]] = {
                                    x: Math.round(o.x),
                                    y: Math.round(o.y)
                                };
                            }
                        } else if (void 0 !== this.body.nodes[t]) {
                            var n = this.body.nodes[t];
                            e[t] = {
                                x: Math.round(n.x),
                                y: Math.round(n.y)
                            };
                        }
                    } else for(var r = 0; r < this.body.nodeIndices.length; r++){
                        var s = this.body.nodes[this.body.nodeIndices[r]];
                        e[this.body.nodeIndices[r]] = {
                            x: Math.round(s.x),
                            y: Math.round(s.y)
                        };
                    }
                    return e;
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    if (null == t) throw new TypeError("No id was specified for getPosition method.");
                    if (null == this.body.nodes[t]) throw new ReferenceError("NodeId provided for getPosition does not exist. Provided: ".concat(t));
                    return {
                        x: Math.round(this.body.nodes[t].x),
                        y: Math.round(this.body.nodes[t].y)
                    };
                }
            },
            {
                key: "storePositions",
                value: function() {
                    var t, e = [], i = this.body.data.nodes.getDataSet(), o = oE(i.get());
                    try {
                        for(o.s(); !(t = o.n()).done;){
                            var n = t.value, r = n.id, s = this.body.nodes[r], a = Math.round(s.x), h = Math.round(s.y);
                            n.x === a && n.y === h || e.push({
                                id: r,
                                x: a,
                                y: h
                            });
                        }
                    } catch (t) {
                        o.e(t);
                    } finally{
                        o.f();
                    }
                    i.update(e);
                }
            },
            {
                key: "getBoundingBox",
                value: function(t) {
                    if (void 0 !== this.body.nodes[t]) return this.body.nodes[t].shape.boundingBox;
                }
            },
            {
                key: "getConnectedNodes",
                value: function(t, e) {
                    var i = [];
                    if (void 0 !== this.body.nodes[t]) for(var o = this.body.nodes[t], n = {}, r = 0; r < o.edges.length; r++){
                        var s = o.edges[r];
                        "to" !== e && s.toId == o.id ? void 0 === n[s.fromId] && (i.push(s.fromId), n[s.fromId] = !0) : "from" !== e && s.fromId == o.id && void 0 === n[s.toId] && (i.push(s.toId), n[s.toId] = !0);
                    }
                    return i;
                }
            },
            {
                key: "getConnectedEdges",
                value: function(t) {
                    var e = [];
                    if (void 0 !== this.body.nodes[t]) for(var i = this.body.nodes[t], o = 0; o < i.edges.length; o++)e.push(i.edges[o].id);
                    else console.error("NodeId provided for getConnectedEdges does not exist. Provided: ", t);
                    return e;
                }
            },
            {
                key: "moveNode",
                value: function(t, e, i) {
                    var o = this;
                    void 0 !== this.body.nodes[t] ? (this.body.nodes[t].x = Number(e), this.body.nodes[t].y = Number(i), vg(function() {
                        o.body.emitter.emit("startSimulation");
                    }, 0)) : console.error("Node id supplied to moveNode does not exist. Provided: ", t);
                }
            }
        ]), t;
    }(), sE = Jt, aE = B, hE = et, dE = oi, lE = function(t) {
        return void 0 !== t && (sE(t, "value") || sE(t, "writable"));
    }, cE = M, uE = Tr;
    Mi({
        target: "Reflect",
        stat: !0
    }, {
        get: function t(e, i) {
            var o, n, r = arguments.length < 3 ? e : arguments[2];
            return dE(e) === r ? e[i] : (o = cE.f(e, i)) ? lE(o) ? o.value : void 0 === o.get ? void 0 : aE(o.get, r) : hE(n = uE(e)) ? t(n, i, r) : void 0;
        }
    });
    var fE = o(it.Reflect.get), pE = o(Uk);
    function vE() {
        var t;
        "undefined" != typeof Reflect && fE ? vE = dx(t = fE).call(t) : vE = function(t, e, i) {
            var o = function(t, e) {
                for(; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = px(t)););
                return t;
            }(t, e);
            if (o) {
                var n = pE(o, e);
                return n.get ? n.get.call(arguments.length < 3 ? t : i) : n.value;
            }
        };
        return vE.apply(this, arguments);
    }
    var gE = Mi, yE = Math.hypot, mE = Math.abs, bE = Math.sqrt;
    gE({
        target: "Math",
        stat: !0,
        arity: 2,
        forced: !!yE && yE(1 / 0, NaN) !== 1 / 0
    }, {
        hypot: function(t, e) {
            for(var i, o, n = 0, r = 0, s = arguments.length, a = 0; r < s;)a < (i = mE(arguments[r++])) ? (n = n * (o = a / i) * o + 1, a = i) : n += i > 0 ? (o = i / a) * o : i;
            return a === 1 / 0 ? 1 / 0 : a * bE(n);
        }
    });
    var wE = o(it.Math.hypot);
    function kE(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var _E = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "transform",
                value: function(t, e) {
                    Of(t) || (t = [
                        t
                    ]);
                    for(var i = e.point.x, o = e.point.y, n = e.angle, r = e.length, s = 0; s < t.length; ++s){
                        var a = t[s], h = a.x * Math.cos(n) - a.y * Math.sin(n), d = a.x * Math.sin(n) + a.y * Math.cos(n);
                        a.x = i + r * h, a.y = o + r * d;
                    }
                }
            },
            {
                key: "drawPath",
                value: function(t, e) {
                    t.beginPath(), t.moveTo(e[0].x, e[0].y);
                    for(var i = 1; i < e.length; ++i)t.lineTo(e[i].x, e[i].y);
                    t.closePath();
                }
            }
        ]), t;
    }(), xE = function(t) {
        cx(i, t);
        var e = kE(i);
        function i() {
            return vh(this, i), e.apply(this, arguments);
        }
        return wu(i, null, [
            {
                key: "draw",
                value: function(t, e) {
                    if (e.image) {
                        t.save(), t.translate(e.point.x, e.point.y), t.rotate(Math.PI / 2 + e.angle);
                        var i = null != e.imageWidth ? e.imageWidth : e.image.width, o = null != e.imageHeight ? e.imageHeight : e.image.height;
                        e.image.drawImageAtPosition(t, 1, -i / 2, 0, i, o), t.restore();
                    }
                    return !1;
                }
            }
        ]), i;
    }(_E), EE = function(t) {
        cx(i, t);
        var e = kE(i);
        function i() {
            return vh(this, i), e.apply(this, arguments);
        }
        return wu(i, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: 0
                        },
                        {
                            x: -1,
                            y: .3
                        },
                        {
                            x: -0.9,
                            y: 0
                        },
                        {
                            x: -1,
                            y: -0.3
                        }
                    ];
                    return _E.transform(i, e), _E.drawPath(t, i), !0;
                }
            }
        ]), i;
    }(_E), OE = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: -1,
                            y: 0
                        },
                        {
                            x: 0,
                            y: .3
                        },
                        {
                            x: -0.4,
                            y: 0
                        },
                        {
                            x: 0,
                            y: -0.3
                        }
                    ];
                    return _E.transform(i, e), _E.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), CE = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = {
                        x: -0.4,
                        y: 0
                    };
                    _E.transform(i, e), t.strokeStyle = t.fillStyle, t.fillStyle = "rgba(0, 0, 0, 0)";
                    var o = Math.PI, n = e.angle - o / 2, r = e.angle + o / 2;
                    return t.beginPath(), t.arc(i.x, i.y, .4 * e.length, n, r, !1), t.stroke(), !0;
                }
            }
        ]), t;
    }(), SE = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = {
                        x: -0.3,
                        y: 0
                    };
                    _E.transform(i, e), t.strokeStyle = t.fillStyle, t.fillStyle = "rgba(0, 0, 0, 0)";
                    var o = Math.PI, n = e.angle + o / 2, r = e.angle + 3 * o / 2;
                    return t.beginPath(), t.arc(i.x, i.y, .4 * e.length, n, r, !1), t.stroke(), !0;
                }
            }
        ]), t;
    }(), TE = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: .02,
                            y: 0
                        },
                        {
                            x: -1,
                            y: .3
                        },
                        {
                            x: -1,
                            y: -0.3
                        }
                    ];
                    return _E.transform(i, e), _E.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), ME = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: .3
                        },
                        {
                            x: 0,
                            y: -0.3
                        },
                        {
                            x: -1,
                            y: 0
                        }
                    ];
                    return _E.transform(i, e), _E.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), PE = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = {
                        x: -0.4,
                        y: 0
                    };
                    return _E.transform(i, e), Vo(t, i.x, i.y, .4 * e.length), !0;
                }
            }
        ]), t;
    }(), DE = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: .5
                        },
                        {
                            x: 0,
                            y: -0.5
                        },
                        {
                            x: -0.15,
                            y: -0.5
                        },
                        {
                            x: -0.15,
                            y: .5
                        }
                    ];
                    return _E.transform(i, e), _E.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), IE = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: .3
                        },
                        {
                            x: 0,
                            y: -0.3
                        },
                        {
                            x: -0.6,
                            y: -0.3
                        },
                        {
                            x: -0.6,
                            y: .3
                        }
                    ];
                    return _E.transform(i, e), _E.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), BE = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: 0
                        },
                        {
                            x: -0.5,
                            y: -0.3
                        },
                        {
                            x: -1,
                            y: 0
                        },
                        {
                            x: -0.5,
                            y: .3
                        }
                    ];
                    return _E.transform(i, e), _E.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), FE = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: -1,
                            y: .3
                        },
                        {
                            x: -0.5,
                            y: 0
                        },
                        {
                            x: -1,
                            y: -0.3
                        },
                        {
                            x: 0,
                            y: 0
                        }
                    ];
                    return _E.transform(i, e), _E.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), zE = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i;
                    switch(e.type && (i = e.type.toLowerCase()), i){
                        case "image":
                            return xE.draw(t, e);
                        case "circle":
                            return PE.draw(t, e);
                        case "box":
                            return IE.draw(t, e);
                        case "crow":
                            return OE.draw(t, e);
                        case "curve":
                            return CE.draw(t, e);
                        case "diamond":
                            return BE.draw(t, e);
                        case "inv_curve":
                            return SE.draw(t, e);
                        case "triangle":
                            return TE.draw(t, e);
                        case "inv_triangle":
                            return ME.draw(t, e);
                        case "bar":
                            return DE.draw(t, e);
                        case "vee":
                            return FE.draw(t, e);
                        default:
                            return EE.draw(t, e);
                    }
                }
            }
        ]), t;
    }();
    function NE(t, e) {
        var i = zf(t);
        if (Nk) {
            var o = Nk(t);
            e && (o = lv(o).call(o, function(e) {
                return Yk(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function AE(t) {
        for(var e = 1; e < arguments.length; e++){
            var i, o, n = null != arguments[e] ? arguments[e] : {};
            e % 2 ? Qf(i = NE(Object(n), !0)).call(i, function(e) {
                s_(t, e, n[e]);
            }) : Zk ? n_(t, Zk(n)) : Qf(o = NE(Object(n))).call(o, function(e) {
                r_(t, e, Yk(n, e));
            });
        }
        return t;
    }
    var RE = function() {
        function t(e, i, o) {
            vh(this, t), this._body = i, this._labelModule = o, this.color = {}, this.colorDirty = !0, this.hoverWidth = 1.5, this.selectionWidth = 2, this.setOptions(e), this.fromPoint = this.from, this.toPoint = this.to;
        }
        return wu(t, [
            {
                key: "connect",
                value: function() {
                    this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to];
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return !1;
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t, this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], this.id = this.options.id;
                }
            },
            {
                key: "drawLine",
                value: function(t, e, i, o) {
                    var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.getViaNode();
                    t.strokeStyle = this.getColor(t, e), t.lineWidth = e.width, !1 !== e.dashes ? this._drawDashedLine(t, e, n) : this._drawLine(t, e, n);
                }
            },
            {
                key: "_drawLine",
                value: function(t, e, i, o, n) {
                    if (this.from != this.to) this._line(t, e, i, o, n);
                    else {
                        var r = df(this._getCircleData(t), 3), s = r[0], a = r[1], h = r[2];
                        this._circle(t, e, s, a, h);
                    }
                }
            },
            {
                key: "_drawDashedLine",
                value: function(t, e, i, o, n) {
                    t.lineCap = "round";
                    var r = Of(e.dashes) ? e.dashes : [
                        5,
                        5
                    ];
                    if (void 0 !== t.setLineDash) {
                        if (t.save(), t.setLineDash(r), t.lineDashOffset = 0, this.from != this.to) this._line(t, e, i);
                        else {
                            var s = df(this._getCircleData(t), 3), a = s[0], h = s[1], d = s[2];
                            this._circle(t, e, a, h, d);
                        }
                        t.setLineDash([
                            0
                        ]), t.lineDashOffset = 0, t.restore();
                    } else {
                        if (this.from != this.to) Xo(t, this.from.x, this.from.y, this.to.x, this.to.y, r);
                        else {
                            var l = df(this._getCircleData(t), 3), c = l[0], u = l[1], f = l[2];
                            this._circle(t, e, c, u, f);
                        }
                        this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
                    }
                }
            },
            {
                key: "findBorderPosition",
                value: function(t, e, i) {
                    return this.from != this.to ? this._findBorderPosition(t, e, i) : this._findBorderPositionCircle(t, e, i);
                }
            },
            {
                key: "findBorderPositions",
                value: function(t) {
                    if (this.from != this.to) return {
                        from: this._findBorderPosition(this.from, t),
                        to: this._findBorderPosition(this.to, t)
                    };
                    var e, i = df(mf(e = this._getCircleData(t)).call(e, 0, 2), 2), o = i[0], n = i[1];
                    return {
                        from: this._findBorderPositionCircle(this.from, t, {
                            x: o,
                            y: n,
                            low: .25,
                            high: .6,
                            direction: -1
                        }),
                        to: this._findBorderPositionCircle(this.from, t, {
                            x: o,
                            y: n,
                            low: .6,
                            high: .8,
                            direction: 1
                        })
                    };
                }
            },
            {
                key: "_getCircleData",
                value: function(t) {
                    var e = this.options.selfReference.size;
                    void 0 !== t && void 0 === this.from.shape.width && this.from.shape.resize(t);
                    var i = S_(t, this.options.selfReference.angle, e, this.from);
                    return [
                        i.x,
                        i.y,
                        e
                    ];
                }
            },
            {
                key: "_pointOnCircle",
                value: function(t, e, i, o) {
                    var n = 2 * o * Math.PI;
                    return {
                        x: t + i * Math.cos(n),
                        y: e - i * Math.sin(n)
                    };
                }
            },
            {
                key: "_findBorderPositionCircle",
                value: function(t, e, i) {
                    var o, n = i.x, r = i.y, s = i.low, a = i.high, h = i.direction, d = this.options.selfReference.size, l = .5 * (s + a), c = 0;
                    !0 === this.options.arrowStrikethrough && (-1 === h ? c = this.options.endPointOffset.from : 1 === h && (c = this.options.endPointOffset.to));
                    var u = 0;
                    do {
                        l = .5 * (s + a), o = this._pointOnCircle(n, r, d, l);
                        var f = Math.atan2(t.y - o.y, t.x - o.x), p = t.distanceToBorder(e, f) + c - Math.sqrt(Math.pow(o.x - t.x, 2) + Math.pow(o.y - t.y, 2));
                        if (Math.abs(p) < .05) break;
                        p > 0 ? h > 0 ? s = l : a = l : h > 0 ? a = l : s = l, ++u;
                    }while (s <= a && u < 10);
                    return AE(AE({}, o), {}, {
                        t: l
                    });
                }
            },
            {
                key: "getLineWidth",
                value: function(t, e) {
                    return !0 === t ? Math.max(this.selectionWidth, .3 / this._body.view.scale) : !0 === e ? Math.max(this.hoverWidth, .3 / this._body.view.scale) : Math.max(this.options.width, .3 / this._body.view.scale);
                }
            },
            {
                key: "getColor",
                value: function(t, e) {
                    if (!1 !== e.inheritsColor) {
                        if ("both" === e.inheritsColor && this.from.id !== this.to.id) {
                            var i = t.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y), o = this.from.options.color.highlight.border, n = this.to.options.color.highlight.border;
                            return !1 === this.from.selected && !1 === this.to.selected ? (o = Vm(this.from.options.color.border, e.opacity), n = Vm(this.to.options.color.border, e.opacity)) : !0 === this.from.selected && !1 === this.to.selected ? n = this.to.options.color.border : !1 === this.from.selected && !0 === this.to.selected && (o = this.from.options.color.border), i.addColorStop(0, o), i.addColorStop(1, n), i;
                        }
                        return "to" === e.inheritsColor ? Vm(this.to.options.color.border, e.opacity) : Vm(this.from.options.color.border, e.opacity);
                    }
                    return Vm(e.color, e.opacity);
                }
            },
            {
                key: "_circle",
                value: function(t, e, i, o, n) {
                    this.enableShadow(t, e);
                    var r = 0, s = 2 * Math.PI;
                    if (!this.options.selfReference.renderBehindTheNode) {
                        var a = this.options.selfReference.angle, h = this.options.selfReference.angle + Math.PI, d = this._findBorderPositionCircle(this.from, t, {
                            x: i,
                            y: o,
                            low: a,
                            high: h,
                            direction: -1
                        }), l = this._findBorderPositionCircle(this.from, t, {
                            x: i,
                            y: o,
                            low: a,
                            high: h,
                            direction: 1
                        });
                        r = Math.atan2(d.y - o, d.x - i), s = Math.atan2(l.y - o, l.x - i);
                    }
                    t.beginPath(), t.arc(i, o, n, r, s, !1), t.stroke(), this.disableShadow(t, e);
                }
            },
            {
                key: "getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    if (this.from != this.to) return this._getDistanceToEdge(t, e, i, o, n, r);
                    var s = df(this._getCircleData(void 0), 3), a = s[0], h = s[1], d = s[2], l = a - n, c = h - r;
                    return Math.abs(Math.sqrt(l * l + c * c) - d);
                }
            },
            {
                key: "_getDistanceToLine",
                value: function(t, e, i, o, n, r) {
                    var s = i - t, a = o - e, h = ((n - t) * s + (r - e) * a) / (s * s + a * a);
                    h > 1 ? h = 1 : h < 0 && (h = 0);
                    var d = t + h * s - n, l = e + h * a - r;
                    return Math.sqrt(d * d + l * l);
                }
            },
            {
                key: "getArrowData",
                value: function(t, e, i, o, n, r) {
                    var s, a, h, d, l, c, u, f = r.width;
                    "from" === e ? (h = this.from, d = this.to, l = r.fromArrowScale < 0, c = Math.abs(r.fromArrowScale), u = r.fromArrowType) : "to" === e ? (h = this.to, d = this.from, l = r.toArrowScale < 0, c = Math.abs(r.toArrowScale), u = r.toArrowType) : (h = this.to, d = this.from, l = r.middleArrowScale < 0, c = Math.abs(r.middleArrowScale), u = r.middleArrowType);
                    var p = 15 * c + 3 * f;
                    if (h != d) {
                        var v = p / wE(h.x - d.x, h.y - d.y);
                        if ("middle" !== e) {
                            if (!0 === this.options.smooth.enabled) {
                                var g = this._findBorderPosition(h, t, {
                                    via: i
                                }), y = this.getPoint(g.t + v * ("from" === e ? 1 : -1), i);
                                s = Math.atan2(g.y - y.y, g.x - y.x), a = g;
                            } else s = Math.atan2(h.y - d.y, h.x - d.x), a = this._findBorderPosition(h, t);
                        } else {
                            var m = (l ? -v : v) / 2, b = this.getPoint(.5 + m, i), w = this.getPoint(.5 - m, i);
                            s = Math.atan2(b.y - w.y, b.x - w.x), a = this.getPoint(.5, i);
                        }
                    } else {
                        var k = df(this._getCircleData(t), 3), _ = k[0], x = k[1], E = k[2];
                        if ("from" === e) {
                            var O = this.options.selfReference.angle, C = this.options.selfReference.angle + Math.PI, S = this._findBorderPositionCircle(this.from, t, {
                                x: _,
                                y: x,
                                low: O,
                                high: C,
                                direction: -1
                            });
                            s = -2 * S.t * Math.PI + 1.5 * Math.PI + .1 * Math.PI, a = S;
                        } else if ("to" === e) {
                            var T = this.options.selfReference.angle, M = this.options.selfReference.angle + Math.PI, P = this._findBorderPositionCircle(this.from, t, {
                                x: _,
                                y: x,
                                low: T,
                                high: M,
                                direction: 1
                            });
                            s = -2 * P.t * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI, a = P;
                        } else {
                            var D = this.options.selfReference.angle / (2 * Math.PI);
                            a = this._pointOnCircle(_, x, E, D), s = -2 * D * Math.PI + 1.5 * Math.PI + .1 * Math.PI;
                        }
                    }
                    return {
                        point: a,
                        core: {
                            x: a.x - .9 * p * Math.cos(s),
                            y: a.y - .9 * p * Math.sin(s)
                        },
                        angle: s,
                        length: p,
                        type: u
                    };
                }
            },
            {
                key: "drawArrowHead",
                value: function(t, e, i, o, n) {
                    t.strokeStyle = this.getColor(t, e), t.fillStyle = t.strokeStyle, t.lineWidth = e.width, zE.draw(t, n) && (this.enableShadow(t, e), Cg(t).call(t), this.disableShadow(t, e));
                }
            },
            {
                key: "enableShadow",
                value: function(t, e) {
                    !0 === e.shadow && (t.shadowColor = e.shadowColor, t.shadowBlur = e.shadowSize, t.shadowOffsetX = e.shadowX, t.shadowOffsetY = e.shadowY);
                }
            },
            {
                key: "disableShadow",
                value: function(t, e) {
                    !0 === e.shadow && (t.shadowColor = "rgba(0,0,0,0)", t.shadowBlur = 0, t.shadowOffsetX = 0, t.shadowOffsetY = 0);
                }
            },
            {
                key: "drawBackground",
                value: function(t, e) {
                    if (!1 !== e.background) {
                        var i = {
                            strokeStyle: t.strokeStyle,
                            lineWidth: t.lineWidth,
                            dashes: t.dashes
                        };
                        t.strokeStyle = e.backgroundColor, t.lineWidth = e.backgroundSize, this.setStrokeDashed(t, e.backgroundDashes), t.stroke(), t.strokeStyle = i.strokeStyle, t.lineWidth = i.lineWidth, t.dashes = i.dashes, this.setStrokeDashed(t, e.dashes);
                    }
                }
            },
            {
                key: "setStrokeDashed",
                value: function(t, e) {
                    if (!1 !== e) {
                        if (void 0 !== t.setLineDash) {
                            var i = Of(e) ? e : [
                                5,
                                5
                            ];
                            t.setLineDash(i);
                        } else console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
                    } else void 0 !== t.setLineDash ? t.setLineDash([]) : console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
                }
            }
        ]), t;
    }();
    function jE(t, e) {
        var i = zf(t);
        if (Nk) {
            var o = Nk(t);
            e && (o = lv(o).call(o, function(e) {
                return Yk(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function LE(t) {
        for(var e = 1; e < arguments.length; e++){
            var i, o, n = null != arguments[e] ? arguments[e] : {};
            e % 2 ? Qf(i = jE(Object(n), !0)).call(i, function(e) {
                s_(t, e, n[e]);
            }) : Zk ? n_(t, Zk(n)) : Qf(o = jE(Object(n))).call(o, function(e) {
                r_(t, e, Yk(n, e));
            });
        }
        return t;
    }
    function HE(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var WE = function(t) {
        cx(i, t);
        var e = HE(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "_findBorderPositionBezier",
                value: function(t, e) {
                    var i, o, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this._getViaCoordinates(), r = !1, s = 1, a = 0, h = this.to, d = this.options.endPointOffset ? this.options.endPointOffset.to : 0;
                    t.id === this.from.id && (h = this.from, r = !0, d = this.options.endPointOffset ? this.options.endPointOffset.from : 0), !1 === this.options.arrowStrikethrough && (d = 0);
                    var l = 0;
                    do {
                        o = .5 * (a + s), i = this.getPoint(o, n);
                        var c = Math.atan2(h.y - i.y, h.x - i.x), u = h.distanceToBorder(e, c) + d - Math.sqrt(Math.pow(i.x - h.x, 2) + Math.pow(i.y - h.y, 2));
                        if (Math.abs(u) < .2) break;
                        u < 0 ? !1 === r ? a = o : s = o : !1 === r ? s = o : a = o, ++l;
                    }while (a <= s && l < 10);
                    return LE(LE({}, i), {}, {
                        t: o
                    });
                }
            },
            {
                key: "_getDistanceToBezierEdge",
                value: function(t, e, i, o, n, r, s) {
                    var a, h, d, l, c, u = 1e9, f = t, p = e;
                    for(h = 1; h < 10; h++)d = .1 * h, l = Math.pow(1 - d, 2) * t + 2 * d * (1 - d) * s.x + Math.pow(d, 2) * i, c = Math.pow(1 - d, 2) * e + 2 * d * (1 - d) * s.y + Math.pow(d, 2) * o, h > 0 && (u = (a = this._getDistanceToLine(f, p, l, c, n, r)) < u ? a : u), f = l, p = c;
                    return u;
                }
            },
            {
                key: "_bezierCurve",
                value: function(t, e, i, o) {
                    t.beginPath(), t.moveTo(this.fromPoint.x, this.fromPoint.y), null != i && null != i.x ? null != o && null != o.x ? t.bezierCurveTo(i.x, i.y, o.x, o.y, this.toPoint.x, this.toPoint.y) : t.quadraticCurveTo(i.x, i.y, this.toPoint.x, this.toPoint.y) : t.lineTo(this.toPoint.x, this.toPoint.y), this.drawBackground(t, e), this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            }
        ]), i;
    }(RE);
    function VE(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var qE = function(t) {
        cx(i, t);
        var e = VE(i);
        function i(t, o, n) {
            var r;
            return vh(this, i), (r = e.call(this, t, o, n)).via = r.via, r._boundFunction = function() {
                r.positionBezierNode();
            }, r._body.emitter.on("_repositionBezierNodes", r._boundFunction), r;
        }
        return wu(i, [
            {
                key: "setOptions",
                value: function(t) {
                    vE(px(i.prototype), "setOptions", this).call(this, t);
                    var e = !1;
                    this.options.physics !== t.physics && (e = !0), this.options = t, this.id = this.options.id, this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], this.setupSupportNode(), this.connect(), !0 === e && (this.via.setOptions({
                        physics: this.options.physics
                    }), this.positionBezierNode());
                }
            },
            {
                key: "connect",
                value: function() {
                    this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], void 0 === this.from || void 0 === this.to || !1 === this.options.physics || this.from.id === this.to.id ? this.via.setOptions({
                        physics: !1
                    }) : this.via.setOptions({
                        physics: !0
                    });
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return this._body.emitter.off("_repositionBezierNodes", this._boundFunction), void 0 !== this.via && (delete this._body.nodes[this.via.id], this.via = void 0, !0);
                }
            },
            {
                key: "setupSupportNode",
                value: function() {
                    if (void 0 === this.via) {
                        var t = "edgeId:" + this.id, e = this._body.functions.createNode({
                            id: t,
                            shape: "circle",
                            physics: !0,
                            hidden: !0
                        });
                        this._body.nodes[t] = e, this.via = e, this.via.parentEdgeId = this.id, this.positionBezierNode();
                    }
                }
            },
            {
                key: "positionBezierNode",
                value: function() {
                    void 0 !== this.via && void 0 !== this.from && void 0 !== this.to ? (this.via.x = .5 * (this.from.x + this.to.x), this.via.y = .5 * (this.from.y + this.to.y)) : void 0 !== this.via && (this.via.x = 0, this.via.y = 0);
                }
            },
            {
                key: "_line",
                value: function(t, e, i) {
                    this._bezierCurve(t, e, i);
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    return this.via;
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this.via;
                }
            },
            {
                key: "getPoint",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.via;
                    if (this.from === this.to) {
                        var i = df(this._getCircleData(), 3), o = i[0], n = i[1], r = i[2], s = 2 * Math.PI * (1 - t);
                        return {
                            x: o + r * Math.sin(s),
                            y: n + r - r * (1 - Math.cos(s))
                        };
                    }
                    return {
                        x: Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * e.x + Math.pow(t, 2) * this.toPoint.x,
                        y: Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * e.y + Math.pow(t, 2) * this.toPoint.y
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    return this._findBorderPositionBezier(t, e, this.via);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    return this._getDistanceToBezierEdge(t, e, i, o, n, r, this.via);
                }
            }
        ]), i;
    }(WE);
    function UE(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var YE = function(t) {
        cx(i, t);
        var e = UE(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "_line",
                value: function(t, e, i) {
                    this._bezierCurve(t, e, i);
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    var t, e, i = this.options.smooth.roundness, o = this.options.smooth.type, n = Math.abs(this.from.x - this.to.x), r = Math.abs(this.from.y - this.to.y);
                    if ("discrete" === o || "diagonalCross" === o) {
                        var s, a;
                        s = a = n <= r ? i * r : i * n, this.from.x > this.to.x && (s = -s), this.from.y >= this.to.y && (a = -a);
                        var h = this.from.x + s, d = this.from.y + a;
                        return "discrete" === o && (n <= r ? h = n < i * r ? this.from.x : h : d = r < i * n ? this.from.y : d), {
                            x: h,
                            y: d
                        };
                    }
                    if ("straightCross" === o) {
                        var l = (1 - i) * n, c = (1 - i) * r;
                        return n <= r ? (l = 0, this.from.y < this.to.y && (c = -c)) : (this.from.x < this.to.x && (l = -l), c = 0), {
                            x: this.to.x + l,
                            y: this.to.y + c
                        };
                    }
                    if ("horizontal" === o) {
                        var u = (1 - i) * n;
                        return this.from.x < this.to.x && (u = -u), {
                            x: this.to.x + u,
                            y: this.from.y
                        };
                    }
                    if ("vertical" === o) {
                        var f = (1 - i) * r;
                        return this.from.y < this.to.y && (f = -f), {
                            x: this.from.x,
                            y: this.to.y + f
                        };
                    }
                    if ("curvedCW" === o) {
                        n = this.to.x - this.from.x, r = this.from.y - this.to.y;
                        var p = Math.sqrt(n * n + r * r), v = Math.PI, g = (Math.atan2(r, n) + (.5 * i + .5) * v) % (2 * v);
                        return {
                            x: this.from.x + (.5 * i + .5) * p * Math.sin(g),
                            y: this.from.y + (.5 * i + .5) * p * Math.cos(g)
                        };
                    }
                    if ("curvedCCW" === o) {
                        n = this.to.x - this.from.x, r = this.from.y - this.to.y;
                        var y = Math.sqrt(n * n + r * r), m = Math.PI, b = (Math.atan2(r, n) + (.5 * -i + .5) * m) % (2 * m);
                        return {
                            x: this.from.x + (.5 * i + .5) * y * Math.sin(b),
                            y: this.from.y + (.5 * i + .5) * y * Math.cos(b)
                        };
                    }
                    t = e = n <= r ? i * r : i * n, this.from.x > this.to.x && (t = -t), this.from.y >= this.to.y && (e = -e);
                    var w = this.from.x + t, k = this.from.y + e;
                    return n <= r ? w = this.from.x <= this.to.x ? this.to.x < w ? this.to.x : w : this.to.x > w ? this.to.x : w : k = this.from.y >= this.to.y ? this.to.y > k ? this.to.y : k : this.to.y < k ? this.to.y : k, {
                        x: w,
                        y: k
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    return this._findBorderPositionBezier(t, e, i.via);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    var s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : this._getViaCoordinates();
                    return this._getDistanceToBezierEdge(t, e, i, o, n, r, s);
                }
            },
            {
                key: "getPoint",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._getViaCoordinates(), i = t;
                    return {
                        x: Math.pow(1 - i, 2) * this.fromPoint.x + 2 * i * (1 - i) * e.x + Math.pow(i, 2) * this.toPoint.x,
                        y: Math.pow(1 - i, 2) * this.fromPoint.y + 2 * i * (1 - i) * e.y + Math.pow(i, 2) * this.toPoint.y
                    };
                }
            }
        ]), i;
    }(WE);
    function XE(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var KE = function(t) {
        cx(i, t);
        var e = XE(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "_getDistanceToBezierEdge2",
                value: function(t, e, i, o, n, r, s, a) {
                    for(var h = 1e9, d = t, l = e, c = [
                        0,
                        0,
                        0,
                        0
                    ], u = 1; u < 10; u++){
                        var f = .1 * u;
                        c[0] = Math.pow(1 - f, 3), c[1] = 3 * f * Math.pow(1 - f, 2), c[2] = 3 * Math.pow(f, 2) * (1 - f), c[3] = Math.pow(f, 3);
                        var p = c[0] * t + c[1] * s.x + c[2] * a.x + c[3] * i, v = c[0] * e + c[1] * s.y + c[2] * a.y + c[3] * o;
                        if (u > 0) {
                            var g = this._getDistanceToLine(d, l, p, v, n, r);
                            h = g < h ? g : h;
                        }
                        d = p, l = v;
                    }
                    return h;
                }
            }
        ]), i;
    }(WE);
    function GE(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var $E = function(t) {
        cx(i, t);
        var e = GE(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "_line",
                value: function(t, e, i) {
                    var o = i[0], n = i[1];
                    this._bezierCurve(t, e, o, n);
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    var t, e, i, o, n = this.from.x - this.to.x, r = this.from.y - this.to.y, s = this.options.smooth.roundness;
                    return (Math.abs(n) > Math.abs(r) || !0 === this.options.smooth.forceDirection || "horizontal" === this.options.smooth.forceDirection) && "vertical" !== this.options.smooth.forceDirection ? (e = this.from.y, o = this.to.y, t = this.from.x - s * n, i = this.to.x + s * n) : (e = this.from.y - s * r, o = this.to.y + s * r, t = this.from.x, i = this.to.x), [
                        {
                            x: t,
                            y: e
                        },
                        {
                            x: i,
                            y: o
                        }
                    ];
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    return this._findBorderPositionBezier(t, e);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    var s = df(arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : this._getViaCoordinates(), 2), a = s[0], h = s[1];
                    return this._getDistanceToBezierEdge2(t, e, i, o, n, r, a, h);
                }
            },
            {
                key: "getPoint",
                value: function(t) {
                    var e = df(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._getViaCoordinates(), 2), i = e[0], o = e[1], n = t, r = [
                        Math.pow(1 - n, 3),
                        3 * n * Math.pow(1 - n, 2),
                        3 * Math.pow(n, 2) * (1 - n),
                        Math.pow(n, 3)
                    ];
                    return {
                        x: r[0] * this.fromPoint.x + r[1] * i.x + r[2] * o.x + r[3] * this.toPoint.x,
                        y: r[0] * this.fromPoint.y + r[1] * i.y + r[2] * o.y + r[3] * this.toPoint.y
                    };
                }
            }
        ]), i;
    }(KE);
    function ZE(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var QE = function(t) {
        cx(i, t);
        var e = ZE(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "_line",
                value: function(t, e) {
                    t.beginPath(), t.moveTo(this.fromPoint.x, this.fromPoint.y), t.lineTo(this.toPoint.x, this.toPoint.y), this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
                }
            },
            {
                key: "getViaNode",
                value: function() {}
            },
            {
                key: "getPoint",
                value: function(t) {
                    return {
                        x: (1 - t) * this.fromPoint.x + t * this.toPoint.x,
                        y: (1 - t) * this.fromPoint.y + t * this.toPoint.y
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    var i = this.to, o = this.from;
                    t.id === this.from.id && (i = this.from, o = this.to);
                    var n = Math.atan2(i.y - o.y, i.x - o.x), r = i.x - o.x, s = i.y - o.y, a = Math.sqrt(r * r + s * s), h = (a - t.distanceToBorder(e, n)) / a;
                    return {
                        x: (1 - h) * o.x + h * i.x,
                        y: (1 - h) * o.y + h * i.y,
                        t: 0
                    };
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    return this._getDistanceToLine(t, e, i, o, n, r);
                }
            }
        ]), i;
    }(RE), JE = function() {
        function t(e, i, o, n, r) {
            if (vh(this, t), void 0 === i) throw new Error("No body provided");
            this.options = Zm(n), this.globalOptions = n, this.defaultOptions = r, this.body = i, this.imagelist = o, this.id = void 0, this.fromId = void 0, this.toId = void 0, this.selected = !1, this.hover = !1, this.labelDirty = !0, this.baseWidth = this.options.width, this.baseFontSize = this.options.font.size, this.from = void 0, this.to = void 0, this.edgeType = void 0, this.connected = !1, this.labelModule = new W_(this.body, this.options, !0), this.setOptions(e);
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(e) {
                    if (e) {
                        var i = void 0 !== e.physics && this.options.physics !== e.physics || void 0 !== e.hidden && (this.options.hidden || !1) !== (e.hidden || !1) || void 0 !== e.from && this.options.from !== e.from || void 0 !== e.to && this.options.to !== e.to;
                        t.parseOptions(this.options, e, !0, this.globalOptions), void 0 !== e.id && (this.id = e.id), void 0 !== e.from && (this.fromId = e.from), void 0 !== e.to && (this.toId = e.to), void 0 !== e.title && (this.title = e.title), void 0 !== e.value && (e.value = y_(e.value));
                        var o = [
                            e,
                            this.options,
                            this.defaultOptions
                        ];
                        return this.chooser = E_("edge", o), this.updateLabelModule(e), i = this.updateEdgeType() || i, this._setInteractionWidths(), this.connect(), i;
                    }
                }
            },
            {
                key: "getFormattingValues",
                value: function() {
                    var t = !0 === this.options.arrows.to || !0 === this.options.arrows.to.enabled, e = !0 === this.options.arrows.from || !0 === this.options.arrows.from.enabled, i = !0 === this.options.arrows.middle || !0 === this.options.arrows.middle.enabled, o = this.options.color.inherit, n = {
                        toArrow: t,
                        toArrowScale: this.options.arrows.to.scaleFactor,
                        toArrowType: this.options.arrows.to.type,
                        toArrowSrc: this.options.arrows.to.src,
                        toArrowImageWidth: this.options.arrows.to.imageWidth,
                        toArrowImageHeight: this.options.arrows.to.imageHeight,
                        middleArrow: i,
                        middleArrowScale: this.options.arrows.middle.scaleFactor,
                        middleArrowType: this.options.arrows.middle.type,
                        middleArrowSrc: this.options.arrows.middle.src,
                        middleArrowImageWidth: this.options.arrows.middle.imageWidth,
                        middleArrowImageHeight: this.options.arrows.middle.imageHeight,
                        fromArrow: e,
                        fromArrowScale: this.options.arrows.from.scaleFactor,
                        fromArrowType: this.options.arrows.from.type,
                        fromArrowSrc: this.options.arrows.from.src,
                        fromArrowImageWidth: this.options.arrows.from.imageWidth,
                        fromArrowImageHeight: this.options.arrows.from.imageHeight,
                        arrowStrikethrough: this.options.arrowStrikethrough,
                        color: o ? void 0 : this.options.color.color,
                        inheritsColor: o,
                        opacity: this.options.color.opacity,
                        hidden: this.options.hidden,
                        length: this.options.length,
                        shadow: this.options.shadow.enabled,
                        shadowColor: this.options.shadow.color,
                        shadowSize: this.options.shadow.size,
                        shadowX: this.options.shadow.x,
                        shadowY: this.options.shadow.y,
                        dashes: this.options.dashes,
                        width: this.options.width,
                        background: this.options.background.enabled,
                        backgroundColor: this.options.background.color,
                        backgroundSize: this.options.background.size,
                        backgroundDashes: this.options.background.dashes
                    };
                    if (this.selected || this.hover) {
                        if (!0 === this.chooser) {
                            if (this.selected) {
                                var r = this.options.selectionWidth;
                                "function" == typeof r ? n.width = r(n.width) : "number" == typeof r && (n.width += r), n.width = Math.max(n.width, .3 / this.body.view.scale), n.color = this.options.color.highlight, n.shadow = this.options.shadow.enabled;
                            } else if (this.hover) {
                                var s = this.options.hoverWidth;
                                "function" == typeof s ? n.width = s(n.width) : "number" == typeof s && (n.width += s), n.width = Math.max(n.width, .3 / this.body.view.scale), n.color = this.options.color.hover, n.shadow = this.options.shadow.enabled;
                            }
                        } else "function" == typeof this.chooser && (this.chooser(n, this.options.id, this.selected, this.hover), void 0 !== n.color && (n.inheritsColor = !1), !1 === n.shadow && (n.shadowColor === this.options.shadow.color && n.shadowSize === this.options.shadow.size && n.shadowX === this.options.shadow.x && n.shadowY === this.options.shadow.y || (n.shadow = !0)));
                    } else n.shadow = this.options.shadow.enabled, n.width = Math.max(n.width, .3 / this.body.view.scale);
                    return n;
                }
            },
            {
                key: "updateLabelModule",
                value: function(t) {
                    var e = [
                        t,
                        this.options,
                        this.globalOptions,
                        this.defaultOptions
                    ];
                    this.labelModule.update(this.options, e), void 0 !== this.labelModule.baseSize && (this.baseFontSize = this.labelModule.baseSize);
                }
            },
            {
                key: "updateEdgeType",
                value: function() {
                    var t = this.options.smooth, e = !1, i = !0;
                    return void 0 !== this.edgeType && ((this.edgeType instanceof qE && !0 === t.enabled && "dynamic" === t.type || this.edgeType instanceof $E && !0 === t.enabled && "cubicBezier" === t.type || this.edgeType instanceof YE && !0 === t.enabled && "dynamic" !== t.type && "cubicBezier" !== t.type || this.edgeType instanceof QE && !1 === t.type.enabled) && (i = !1), !0 === i && (e = this.cleanup())), !0 === i ? !0 === t.enabled ? "dynamic" === t.type ? (e = !0, this.edgeType = new qE(this.options, this.body, this.labelModule)) : "cubicBezier" === t.type ? this.edgeType = new $E(this.options, this.body, this.labelModule) : this.edgeType = new YE(this.options, this.body, this.labelModule) : this.edgeType = new QE(this.options, this.body, this.labelModule) : this.edgeType.setOptions(this.options), e;
                }
            },
            {
                key: "connect",
                value: function() {
                    this.disconnect(), this.from = this.body.nodes[this.fromId] || void 0, this.to = this.body.nodes[this.toId] || void 0, this.connected = void 0 !== this.from && void 0 !== this.to, !0 === this.connected ? (this.from.attachEdge(this), this.to.attachEdge(this)) : (this.from && this.from.detachEdge(this), this.to && this.to.detachEdge(this)), this.edgeType.connect();
                }
            },
            {
                key: "disconnect",
                value: function() {
                    this.from && (this.from.detachEdge(this), this.from = void 0), this.to && (this.to.detachEdge(this), this.to = void 0), this.connected = !1;
                }
            },
            {
                key: "getTitle",
                value: function() {
                    return this.title;
                }
            },
            {
                key: "isSelected",
                value: function() {
                    return this.selected;
                }
            },
            {
                key: "getValue",
                value: function() {
                    return this.options.value;
                }
            },
            {
                key: "setValueRange",
                value: function(t, e, i) {
                    if (void 0 !== this.options.value) {
                        var o = this.options.scaling.customScalingFunction(t, e, i, this.options.value), n = this.options.scaling.max - this.options.scaling.min;
                        if (!0 === this.options.scaling.label.enabled) {
                            var r = this.options.scaling.label.max - this.options.scaling.label.min;
                            this.options.font.size = this.options.scaling.label.min + o * r;
                        }
                        this.options.width = this.options.scaling.min + o * n;
                    } else this.options.width = this.baseWidth, this.options.font.size = this.baseFontSize;
                    this._setInteractionWidths(), this.updateLabelModule();
                }
            },
            {
                key: "_setInteractionWidths",
                value: function() {
                    "function" == typeof this.options.hoverWidth ? this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width) : this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width, "function" == typeof this.options.selectionWidth ? this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width) : this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
                }
            },
            {
                key: "draw",
                value: function(t) {
                    var e = this.getFormattingValues();
                    if (!e.hidden) {
                        var i = this.edgeType.getViaNode();
                        this.edgeType.drawLine(t, e, this.selected, this.hover, i), this.drawLabel(t, i);
                    }
                }
            },
            {
                key: "drawArrows",
                value: function(t) {
                    var e = this.getFormattingValues();
                    if (!e.hidden) {
                        var i = this.edgeType.getViaNode(), o = {};
                        this.edgeType.fromPoint = this.edgeType.from, this.edgeType.toPoint = this.edgeType.to, e.fromArrow && (o.from = this.edgeType.getArrowData(t, "from", i, this.selected, this.hover, e), !1 === e.arrowStrikethrough && (this.edgeType.fromPoint = o.from.core), e.fromArrowSrc && (o.from.image = this.imagelist.load(e.fromArrowSrc)), e.fromArrowImageWidth && (o.from.imageWidth = e.fromArrowImageWidth), e.fromArrowImageHeight && (o.from.imageHeight = e.fromArrowImageHeight)), e.toArrow && (o.to = this.edgeType.getArrowData(t, "to", i, this.selected, this.hover, e), !1 === e.arrowStrikethrough && (this.edgeType.toPoint = o.to.core), e.toArrowSrc && (o.to.image = this.imagelist.load(e.toArrowSrc)), e.toArrowImageWidth && (o.to.imageWidth = e.toArrowImageWidth), e.toArrowImageHeight && (o.to.imageHeight = e.toArrowImageHeight)), e.middleArrow && (o.middle = this.edgeType.getArrowData(t, "middle", i, this.selected, this.hover, e), e.middleArrowSrc && (o.middle.image = this.imagelist.load(e.middleArrowSrc)), e.middleArrowImageWidth && (o.middle.imageWidth = e.middleArrowImageWidth), e.middleArrowImageHeight && (o.middle.imageHeight = e.middleArrowImageHeight)), e.fromArrow && this.edgeType.drawArrowHead(t, e, this.selected, this.hover, o.from), e.middleArrow && this.edgeType.drawArrowHead(t, e, this.selected, this.hover, o.middle), e.toArrow && this.edgeType.drawArrowHead(t, e, this.selected, this.hover, o.to);
                    }
                }
            },
            {
                key: "drawLabel",
                value: function(t, e) {
                    if (void 0 !== this.options.label) {
                        var i, o = this.from, n = this.to;
                        if (this.labelModule.differentState(this.selected, this.hover) && this.labelModule.getTextSize(t, this.selected, this.hover), o.id != n.id) {
                            this.labelModule.pointToSelf = !1, i = this.edgeType.getPoint(.5, e), t.save();
                            var r = this._getRotation(t);
                            0 != r.angle && (t.translate(r.x, r.y), t.rotate(r.angle)), this.labelModule.draw(t, i.x, i.y, this.selected, this.hover), t.restore();
                        } else {
                            this.labelModule.pointToSelf = !0;
                            var s = S_(t, this.options.selfReference.angle, this.options.selfReference.size, o);
                            i = this._pointOnCircle(s.x, s.y, this.options.selfReference.size, this.options.selfReference.angle), this.labelModule.draw(t, i.x, i.y, this.selected, this.hover);
                        }
                    }
                }
            },
            {
                key: "getItemsOnPoint",
                value: function(t) {
                    var e = [];
                    if (this.labelModule.visible()) {
                        var i = this._getRotation();
                        O_(this.labelModule.getSize(), t, i) && e.push({
                            edgeId: this.id,
                            labelId: 0
                        });
                    }
                    var o = {
                        left: t.x,
                        top: t.y
                    };
                    return this.isOverlappingWith(o) && e.push({
                        edgeId: this.id
                    }), e;
                }
            },
            {
                key: "isOverlappingWith",
                value: function(t) {
                    if (this.connected) {
                        var e = this.from.x, i = this.from.y, o = this.to.x, n = this.to.y, r = t.left, s = t.top;
                        return this.edgeType.getDistanceToEdge(e, i, o, n, r, s) < 10;
                    }
                    return !1;
                }
            },
            {
                key: "_getRotation",
                value: function(t) {
                    var e = this.edgeType.getViaNode(), i = this.edgeType.getPoint(.5, e);
                    void 0 !== t && this.labelModule.calculateLabelSize(t, this.selected, this.hover, i.x, i.y);
                    var o = {
                        x: i.x,
                        y: this.labelModule.size.yLine,
                        angle: 0
                    };
                    if (!this.labelModule.visible()) return o;
                    if ("horizontal" === this.options.font.align) return o;
                    var n = this.from.y - this.to.y, r = this.from.x - this.to.x, s = Math.atan2(n, r);
                    return (s < -1 && r < 0 || s > 0 && r < 0) && (s += Math.PI), o.angle = s, o;
                }
            },
            {
                key: "_pointOnCircle",
                value: function(t, e, i, o) {
                    return {
                        x: t + i * Math.cos(o),
                        y: e - i * Math.sin(o)
                    };
                }
            },
            {
                key: "select",
                value: function() {
                    this.selected = !0;
                }
            },
            {
                key: "unselect",
                value: function() {
                    this.selected = !1;
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return this.edgeType.cleanup();
                }
            },
            {
                key: "remove",
                value: function() {
                    this.cleanup(), this.disconnect(), delete this.body.edges[this.id];
                }
            },
            {
                key: "endPointsValid",
                value: function() {
                    return void 0 !== this.body.nodes[this.fromId] && void 0 !== this.body.nodes[this.toId];
                }
            }
        ], [
            {
                key: "parseOptions",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
                    if (Nm([
                        "endPointOffset",
                        "arrowStrikethrough",
                        "id",
                        "from",
                        "hidden",
                        "hoverWidth",
                        "labelHighlightBold",
                        "length",
                        "line",
                        "opacity",
                        "physics",
                        "scaling",
                        "selectionWidth",
                        "selfReferenceSize",
                        "selfReference",
                        "to",
                        "title",
                        "value",
                        "width",
                        "font",
                        "chosen",
                        "widthConstraint"
                    ], t, e, i), void 0 !== e.endPointOffset && void 0 !== e.endPointOffset.from && (Tk(e.endPointOffset.from) ? t.endPointOffset.from = e.endPointOffset.from : (t.endPointOffset.from = void 0 !== o.endPointOffset.from ? o.endPointOffset.from : 0, console.error("endPointOffset.from is not a valid number"))), void 0 !== e.endPointOffset && void 0 !== e.endPointOffset.to && (Tk(e.endPointOffset.to) ? t.endPointOffset.to = e.endPointOffset.to : (t.endPointOffset.to = void 0 !== o.endPointOffset.to ? o.endPointOffset.to : 0, console.error("endPointOffset.to is not a valid number"))), C_(e.label) ? t.label = e.label : C_(t.label) || (t.label = void 0), Qm(t, e, "smooth", o), Qm(t, e, "shadow", o), Qm(t, e, "background", o), void 0 !== e.dashes && null !== e.dashes ? t.dashes = e.dashes : !0 === i && null === e.dashes && (t.dashes = Yv(o.dashes)), void 0 !== e.scaling && null !== e.scaling ? (void 0 !== e.scaling.min && (t.scaling.min = e.scaling.min), void 0 !== e.scaling.max && (t.scaling.max = e.scaling.max), Qm(t.scaling, e.scaling, "label", o.scaling)) : !0 === i && null === e.scaling && (t.scaling = Yv(o.scaling)), void 0 !== e.arrows && null !== e.arrows) {
                        if ("string" == typeof e.arrows) {
                            var r = e.arrows.toLowerCase();
                            t.arrows.to.enabled = -1 != Vv(r).call(r, "to"), t.arrows.middle.enabled = -1 != Vv(r).call(r, "middle"), t.arrows.from.enabled = -1 != Vv(r).call(r, "from");
                        } else {
                            if ("object" !== gu(e.arrows)) throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + $v(e.arrows));
                            Qm(t.arrows, e.arrows, "to", o.arrows), Qm(t.arrows, e.arrows, "middle", o.arrows), Qm(t.arrows, e.arrows, "from", o.arrows);
                        }
                    } else !0 === i && null === e.arrows && (t.arrows = Yv(o.arrows));
                    if (void 0 !== e.color && null !== e.color) {
                        var s = Im(e.color) ? {
                            color: e.color,
                            highlight: e.color,
                            hover: e.color,
                            inherit: !1,
                            opacity: 1
                        } : e.color, a = t.color;
                        if (n) Rm(a, o.color, !1, i);
                        else for(var h in a)Object.prototype.hasOwnProperty.call(a, h) && delete a[h];
                        if (Im(a)) a.color = a, a.highlight = a, a.hover = a, a.inherit = !1, void 0 === s.opacity && (a.opacity = 1);
                        else {
                            var d = !1;
                            void 0 !== s.color && (a.color = s.color, d = !0), void 0 !== s.highlight && (a.highlight = s.highlight, d = !0), void 0 !== s.hover && (a.hover = s.hover, d = !0), void 0 !== s.inherit && (a.inherit = s.inherit), void 0 !== s.opacity && (a.opacity = Math.min(1, Math.max(0, s.opacity))), !0 === d ? a.inherit = !1 : void 0 === a.inherit && (a.inherit = "from");
                        }
                    } else !0 === i && null === e.color && (t.color = Zm(o.color));
                    !0 === i && null === e.font && (t.font = Zm(o.font)), Object.prototype.hasOwnProperty.call(e, "selfReferenceSize") && (console.warn("The selfReferenceSize property has been deprecated. Please use selfReference property instead. The selfReference can be set like thise selfReference:{size:30, angle:Math.PI / 4}"), t.selfReference.size = e.selfReferenceSize);
                }
            }
        ]), t;
    }(), tO = function() {
        function t(e, i, o) {
            var n, r = this;
            vh(this, t), this.body = e, this.images = i, this.groups = o, this.body.functions.createEdge = Wo(n = this.create).call(n, this), this.edgesListeners = {
                add: function(t, e) {
                    r.add(e.items);
                },
                update: function(t, e) {
                    r.update(e.items);
                },
                remove: function(t, e) {
                    r.remove(e.items);
                }
            }, this.options = {}, this.defaultOptions = {
                arrows: {
                    to: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    },
                    middle: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    },
                    from: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    }
                },
                endPointOffset: {
                    from: 0,
                    to: 0
                },
                arrowStrikethrough: !0,
                color: {
                    color: "#848484",
                    highlight: "#848484",
                    hover: "#848484",
                    inherit: "from",
                    opacity: 1
                },
                dashes: !1,
                font: {
                    color: "#343434",
                    size: 14,
                    face: "arial",
                    background: "none",
                    strokeWidth: 2,
                    strokeColor: "#ffffff",
                    align: "horizontal",
                    multi: !1,
                    vadjust: 0,
                    bold: {
                        mod: "bold"
                    },
                    boldital: {
                        mod: "bold italic"
                    },
                    ital: {
                        mod: "italic"
                    },
                    mono: {
                        mod: "",
                        size: 15,
                        face: "courier new",
                        vadjust: 2
                    }
                },
                hidden: !1,
                hoverWidth: 1.5,
                label: void 0,
                labelHighlightBold: !0,
                length: void 0,
                physics: !0,
                scaling: {
                    min: 1,
                    max: 15,
                    label: {
                        enabled: !0,
                        min: 14,
                        max: 30,
                        maxVisible: 30,
                        drawThreshold: 5
                    },
                    customScalingFunction: function(t, e, i, o) {
                        if (e === t) return .5;
                        var n = 1 / (e - t);
                        return Math.max(0, (o - t) * n);
                    }
                },
                selectionWidth: 1.5,
                selfReference: {
                    size: 20,
                    angle: Math.PI / 4,
                    renderBehindTheNode: !0
                },
                shadow: {
                    enabled: !1,
                    color: "rgba(0,0,0,0.5)",
                    size: 10,
                    x: 5,
                    y: 5
                },
                background: {
                    enabled: !1,
                    color: "rgba(111,111,111,1)",
                    size: 10,
                    dashes: !1
                },
                smooth: {
                    enabled: !0,
                    type: "dynamic",
                    forceDirection: "none",
                    roundness: .5
                },
                title: void 0,
                width: 1,
                value: void 0
            }, Rm(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return wu(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t, e, i = this;
                    this.body.emitter.on("_forceDisableDynamicCurves", function(t) {
                        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                        "dynamic" === t && (t = "continuous");
                        var o = !1;
                        for(var n in i.body.edges)if (Object.prototype.hasOwnProperty.call(i.body.edges, n)) {
                            var r = i.body.edges[n], s = i.body.data.edges.get(n);
                            if (null != s) {
                                var a = s.smooth;
                                void 0 !== a && !0 === a.enabled && "dynamic" === a.type && (void 0 === t ? r.setOptions({
                                    smooth: !1
                                }) : r.setOptions({
                                    smooth: {
                                        type: t
                                    }
                                }), o = !0);
                            }
                        }
                        !0 === e && !0 === o && i.body.emitter.emit("_dataChanged");
                    }), this.body.emitter.on("_dataUpdated", function() {
                        i.reconnectEdges();
                    }), this.body.emitter.on("refreshEdges", Wo(t = this.refresh).call(t, this)), this.body.emitter.on("refresh", Wo(e = this.refresh).call(e, this)), this.body.emitter.on("destroy", function() {
                        Hm(i.edgesListeners, function(t, e) {
                            i.body.data.edges && i.body.data.edges.off(e, t);
                        }), delete i.body.functions.createEdge, delete i.edgesListeners.add, delete i.edgesListeners.update, delete i.edgesListeners.remove, delete i.edgesListeners;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        JE.parseOptions(this.options, t, !0, this.defaultOptions, !0);
                        var e = !1;
                        if (void 0 !== t.smooth) for(var i in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, i) && (e = this.body.edges[i].updateEdgeType() || e);
                        if (void 0 !== t.font) for(var o in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, o) && this.body.edges[o].updateLabelModule();
                        void 0 === t.hidden && void 0 === t.physics && !0 !== e || this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "setData",
                value: function(t) {
                    var i = this, o = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = this.body.data.edges;
                    if (e.isDataViewLike("id", t)) this.body.data.edges = t;
                    else if (Of(t)) this.body.data.edges = new e.DataSet, this.body.data.edges.add(t);
                    else {
                        if (t) throw new TypeError("Array or DataSet expected");
                        this.body.data.edges = new e.DataSet;
                    }
                    if (n && Hm(this.edgesListeners, function(t, e) {
                        n.off(e, t);
                    }), this.body.edges = {}, this.body.data.edges) {
                        Hm(this.edgesListeners, function(t, e) {
                            i.body.data.edges.on(e, t);
                        });
                        var r = this.body.data.edges.getIds();
                        this.add(r, !0);
                    }
                    this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), !1 === o && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "add",
                value: function(t) {
                    for(var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = this.body.edges, o = this.body.data.edges, n = 0; n < t.length; n++){
                        var r = t[n], s = i[r];
                        s && s.disconnect();
                        var a = o.get(r, {
                            showInternalIds: !0
                        });
                        i[r] = this.create(a);
                    }
                    this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), !1 === e && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "update",
                value: function(t) {
                    for(var e = this.body.edges, i = this.body.data.edges, o = !1, n = 0; n < t.length; n++){
                        var r = t[n], s = i.get(r), a = e[r];
                        void 0 !== a ? (a.disconnect(), o = a.setOptions(s) || o, a.connect()) : (this.body.edges[r] = this.create(s), o = !0);
                    }
                    !0 === o ? (this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), this.body.emitter.emit("_dataChanged")) : this.body.emitter.emit("_dataUpdated");
                }
            },
            {
                key: "remove",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if (0 !== t.length) {
                        var i = this.body.edges;
                        Hm(t, function(t) {
                            var e = i[t];
                            void 0 !== e && e.remove();
                        }), e && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "refresh",
                value: function() {
                    var t = this;
                    Hm(this.body.edges, function(e, i) {
                        var o = t.body.data.edges.get(i);
                        void 0 !== o && e.setOptions(o);
                    });
                }
            },
            {
                key: "create",
                value: function(t) {
                    return new JE(t, this.body, this.images, this.options, this.defaultOptions);
                }
            },
            {
                key: "reconnectEdges",
                value: function() {
                    var t, e = this.body.nodes, i = this.body.edges;
                    for(t in e)Object.prototype.hasOwnProperty.call(e, t) && (e[t].edges = []);
                    for(t in i)if (Object.prototype.hasOwnProperty.call(i, t)) {
                        var o = i[t];
                        o.from = null, o.to = null, o.connect();
                    }
                }
            },
            {
                key: "getConnectedNodes",
                value: function(t) {
                    var e = [];
                    if (void 0 !== this.body.edges[t]) {
                        var i = this.body.edges[t];
                        void 0 !== i.fromId && e.push(i.fromId), void 0 !== i.toId && e.push(i.toId);
                    }
                    return e;
                }
            },
            {
                key: "_updateState",
                value: function() {
                    this._addMissingEdges(), this._removeInvalidEdges();
                }
            },
            {
                key: "_removeInvalidEdges",
                value: function() {
                    var t = this, e = [];
                    Hm(this.body.edges, function(i, o) {
                        var n = t.body.nodes[i.toId], r = t.body.nodes[i.fromId];
                        void 0 !== n && !0 === n.isCluster || void 0 !== r && !0 === r.isCluster || void 0 !== n && void 0 !== r || e.push(o);
                    }), this.remove(e, !1);
                }
            },
            {
                key: "_addMissingEdges",
                value: function() {
                    var t = this.body.data.edges;
                    if (null != t) {
                        var e = this.body.edges, i = [];
                        Qf(t).call(t, function(t, o) {
                            void 0 === e[o] && i.push(o);
                        }), this.add(i, !0);
                    }
                }
            }
        ]), t;
    }(), eO = function() {
        function t(e, i, o) {
            vh(this, t), this.body = e, this.physicsBody = i, this.barnesHutTree, this.setOptions(o), this._rng = Em("BARNES HUT SOLVER");
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t, this.thetaInversed = 1 / this.options.theta, this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));
                }
            },
            {
                key: "solve",
                value: function() {
                    if (0 !== this.options.gravitationalConstant && this.physicsBody.physicsNodeIndices.length > 0) {
                        var t, e = this.body.nodes, i = this.physicsBody.physicsNodeIndices, o = i.length, n = this._formBarnesHutTree(e, i);
                        this.barnesHutTree = n;
                        for(var r = 0; r < o; r++)(t = e[i[r]]).options.mass > 0 && this._getForceContributions(n.root, t);
                    }
                }
            },
            {
                key: "_getForceContributions",
                value: function(t, e) {
                    this._getForceContribution(t.children.NW, e), this._getForceContribution(t.children.NE, e), this._getForceContribution(t.children.SW, e), this._getForceContribution(t.children.SE, e);
                }
            },
            {
                key: "_getForceContribution",
                value: function(t, e) {
                    if (t.childrenCount > 0) {
                        var i = t.centerOfMass.x - e.x, o = t.centerOfMass.y - e.y, n = Math.sqrt(i * i + o * o);
                        n * t.calcSize > this.thetaInversed ? this._calculateForces(n, i, o, e, t) : 4 === t.childrenCount ? this._getForceContributions(t, e) : t.children.data.id != e.id && this._calculateForces(n, i, o, e, t);
                    }
                }
            },
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    0 === t && (e = t = .1), this.overlapAvoidanceFactor < 1 && o.shape.radius && (t = Math.max(.1 + this.overlapAvoidanceFactor * o.shape.radius, t - o.shape.radius));
                    var r = this.options.gravitationalConstant * n.mass * o.options.mass / Math.pow(t, 3), s = e * r, a = i * r;
                    this.physicsBody.forces[o.id].x += s, this.physicsBody.forces[o.id].y += a;
                }
            },
            {
                key: "_formBarnesHutTree",
                value: function(t, e) {
                    for(var i, o = e.length, n = t[e[0]].x, r = t[e[0]].y, s = t[e[0]].x, a = t[e[0]].y, h = 1; h < o; h++){
                        var d = t[e[h]], l = d.x, c = d.y;
                        d.options.mass > 0 && (l < n && (n = l), l > s && (s = l), c < r && (r = c), c > a && (a = c));
                    }
                    var u = Math.abs(s - n) - Math.abs(a - r);
                    u > 0 ? (r -= .5 * u, a += .5 * u) : (n += .5 * u, s -= .5 * u);
                    var f = Math.max(1e-5, Math.abs(s - n)), p = .5 * f, v = .5 * (n + s), g = .5 * (r + a), y = {
                        root: {
                            centerOfMass: {
                                x: 0,
                                y: 0
                            },
                            mass: 0,
                            range: {
                                minX: v - p,
                                maxX: v + p,
                                minY: g - p,
                                maxY: g + p
                            },
                            size: f,
                            calcSize: 1 / f,
                            children: {
                                data: null
                            },
                            maxWidth: 0,
                            level: 0,
                            childrenCount: 4
                        }
                    };
                    this._splitBranch(y.root);
                    for(var m = 0; m < o; m++)(i = t[e[m]]).options.mass > 0 && this._placeInTree(y.root, i);
                    return y;
                }
            },
            {
                key: "_updateBranchMass",
                value: function(t, e) {
                    var i = t.centerOfMass, o = t.mass + e.options.mass, n = 1 / o;
                    i.x = i.x * t.mass + e.x * e.options.mass, i.x *= n, i.y = i.y * t.mass + e.y * e.options.mass, i.y *= n, t.mass = o;
                    var r = Math.max(Math.max(e.height, e.radius), e.width);
                    t.maxWidth = t.maxWidth < r ? r : t.maxWidth;
                }
            },
            {
                key: "_placeInTree",
                value: function(t, e, i) {
                    1 == i && void 0 !== i || this._updateBranchMass(t, e);
                    var o, n = t.children.NW.range;
                    o = n.maxX > e.x ? n.maxY > e.y ? "NW" : "SW" : n.maxY > e.y ? "NE" : "SE", this._placeInRegion(t, e, o);
                }
            },
            {
                key: "_placeInRegion",
                value: function(t, e, i) {
                    var o = t.children[i];
                    switch(o.childrenCount){
                        case 0:
                            o.children.data = e, o.childrenCount = 1, this._updateBranchMass(o, e);
                            break;
                        case 1:
                            o.children.data.x === e.x && o.children.data.y === e.y ? (e.x += this._rng(), e.y += this._rng()) : (this._splitBranch(o), this._placeInTree(o, e));
                            break;
                        case 4:
                            this._placeInTree(o, e);
                    }
                }
            },
            {
                key: "_splitBranch",
                value: function(t) {
                    var e = null;
                    1 === t.childrenCount && (e = t.children.data, t.mass = 0, t.centerOfMass.x = 0, t.centerOfMass.y = 0), t.childrenCount = 4, t.children.data = null, this._insertRegion(t, "NW"), this._insertRegion(t, "NE"), this._insertRegion(t, "SW"), this._insertRegion(t, "SE"), null != e && this._placeInTree(t, e);
                }
            },
            {
                key: "_insertRegion",
                value: function(t, e) {
                    var i, o, n, r, s = .5 * t.size;
                    switch(e){
                        case "NW":
                            i = t.range.minX, o = t.range.minX + s, n = t.range.minY, r = t.range.minY + s;
                            break;
                        case "NE":
                            i = t.range.minX + s, o = t.range.maxX, n = t.range.minY, r = t.range.minY + s;
                            break;
                        case "SW":
                            i = t.range.minX, o = t.range.minX + s, n = t.range.minY + s, r = t.range.maxY;
                            break;
                        case "SE":
                            i = t.range.minX + s, o = t.range.maxX, n = t.range.minY + s, r = t.range.maxY;
                    }
                    t.children[e] = {
                        centerOfMass: {
                            x: 0,
                            y: 0
                        },
                        mass: 0,
                        range: {
                            minX: i,
                            maxX: o,
                            minY: n,
                            maxY: r
                        },
                        size: .5 * t.size,
                        calcSize: 2 * t.calcSize,
                        children: {
                            data: null
                        },
                        maxWidth: 0,
                        level: t.level + 1,
                        childrenCount: 0
                    };
                }
            },
            {
                key: "_debug",
                value: function(t, e) {
                    void 0 !== this.barnesHutTree && (t.lineWidth = 1, this._drawBranch(this.barnesHutTree.root, t, e));
                }
            },
            {
                key: "_drawBranch",
                value: function(t, e, i) {
                    void 0 === i && (i = "#FF0000"), 4 === t.childrenCount && (this._drawBranch(t.children.NW, e), this._drawBranch(t.children.NE, e), this._drawBranch(t.children.SE, e), this._drawBranch(t.children.SW, e)), e.strokeStyle = i, e.beginPath(), e.moveTo(t.range.minX, t.range.minY), e.lineTo(t.range.maxX, t.range.minY), e.stroke(), e.beginPath(), e.moveTo(t.range.maxX, t.range.minY), e.lineTo(t.range.maxX, t.range.maxY), e.stroke(), e.beginPath(), e.moveTo(t.range.maxX, t.range.maxY), e.lineTo(t.range.minX, t.range.maxY), e.stroke(), e.beginPath(), e.moveTo(t.range.minX, t.range.maxY), e.lineTo(t.range.minX, t.range.minY), e.stroke();
                }
            }
        ]), t;
    }(), iO = function() {
        function t(e, i, o) {
            vh(this, t), this._rng = Em("REPULSION SOLVER"), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n, r, s, a, h = this.body.nodes, d = this.physicsBody.physicsNodeIndices, l = this.physicsBody.forces, c = this.options.nodeDistance, u = -2 / 3 / c, f = 0; f < d.length - 1; f++){
                        s = h[d[f]];
                        for(var p = f + 1; p < d.length; p++)t = (a = h[d[p]]).x - s.x, e = a.y - s.y, 0 === (i = Math.sqrt(t * t + e * e)) && (t = i = .1 * this._rng()), i < 2 * c && (r = i < .5 * c ? 1 : u * i + 1.3333333333333333, o = t * (r /= i), n = e * r, l[s.id].x -= o, l[s.id].y -= n, l[a.id].x += o, l[a.id].y += n);
                    }
                }
            }
        ]), t;
    }(), oO = function() {
        function t(e, i, o) {
            vh(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t, this.overlapAvoidanceFactor = Math.max(0, Math.min(1, this.options.avoidOverlap || 0));
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t = this.body.nodes, e = this.physicsBody.physicsNodeIndices, i = this.physicsBody.forces, o = this.options.nodeDistance, n = 0; n < e.length - 1; n++)for(var r = t[e[n]], s = n + 1; s < e.length; s++){
                        var a = t[e[s]];
                        if (r.level === a.level) {
                            var h = o + this.overlapAvoidanceFactor * ((r.shape.radius || 0) / 2 + (a.shape.radius || 0) / 2), d = a.x - r.x, l = a.y - r.y, c = Math.sqrt(d * d + l * l), u = void 0;
                            u = c < h ? -Math.pow(.05 * c, 2) + Math.pow(.05 * h, 2) : 0, 0 !== c && (u /= c);
                            var f = d * u, p = l * u;
                            i[r.id].x -= f, i[r.id].y -= p, i[a.id].x += f, i[a.id].y += p;
                        }
                    }
                }
            }
        ]), t;
    }(), nO = function() {
        function t(e, i, o) {
            vh(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n, r = this.physicsBody.physicsEdgeIndices, s = this.body.edges, a = 0; a < r.length; a++)!0 === (e = s[r[a]]).connected && e.toId !== e.fromId && void 0 !== this.body.nodes[e.toId] && void 0 !== this.body.nodes[e.fromId] && (void 0 !== e.edgeType.via ? (t = void 0 === e.options.length ? this.options.springLength : e.options.length, i = e.to, o = e.edgeType.via, n = e.from, this._calculateSpringForce(i, o, .5 * t), this._calculateSpringForce(o, n, .5 * t)) : (t = void 0 === e.options.length ? 1.5 * this.options.springLength : e.options.length, this._calculateSpringForce(e.from, e.to, t)));
                }
            },
            {
                key: "_calculateSpringForce",
                value: function(t, e, i) {
                    var o = t.x - e.x, n = t.y - e.y, r = Math.max(Math.sqrt(o * o + n * n), .01), s = this.options.springConstant * (i - r) / r, a = o * s, h = n * s;
                    void 0 !== this.physicsBody.forces[t.id] && (this.physicsBody.forces[t.id].x += a, this.physicsBody.forces[t.id].y += h), void 0 !== this.physicsBody.forces[e.id] && (this.physicsBody.forces[e.id].x -= a, this.physicsBody.forces[e.id].y -= h);
                }
            }
        ]), t;
    }(), rO = function() {
        function t(e, i, o) {
            vh(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n, r, s, a, h, d, l = this.body.edges, c = .5, u = this.physicsBody.physicsEdgeIndices, f = this.physicsBody.physicsNodeIndices, p = this.physicsBody.forces, v = 0; v < f.length; v++){
                        var g = f[v];
                        p[g].springFx = 0, p[g].springFy = 0;
                    }
                    for(var y = 0; y < u.length; y++)!0 === (e = l[u[y]]).connected && (t = void 0 === e.options.length ? this.options.springLength : e.options.length, i = e.from.x - e.to.x, o = e.from.y - e.to.y, a = 0 === (a = Math.sqrt(i * i + o * o)) ? .01 : a, n = i * (s = this.options.springConstant * (t - a) / a), r = o * s, e.to.level != e.from.level ? (void 0 !== p[e.toId] && (p[e.toId].springFx -= n, p[e.toId].springFy -= r), void 0 !== p[e.fromId] && (p[e.fromId].springFx += n, p[e.fromId].springFy += r)) : (void 0 !== p[e.toId] && (p[e.toId].x -= c * n, p[e.toId].y -= c * r), void 0 !== p[e.fromId] && (p[e.fromId].x += c * n, p[e.fromId].y += c * r)));
                    s = 1;
                    for(var m = 0; m < f.length; m++){
                        var b = f[m];
                        h = Math.min(s, Math.max(-s, p[b].springFx)), d = Math.min(s, Math.max(-s, p[b].springFy)), p[b].x += h, p[b].y += d;
                    }
                    for(var w = 0, k = 0, _ = 0; _ < f.length; _++){
                        var x = f[_];
                        w += p[x].x, k += p[x].y;
                    }
                    for(var E = w / f.length, O = k / f.length, C = 0; C < f.length; C++){
                        var S = f[C];
                        p[S].x -= E, p[S].y -= O;
                    }
                }
            }
        ]), t;
    }(), sO = function() {
        function t(e, i, o) {
            vh(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n = this.body.nodes, r = this.physicsBody.physicsNodeIndices, s = this.physicsBody.forces, a = 0; a < r.length; a++)t = -(o = n[r[a]]).x, e = -o.y, i = Math.sqrt(t * t + e * e), this._calculateForces(i, t, e, s, o);
                }
            },
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    var r = 0 === t ? 0 : this.options.centralGravity / t;
                    o[n.id].x = e * r, o[n.id].y = i * r;
                }
            }
        ]), t;
    }();
    function aO(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var hO = function(t) {
        cx(i, t);
        var e = aO(i);
        function i(t, o, n) {
            var r;
            return vh(this, i), (r = e.call(this, t, o, n))._rng = Em("FORCE ATLAS 2 BASED REPULSION SOLVER"), r;
        }
        return wu(i, [
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    0 === t && (e = t = .1 * this._rng()), this.overlapAvoidanceFactor < 1 && o.shape.radius && (t = Math.max(.1 + this.overlapAvoidanceFactor * o.shape.radius, t - o.shape.radius));
                    var r = o.edges.length + 1, s = this.options.gravitationalConstant * n.mass * o.options.mass * r / Math.pow(t, 2), a = e * s, h = i * s;
                    this.physicsBody.forces[o.id].x += a, this.physicsBody.forces[o.id].y += h;
                }
            }
        ]), i;
    }(eO);
    function dO(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var lO = function(t) {
        cx(i, t);
        var e = dO(i);
        function i(t, o, n) {
            return vh(this, i), e.call(this, t, o, n);
        }
        return wu(i, [
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    if (t > 0) {
                        var r = n.edges.length + 1, s = this.options.centralGravity * r * n.options.mass;
                        o[n.id].x = e * s, o[n.id].y = i * s;
                    }
                }
            }
        ]), i;
    }(sO), cO = function() {
        function t(e) {
            vh(this, t), this.body = e, this.physicsBody = {
                physicsNodeIndices: [],
                physicsEdgeIndices: [],
                forces: {},
                velocities: {}
            }, this.physicsEnabled = !0, this.simulationInterval = 1e3 / 60, this.requiresTimeout = !0, this.previousStates = {}, this.referenceState = {}, this.freezeCache = {}, this.renderTimer = void 0, this.adaptiveTimestep = !1, this.adaptiveTimestepEnabled = !1, this.adaptiveCounter = 0, this.adaptiveInterval = 3, this.stabilized = !1, this.startedStabilization = !1, this.stabilizationIterations = 0, this.ready = !1, this.options = {}, this.defaultOptions = {
                enabled: !0,
                barnesHut: {
                    theta: .5,
                    gravitationalConstant: -2000,
                    centralGravity: .3,
                    springLength: 95,
                    springConstant: .04,
                    damping: .09,
                    avoidOverlap: 0
                },
                forceAtlas2Based: {
                    theta: .5,
                    gravitationalConstant: -50,
                    centralGravity: .01,
                    springConstant: .08,
                    springLength: 100,
                    damping: .4,
                    avoidOverlap: 0
                },
                repulsion: {
                    centralGravity: .2,
                    springLength: 200,
                    springConstant: .05,
                    nodeDistance: 100,
                    damping: .09,
                    avoidOverlap: 0
                },
                hierarchicalRepulsion: {
                    centralGravity: 0,
                    springLength: 100,
                    springConstant: .01,
                    nodeDistance: 120,
                    damping: .09
                },
                maxVelocity: 50,
                minVelocity: .75,
                solver: "barnesHut",
                stabilization: {
                    enabled: !0,
                    iterations: 1e3,
                    updateInterval: 50,
                    onlyDynamicEdges: !1,
                    fit: !0
                },
                timestep: .5,
                adaptiveTimestep: !0,
                wind: {
                    x: 0,
                    y: 0
                }
            }, wo(this.options, this.defaultOptions), this.timestep = .5, this.layoutFailed = !1, this.bindEventListeners();
        }
        return wu(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t = this;
                    this.body.emitter.on("initPhysics", function() {
                        t.initPhysics();
                    }), this.body.emitter.on("_layoutFailed", function() {
                        t.layoutFailed = !0;
                    }), this.body.emitter.on("resetPhysics", function() {
                        t.stopSimulation(), t.ready = !1;
                    }), this.body.emitter.on("disablePhysics", function() {
                        t.physicsEnabled = !1, t.stopSimulation();
                    }), this.body.emitter.on("restorePhysics", function() {
                        t.setOptions(t.options), !0 === t.ready && t.startSimulation();
                    }), this.body.emitter.on("startSimulation", function() {
                        !0 === t.ready && t.startSimulation();
                    }), this.body.emitter.on("stopSimulation", function() {
                        t.stopSimulation();
                    }), this.body.emitter.on("destroy", function() {
                        t.stopSimulation(!1), t.body.emitter.off();
                    }), this.body.emitter.on("_dataChanged", function() {
                        t.updatePhysicsData();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        if (!1 === t) this.options.enabled = !1, this.physicsEnabled = !1, this.stopSimulation();
                        else if (!0 === t) this.options.enabled = !0, this.physicsEnabled = !0, this.startSimulation();
                        else {
                            this.physicsEnabled = !0, Am([
                                "stabilization"
                            ], this.options, t), Qm(this.options, t, "stabilization"), void 0 === t.enabled && (this.options.enabled = !0), !1 === this.options.enabled && (this.physicsEnabled = !1, this.stopSimulation());
                            var e = this.options.wind;
                            e && (("number" != typeof e.x || Ok(e.x)) && (e.x = 0), ("number" != typeof e.y || Ok(e.y)) && (e.y = 0)), this.timestep = this.options.timestep;
                        }
                    }
                    this.init();
                }
            },
            {
                key: "init",
                value: function() {
                    var t;
                    "forceAtlas2Based" === this.options.solver ? (t = this.options.forceAtlas2Based, this.nodesSolver = new hO(this.body, this.physicsBody, t), this.edgesSolver = new nO(this.body, this.physicsBody, t), this.gravitySolver = new lO(this.body, this.physicsBody, t)) : "repulsion" === this.options.solver ? (t = this.options.repulsion, this.nodesSolver = new iO(this.body, this.physicsBody, t), this.edgesSolver = new nO(this.body, this.physicsBody, t), this.gravitySolver = new sO(this.body, this.physicsBody, t)) : "hierarchicalRepulsion" === this.options.solver ? (t = this.options.hierarchicalRepulsion, this.nodesSolver = new oO(this.body, this.physicsBody, t), this.edgesSolver = new rO(this.body, this.physicsBody, t), this.gravitySolver = new sO(this.body, this.physicsBody, t)) : (t = this.options.barnesHut, this.nodesSolver = new eO(this.body, this.physicsBody, t), this.edgesSolver = new nO(this.body, this.physicsBody, t), this.gravitySolver = new sO(this.body, this.physicsBody, t)), this.modelOptions = t;
                }
            },
            {
                key: "initPhysics",
                value: function() {
                    !0 === this.physicsEnabled && !0 === this.options.enabled ? !0 === this.options.stabilization.enabled ? this.stabilize() : (this.stabilized = !1, this.ready = !0, this.body.emitter.emit("fit", {}, this.layoutFailed), this.startSimulation()) : (this.ready = !0, this.body.emitter.emit("fit"));
                }
            },
            {
                key: "startSimulation",
                value: function() {
                    var t;
                    !0 === this.physicsEnabled && !0 === this.options.enabled ? (this.stabilized = !1, this.adaptiveTimestep = !1, this.body.emitter.emit("_resizeNodes"), void 0 === this.viewFunction && (this.viewFunction = Wo(t = this.simulationStep).call(t, this), this.body.emitter.on("initRedraw", this.viewFunction), this.body.emitter.emit("_startRendering"))) : this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "stopSimulation",
                value: function() {
                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    this.stabilized = !0, !0 === t && this._emitStabilized(), void 0 !== this.viewFunction && (this.body.emitter.off("initRedraw", this.viewFunction), this.viewFunction = void 0, !0 === t && this.body.emitter.emit("_stopRendering"));
                }
            },
            {
                key: "simulationStep",
                value: function() {
                    var t = jf();
                    this.physicsTick(), (jf() - t < .4 * this.simulationInterval || !0 === this.runDoubleSpeed) && !1 === this.stabilized && (this.physicsTick(), this.runDoubleSpeed = !0), !0 === this.stabilized && this.stopSimulation();
                }
            },
            {
                key: "_emitStabilized",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.stabilizationIterations;
                    (this.stabilizationIterations > 1 || !0 === this.startedStabilization) && vg(function() {
                        t.body.emitter.emit("stabilized", {
                            iterations: e
                        }), t.startedStabilization = !1, t.stabilizationIterations = 0;
                    }, 0);
                }
            },
            {
                key: "physicsStep",
                value: function() {
                    this.gravitySolver.solve(), this.nodesSolver.solve(), this.edgesSolver.solve(), this.moveNodes();
                }
            },
            {
                key: "adjustTimeStep",
                value: function() {
                    !0 === this._evaluateStepQuality() ? this.timestep = 1.2 * this.timestep : this.timestep / 1.2 < this.options.timestep ? this.timestep = this.options.timestep : (this.adaptiveCounter = -1, this.timestep = Math.max(this.options.timestep, this.timestep / 1.2));
                }
            },
            {
                key: "physicsTick",
                value: function() {
                    if (this._startStabilizing(), !0 !== this.stabilized) {
                        if (!0 === this.adaptiveTimestep && !0 === this.adaptiveTimestepEnabled) this.adaptiveCounter % this.adaptiveInterval == 0 ? (this.timestep = 2 * this.timestep, this.physicsStep(), this.revert(), this.timestep = .5 * this.timestep, this.physicsStep(), this.physicsStep(), this.adjustTimeStep()) : this.physicsStep(), this.adaptiveCounter += 1;
                        else this.timestep = this.options.timestep, this.physicsStep();
                        !0 === this.stabilized && this.revert(), this.stabilizationIterations++;
                    }
                }
            },
            {
                key: "updatePhysicsData",
                value: function() {
                    this.physicsBody.forces = {}, this.physicsBody.physicsNodeIndices = [], this.physicsBody.physicsEdgeIndices = [];
                    var t = this.body.nodes, e = this.body.edges;
                    for(var i in t)Object.prototype.hasOwnProperty.call(t, i) && !0 === t[i].options.physics && this.physicsBody.physicsNodeIndices.push(t[i].id);
                    for(var o in e)Object.prototype.hasOwnProperty.call(e, o) && !0 === e[o].options.physics && this.physicsBody.physicsEdgeIndices.push(e[o].id);
                    for(var n = 0; n < this.physicsBody.physicsNodeIndices.length; n++){
                        var r = this.physicsBody.physicsNodeIndices[n];
                        this.physicsBody.forces[r] = {
                            x: 0,
                            y: 0
                        }, void 0 === this.physicsBody.velocities[r] && (this.physicsBody.velocities[r] = {
                            x: 0,
                            y: 0
                        });
                    }
                    for(var s in this.physicsBody.velocities)void 0 === t[s] && delete this.physicsBody.velocities[s];
                }
            },
            {
                key: "revert",
                value: function() {
                    var t = zf(this.previousStates), e = this.body.nodes, i = this.physicsBody.velocities;
                    this.referenceState = {};
                    for(var o = 0; o < t.length; o++){
                        var n = t[o];
                        void 0 !== e[n] ? !0 === e[n].options.physics && (this.referenceState[n] = {
                            positions: {
                                x: e[n].x,
                                y: e[n].y
                            }
                        }, i[n].x = this.previousStates[n].vx, i[n].y = this.previousStates[n].vy, e[n].x = this.previousStates[n].x, e[n].y = this.previousStates[n].y) : delete this.previousStates[n];
                    }
                }
            },
            {
                key: "_evaluateStepQuality",
                value: function() {
                    var t, e, i = this.body.nodes, o = this.referenceState;
                    for(var n in this.referenceState)if (Object.prototype.hasOwnProperty.call(this.referenceState, n) && void 0 !== i[n] && (t = i[n].x - o[n].positions.x, e = i[n].y - o[n].positions.y, Math.sqrt(Math.pow(t, 2) + Math.pow(e, 2)) > .3)) return !1;
                    return !0;
                }
            },
            {
                key: "moveNodes",
                value: function() {
                    for(var t = this.physicsBody.physicsNodeIndices, e = 0, i = 0, o = 0; o < t.length; o++){
                        var n = t[o], r = this._performStep(n);
                        e = Math.max(e, r), i += r;
                    }
                    this.adaptiveTimestepEnabled = i / t.length < 5, this.stabilized = e < this.options.minVelocity;
                }
            },
            {
                key: "calculateComponentVelocity",
                value: function(t, e, i) {
                    t += (e - this.modelOptions.damping * t) / i * this.timestep;
                    var o = this.options.maxVelocity || 1e9;
                    return Math.abs(t) > o && (t = t > 0 ? o : -o), t;
                }
            },
            {
                key: "_performStep",
                value: function(t) {
                    var e = this.body.nodes[t], i = this.physicsBody.forces[t];
                    this.options.wind && (i.x += this.options.wind.x, i.y += this.options.wind.y);
                    var o = this.physicsBody.velocities[t];
                    return this.previousStates[t] = {
                        x: e.x,
                        y: e.y,
                        vx: o.x,
                        vy: o.y
                    }, !1 === e.options.fixed.x ? (o.x = this.calculateComponentVelocity(o.x, i.x, e.options.mass), e.x += o.x * this.timestep) : (i.x = 0, o.x = 0), !1 === e.options.fixed.y ? (o.y = this.calculateComponentVelocity(o.y, i.y, e.options.mass), e.y += o.y * this.timestep) : (i.y = 0, o.y = 0), Math.sqrt(Math.pow(o.x, 2) + Math.pow(o.y, 2));
                }
            },
            {
                key: "_freezeNodes",
                value: function() {
                    var t = this.body.nodes;
                    for(var e in t)if (Object.prototype.hasOwnProperty.call(t, e) && t[e].x && t[e].y) {
                        var i = t[e].options.fixed;
                        this.freezeCache[e] = {
                            x: i.x,
                            y: i.y
                        }, i.x = !0, i.y = !0;
                    }
                }
            },
            {
                key: "_restoreFrozenNodes",
                value: function() {
                    var t = this.body.nodes;
                    for(var e in t)Object.prototype.hasOwnProperty.call(t, e) && void 0 !== this.freezeCache[e] && (t[e].options.fixed.x = this.freezeCache[e].x, t[e].options.fixed.y = this.freezeCache[e].y);
                    this.freezeCache = {};
                }
            },
            {
                key: "stabilize",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.options.stabilization.iterations;
                    "number" != typeof e && (e = this.options.stabilization.iterations, console.error("The stabilize method needs a numeric amount of iterations. Switching to default: ", e)), 0 !== this.physicsBody.physicsNodeIndices.length ? (this.adaptiveTimestep = this.options.adaptiveTimestep, this.body.emitter.emit("_resizeNodes"), this.stopSimulation(), this.stabilized = !1, this.body.emitter.emit("_blockRedraw"), this.targetIterations = e, !0 === this.options.stabilization.onlyDynamicEdges && this._freezeNodes(), this.stabilizationIterations = 0, vg(function() {
                        return t._stabilizationBatch();
                    }, 0)) : this.ready = !0;
                }
            },
            {
                key: "_startStabilizing",
                value: function() {
                    return !0 !== this.startedStabilization && (this.body.emitter.emit("startStabilizing"), this.startedStabilization = !0, !0);
                }
            },
            {
                key: "_stabilizationBatch",
                value: function() {
                    var t = this, e = function() {
                        return !1 === t.stabilized && t.stabilizationIterations < t.targetIterations;
                    }, i = function() {
                        t.body.emitter.emit("stabilizationProgress", {
                            iterations: t.stabilizationIterations,
                            total: t.targetIterations
                        });
                    };
                    this._startStabilizing() && i();
                    for(var o, n = 0; e() && n < this.options.stabilization.updateInterval;)this.physicsTick(), n++;
                    (i(), e()) ? vg(Wo(o = this._stabilizationBatch).call(o, this), 0) : this._finalizeStabilization();
                }
            },
            {
                key: "_finalizeStabilization",
                value: function() {
                    this.body.emitter.emit("_allowRedraw"), !0 === this.options.stabilization.fit && this.body.emitter.emit("fit"), !0 === this.options.stabilization.onlyDynamicEdges && this._restoreFrozenNodes(), this.body.emitter.emit("stabilizationIterationsDone"), this.body.emitter.emit("_requestRedraw"), !0 === this.stabilized ? this._emitStabilized() : this.startSimulation(), this.ready = !0;
                }
            },
            {
                key: "_drawForces",
                value: function(t) {
                    for(var e = 0; e < this.physicsBody.physicsNodeIndices.length; e++){
                        var i = this.physicsBody.physicsNodeIndices[e], o = this.body.nodes[i], n = this.physicsBody.forces[i], r = Math.sqrt(Math.pow(n.x, 2) + Math.pow(n.x, 2)), s = Math.min(Math.max(5, r), 15), a = 3 * s, h = Km((180 - 180 * Math.min(1, Math.max(0, .03 * r))) / 360, 1, 1), d = {
                            x: o.x + 20 * n.x,
                            y: o.y + 20 * n.y
                        };
                        t.lineWidth = s, t.strokeStyle = h, t.beginPath(), t.moveTo(o.x, o.y), t.lineTo(d.x, d.y), t.stroke();
                        var l = Math.atan2(n.y, n.x);
                        t.fillStyle = h, zE.draw(t, {
                            type: "arrow",
                            point: d,
                            angle: l,
                            length: a
                        }), Cg(t).call(t);
                    }
                }
            }
        ]), t;
    }();
    let uO;
    const fO = new Uint8Array(16);
    function pO() {
        if (!uO && (uO = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !uO)) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        return uO(fO);
    }
    const vO = [];
    for(let t = 0; t < 256; ++t)vO.push((t + 256).toString(16).slice(1));
    var gO = {
        randomUUID: "undefined" != typeof crypto && crypto.randomUUID && crypto.randomUUID.bind(crypto)
    };
    function yO(t, e, i) {
        if (gO.randomUUID && !e && !t) return gO.randomUUID();
        const o = (t = t || {}).random || (t.rng || pO)();
        if (o[6] = 15 & o[6] | 64, o[8] = 63 & o[8] | 128, e) {
            i = i || 0;
            for(let t = 0; t < 16; ++t)e[i + t] = o[t];
            return e;
        }
        return function(t, e = 0) {
            return vO[t[e + 0]] + vO[t[e + 1]] + vO[t[e + 2]] + vO[t[e + 3]] + "-" + vO[t[e + 4]] + vO[t[e + 5]] + "-" + vO[t[e + 6]] + vO[t[e + 7]] + "-" + vO[t[e + 8]] + vO[t[e + 9]] + "-" + vO[t[e + 10]] + vO[t[e + 11]] + vO[t[e + 12]] + vO[t[e + 13]] + vO[t[e + 14]] + vO[t[e + 15]];
        }(o);
    }
    var mO = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, null, [
            {
                key: "getRange",
                value: function(t) {
                    var e, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], o = 1e9, n = -1000000000, r = 1e9, s = -1000000000;
                    if (i.length > 0) for(var a = 0; a < i.length; a++)r > (e = t[i[a]]).shape.boundingBox.left && (r = e.shape.boundingBox.left), s < e.shape.boundingBox.right && (s = e.shape.boundingBox.right), o > e.shape.boundingBox.top && (o = e.shape.boundingBox.top), n < e.shape.boundingBox.bottom && (n = e.shape.boundingBox.bottom);
                    return 1e9 === r && -1000000000 === s && 1e9 === o && -1000000000 === n && (o = 0, n = 0, r = 0, s = 0), {
                        minX: r,
                        maxX: s,
                        minY: o,
                        maxY: n
                    };
                }
            },
            {
                key: "getRangeCore",
                value: function(t) {
                    var e, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], o = 1e9, n = -1000000000, r = 1e9, s = -1000000000;
                    if (i.length > 0) for(var a = 0; a < i.length; a++)r > (e = t[i[a]]).x && (r = e.x), s < e.x && (s = e.x), o > e.y && (o = e.y), n < e.y && (n = e.y);
                    return 1e9 === r && -1000000000 === s && 1e9 === o && -1000000000 === n && (o = 0, n = 0, r = 0, s = 0), {
                        minX: r,
                        maxX: s,
                        minY: o,
                        maxY: n
                    };
                }
            },
            {
                key: "findCenter",
                value: function(t) {
                    return {
                        x: .5 * (t.maxX + t.minX),
                        y: .5 * (t.maxY + t.minY)
                    };
                }
            },
            {
                key: "cloneOptions",
                value: function(t, e) {
                    var i = {};
                    return void 0 === e || "node" === e ? (Rm(i, t.options, !0), i.x = t.x, i.y = t.y, i.amountOfConnections = t.edges.length) : Rm(i, t.options, !0), i;
                }
            }
        ]), t;
    }();
    function bO(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var wO = function(t) {
        cx(i, t);
        var e = bO(i);
        function i(t, o, n, r, s, a) {
            var h;
            return vh(this, i), (h = e.call(this, t, o, n, r, s, a)).isCluster = !0, h.containedNodes = {}, h.containedEdges = {}, h;
        }
        return wu(i, [
            {
                key: "_openChildCluster",
                value: function(t) {
                    var e = this, i = this.body.nodes[t];
                    if (void 0 === this.containedNodes[t]) throw new Error("node with id: " + t + " not in current cluster");
                    if (!i.isCluster) throw new Error("node with id: " + t + " is not a cluster");
                    delete this.containedNodes[t], Hm(i.edges, function(t) {
                        delete e.containedEdges[t.id];
                    }), Hm(i.containedNodes, function(t, i) {
                        e.containedNodes[i] = t;
                    }), i.containedNodes = {}, Hm(i.containedEdges, function(t, i) {
                        e.containedEdges[i] = t;
                    }), i.containedEdges = {}, Hm(i.edges, function(t) {
                        Hm(e.edges, function(i) {
                            var o, n, r = Vv(o = i.clusteringEdgeReplacingIds).call(o, t.id);
                            -1 !== r && (Hm(t.clusteringEdgeReplacingIds, function(t) {
                                i.clusteringEdgeReplacingIds.push(t), e.body.edges[t].edgeReplacedById = i.id;
                            }), Pp(n = i.clusteringEdgeReplacingIds).call(n, r, 1));
                        });
                    }), i.edges = [];
                }
            }
        ]), i;
    }(iE), kO = function() {
        function t(e) {
            var i = this;
            vh(this, t), this.body = e, this.clusteredNodes = {}, this.clusteredEdges = {}, this.options = {}, this.defaultOptions = {}, wo(this.options, this.defaultOptions), this.body.emitter.on("_resetData", function() {
                i.clusteredNodes = {}, i.clusteredEdges = {};
            });
        }
        return wu(t, [
            {
                key: "clusterByHubsize",
                value: function(t, e) {
                    void 0 === t ? t = this._getHubSize() : "object" === gu(t) && (e = this._checkOptions(t), t = this._getHubSize());
                    for(var i = [], o = 0; o < this.body.nodeIndices.length; o++){
                        var n = this.body.nodes[this.body.nodeIndices[o]];
                        n.edges.length >= t && i.push(n.id);
                    }
                    for(var r = 0; r < i.length; r++)this.clusterByConnection(i[r], e, !0);
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "cluster",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if (void 0 === e.joinCondition) throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
                    e = this._checkOptions(e);
                    var o = {}, n = {};
                    Hm(this.body.nodes, function(i, r) {
                        i.options && !0 === e.joinCondition(i.options) && (o[r] = i, Hm(i.edges, function(e) {
                            void 0 === t.clusteredEdges[e.id] && (n[e.id] = e);
                        }));
                    }), this._cluster(o, n, e, i);
                }
            },
            {
                key: "clusterByEdgeCount",
                value: function(t, e) {
                    var i = this, o = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                    e = this._checkOptions(e);
                    for(var n, r, s, a = [], h = {}, d = function() {
                        var o = {}, d = {}, c = i.body.nodeIndices[l], u = i.body.nodes[c];
                        if (void 0 === h[c]) {
                            s = 0, r = [];
                            for(var f = 0; f < u.edges.length; f++)n = u.edges[f], void 0 === i.clusteredEdges[n.id] && (n.toId !== n.fromId && s++, r.push(n));
                            if (s === t) {
                                for(var p = function(t) {
                                    if (void 0 === e.joinCondition || null === e.joinCondition) return !0;
                                    var i = mO.cloneOptions(t);
                                    return e.joinCondition(i);
                                }, v = !0, g = 0; g < r.length; g++){
                                    n = r[g];
                                    var y = i._getConnectedId(n, c);
                                    if (!p(u)) {
                                        v = !1;
                                        break;
                                    }
                                    d[n.id] = n, o[c] = u, o[y] = i.body.nodes[y], h[c] = !0;
                                }
                                if (zf(o).length > 0 && zf(d).length > 0 && !0 === v) {
                                    var m = function() {
                                        for(var t = 0; t < a.length; ++t)for(var e in o)if (void 0 !== a[t].nodes[e]) return a[t];
                                    }();
                                    if (void 0 !== m) {
                                        for(var b in o)void 0 === m.nodes[b] && (m.nodes[b] = o[b]);
                                        for(var w in d)void 0 === m.edges[w] && (m.edges[w] = d[w]);
                                    } else a.push({
                                        nodes: o,
                                        edges: d
                                    });
                                }
                            }
                        }
                    }, l = 0; l < this.body.nodeIndices.length; l++)d();
                    for(var c = 0; c < a.length; c++)this._cluster(a[c].nodes, a[c].edges, e, !1);
                    !0 === o && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "clusterOutliers",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    this.clusterByEdgeCount(1, t, e);
                }
            },
            {
                key: "clusterBridges",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    this.clusterByEdgeCount(2, t, e);
                }
            },
            {
                key: "clusterByConnection",
                value: function(t, e) {
                    var i, o = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                    if (void 0 === t) throw new Error("No nodeId supplied to clusterByConnection!");
                    if (void 0 === this.body.nodes[t]) throw new Error("The nodeId given to clusterByConnection does not exist!");
                    var n = this.body.nodes[t];
                    void 0 === (e = this._checkOptions(e, n)).clusterNodeProperties.x && (e.clusterNodeProperties.x = n.x), void 0 === e.clusterNodeProperties.y && (e.clusterNodeProperties.y = n.y), void 0 === e.clusterNodeProperties.fixed && (e.clusterNodeProperties.fixed = {}, e.clusterNodeProperties.fixed.x = n.options.fixed.x, e.clusterNodeProperties.fixed.y = n.options.fixed.y);
                    var r = {}, s = {}, a = n.id, h = mO.cloneOptions(n);
                    r[a] = n;
                    for(var d = 0; d < n.edges.length; d++){
                        var l = n.edges[d];
                        if (void 0 === this.clusteredEdges[l.id]) {
                            var c = this._getConnectedId(l, a);
                            if (void 0 === this.clusteredNodes[c]) {
                                if (c !== a) {
                                    if (void 0 === e.joinCondition) s[l.id] = l, r[c] = this.body.nodes[c];
                                    else {
                                        var u = mO.cloneOptions(this.body.nodes[c]);
                                        !0 === e.joinCondition(h, u) && (s[l.id] = l, r[c] = this.body.nodes[c]);
                                    }
                                } else s[l.id] = l;
                            }
                        }
                    }
                    var f = If(i = zf(r)).call(i, function(t) {
                        return r[t].id;
                    });
                    for(var p in r)if (Object.prototype.hasOwnProperty.call(r, p)) for(var v = r[p], g = 0; g < v.edges.length; g++){
                        var y = v.edges[g];
                        Vv(f).call(f, this._getConnectedId(y, v.id)) > -1 && (s[y.id] = y);
                    }
                    this._cluster(r, s, e, o);
                }
            },
            {
                key: "_createClusterEdges",
                value: function(t, e, i, o) {
                    for(var n, r, s, a, h, d, l = zf(t), c = [], u = 0; u < l.length; u++){
                        s = t[r = l[u]];
                        for(var f = 0; f < s.edges.length; f++)n = s.edges[f], void 0 === this.clusteredEdges[n.id] && (n.toId == n.fromId ? e[n.id] = n : n.toId == r ? (a = i.id, d = h = n.fromId) : (a = n.toId, h = i.id, d = a), void 0 === t[d] && c.push({
                            edge: n,
                            fromId: h,
                            toId: a
                        }));
                    }
                    for(var p = [], v = function(t) {
                        for(var e = 0; e < p.length; e++){
                            var i = p[e], o = t.fromId === i.fromId && t.toId === i.toId, n = t.fromId === i.toId && t.toId === i.fromId;
                            if (o || n) return i;
                        }
                        return null;
                    }, g = 0; g < c.length; g++){
                        var y = c[g], m = y.edge, b = v(y);
                        null === b ? (b = this._createClusteredEdge(y.fromId, y.toId, m, o), p.push(b)) : b.clusteringEdgeReplacingIds.push(m.id), this.body.edges[m.id].edgeReplacedById = b.id, this._backupEdgeOptions(m), m.setOptions({
                            physics: !1
                        });
                    }
                }
            },
            {
                key: "_checkOptions",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    return void 0 === t.clusterEdgeProperties && (t.clusterEdgeProperties = {}), void 0 === t.clusterNodeProperties && (t.clusterNodeProperties = {}), t;
                }
            },
            {
                key: "_cluster",
                value: function(t, e, i) {
                    var o = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], n = [];
                    for(var r in t)Object.prototype.hasOwnProperty.call(t, r) && void 0 !== this.clusteredNodes[r] && n.push(r);
                    for(var s = 0; s < n.length; ++s)delete t[n[s]];
                    if (0 != zf(t).length && (1 != zf(t).length || 1 == i.clusterNodeProperties.allowSingleNodeCluster)) {
                        var a = Rm({}, i.clusterNodeProperties);
                        if (void 0 !== i.processProperties) {
                            var h = [];
                            for(var d in t)if (Object.prototype.hasOwnProperty.call(t, d)) {
                                var l = mO.cloneOptions(t[d]);
                                h.push(l);
                            }
                            var c = [];
                            for(var u in e)if (Object.prototype.hasOwnProperty.call(e, u) && "clusterEdge:" !== u.substr(0, 12)) {
                                var f = mO.cloneOptions(e[u], "edge");
                                c.push(f);
                            }
                            if (!(a = i.processProperties(a, h, c))) throw new Error("The processProperties function does not return properties!");
                        }
                        void 0 === a.id && (a.id = "cluster:" + yO());
                        var p = a.id;
                        void 0 === a.label && (a.label = "cluster");
                        var v = void 0;
                        void 0 === a.x && (v = this._getClusterPosition(t), a.x = v.x), void 0 === a.y && (void 0 === v && (v = this._getClusterPosition(t)), a.y = v.y), a.id = p;
                        var g = this.body.functions.createNode(a, wO);
                        g.containedNodes = t, g.containedEdges = e, g.clusterEdgeProperties = i.clusterEdgeProperties, this.body.nodes[a.id] = g, this._clusterEdges(t, e, a, i.clusterEdgeProperties), a.id = void 0, !0 === o && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "_backupEdgeOptions",
                value: function(t) {
                    void 0 === this.clusteredEdges[t.id] && (this.clusteredEdges[t.id] = {
                        physics: t.options.physics
                    });
                }
            },
            {
                key: "_restoreEdge",
                value: function(t) {
                    var e = this.clusteredEdges[t.id];
                    void 0 !== e && (t.setOptions({
                        physics: e.physics
                    }), delete this.clusteredEdges[t.id]);
                }
            },
            {
                key: "isCluster",
                value: function(t) {
                    return void 0 !== this.body.nodes[t] ? !0 === this.body.nodes[t].isCluster : (console.error("Node does not exist."), !1);
                }
            },
            {
                key: "_getClusterPosition",
                value: function(t) {
                    for(var e, i = zf(t), o = t[i[0]].x, n = t[i[0]].x, r = t[i[0]].y, s = t[i[0]].y, a = 1; a < i.length; a++)o = (e = t[i[a]]).x < o ? e.x : o, n = e.x > n ? e.x : n, r = e.y < r ? e.y : r, s = e.y > s ? e.y : s;
                    return {
                        x: .5 * (o + n),
                        y: .5 * (r + s)
                    };
                }
            },
            {
                key: "openCluster",
                value: function(t, e) {
                    var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                    if (void 0 === t) throw new Error("No clusterNodeId supplied to openCluster.");
                    var o = this.body.nodes[t];
                    if (void 0 === o) throw new Error("The clusterNodeId supplied to openCluster does not exist.");
                    if (!0 !== o.isCluster || void 0 === o.containedNodes || void 0 === o.containedEdges) throw new Error("The node:" + t + " is not a valid cluster.");
                    var n = this.findNode(t), r = Vv(n).call(n, t) - 1;
                    if (r >= 0) {
                        var s = n[r];
                        return this.body.nodes[s]._openChildCluster(t), delete this.body.nodes[t], void (!0 === i && this.body.emitter.emit("_dataChanged"));
                    }
                    var a = o.containedNodes, h = o.containedEdges;
                    if (void 0 !== e && void 0 !== e.releaseFunction && "function" == typeof e.releaseFunction) {
                        var d = {}, l = {
                            x: o.x,
                            y: o.y
                        };
                        for(var c in a)if (Object.prototype.hasOwnProperty.call(a, c)) {
                            var u = this.body.nodes[c];
                            d[c] = {
                                x: u.x,
                                y: u.y
                            };
                        }
                        var f = e.releaseFunction(l, d);
                        for(var p in a)if (Object.prototype.hasOwnProperty.call(a, p)) {
                            var v = this.body.nodes[p];
                            void 0 !== f[p] && (v.x = void 0 === f[p].x ? o.x : f[p].x, v.y = void 0 === f[p].y ? o.y : f[p].y);
                        }
                    } else Hm(a, function(t) {
                        !1 === t.options.fixed.x && (t.x = o.x), !1 === t.options.fixed.y && (t.y = o.y);
                    });
                    for(var g in a)if (Object.prototype.hasOwnProperty.call(a, g)) {
                        var y = this.body.nodes[g];
                        y.vx = o.vx, y.vy = o.vy, y.setOptions({
                            physics: !0
                        }), delete this.clusteredNodes[g];
                    }
                    for(var m = [], b = 0; b < o.edges.length; b++)m.push(o.edges[b]);
                    for(var w = 0; w < m.length; w++){
                        for(var k = m[w], _ = this._getConnectedId(k, t), x = this.clusteredNodes[_], E = 0; E < k.clusteringEdgeReplacingIds.length; E++){
                            var O = k.clusteringEdgeReplacingIds[E], C = this.body.edges[O];
                            if (void 0 !== C) {
                                if (void 0 !== x) {
                                    var S = this.body.nodes[x.clusterId];
                                    S.containedEdges[C.id] = C, delete h[C.id];
                                    var T = C.fromId, M = C.toId;
                                    C.toId == _ ? M = x.clusterId : T = x.clusterId, this._createClusteredEdge(T, M, C, S.clusterEdgeProperties, {
                                        hidden: !1,
                                        physics: !0
                                    });
                                } else this._restoreEdge(C);
                            }
                        }
                        k.remove();
                    }
                    for(var P in h)Object.prototype.hasOwnProperty.call(h, P) && this._restoreEdge(h[P]);
                    delete this.body.nodes[t], !0 === i && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "getNodesInCluster",
                value: function(t) {
                    var e = [];
                    if (!0 === this.isCluster(t)) {
                        var i = this.body.nodes[t].containedNodes;
                        for(var o in i)Object.prototype.hasOwnProperty.call(i, o) && e.push(this.body.nodes[o].id);
                    }
                    return e;
                }
            },
            {
                key: "findNode",
                value: function(t) {
                    for(var e, i = [], o = 0; void 0 !== this.clusteredNodes[t] && o < 100;){
                        if (void 0 === (e = this.body.nodes[t])) return [];
                        i.push(e.id), t = this.clusteredNodes[t].clusterId, o++;
                    }
                    return void 0 === (e = this.body.nodes[t]) ? [] : (i.push(e.id), hp(i).call(i), i);
                }
            },
            {
                key: "updateClusteredNode",
                value: function(t, e) {
                    if (void 0 === t) throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
                    if (void 0 === e) throw new Error("No newOptions supplied to updateClusteredNode.");
                    if (void 0 === this.body.nodes[t]) throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
                    this.body.nodes[t].setOptions(e), this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "updateEdge",
                value: function(t, e) {
                    if (void 0 === t) throw new Error("No startEdgeId supplied to updateEdge.");
                    if (void 0 === e) throw new Error("No newOptions supplied to updateEdge.");
                    if (void 0 === this.body.edges[t]) throw new Error("The startEdgeId supplied to updateEdge does not exist.");
                    for(var i = this.getClusteredEdges(t), o = 0; o < i.length; o++)this.body.edges[i[o]].setOptions(e);
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "getClusteredEdges",
                value: function(t) {
                    for(var e = [], i = 0; void 0 !== t && void 0 !== this.body.edges[t] && i < 100;)e.push(this.body.edges[t].id), t = this.body.edges[t].edgeReplacedById, i++;
                    return hp(e).call(e), e;
                }
            },
            {
                key: "getBaseEdge",
                value: function(t) {
                    return this.getBaseEdges(t)[0];
                }
            },
            {
                key: "getBaseEdges",
                value: function(t) {
                    for(var e = [
                        t
                    ], i = [], o = [], n = 0; e.length > 0 && n < 100;){
                        var r = e.pop();
                        if (void 0 !== r) {
                            var s = this.body.edges[r];
                            if (void 0 !== s) {
                                n++;
                                var a = s.clusteringEdgeReplacingIds;
                                if (void 0 === a) o.push(r);
                                else for(var h = 0; h < a.length; ++h){
                                    var d = a[h];
                                    -1 === Vv(e).call(e, a) && -1 === Vv(i).call(i, a) && e.push(d);
                                }
                                i.push(r);
                            }
                        }
                    }
                    return o;
                }
            },
            {
                key: "_getConnectedId",
                value: function(t, e) {
                    return t.toId != e ? t.toId : (t.fromId, t.fromId);
                }
            },
            {
                key: "_getHubSize",
                value: function() {
                    for(var t = 0, e = 0, i = 0, o = 0, n = 0; n < this.body.nodeIndices.length; n++){
                        var r = this.body.nodes[this.body.nodeIndices[n]];
                        r.edges.length > o && (o = r.edges.length), t += r.edges.length, e += Math.pow(r.edges.length, 2), i += 1;
                    }
                    t /= i;
                    var s = (e /= i) - Math.pow(t, 2), a = Math.sqrt(s), h = Math.floor(t + 2 * a);
                    return h > o && (h = o), h;
                }
            },
            {
                key: "_createClusteredEdge",
                value: function(t, e, i, o, n) {
                    var r = mO.cloneOptions(i, "edge");
                    Rm(r, o), r.from = t, r.to = e, r.id = "clusterEdge:" + yO(), void 0 !== n && Rm(r, n);
                    var s = this.body.functions.createEdge(r);
                    return s.clusteringEdgeReplacingIds = [
                        i.id
                    ], s.connect(), this.body.edges[s.id] = s, s;
                }
            },
            {
                key: "_clusterEdges",
                value: function(t, e, i, o) {
                    if (e instanceof JE) {
                        var n = e, r = {};
                        r[n.id] = n, e = r;
                    }
                    if (t instanceof iE) {
                        var s = t, a = {};
                        a[s.id] = s, t = a;
                    }
                    if (null == i) throw new Error("_clusterEdges: parameter clusterNode required");
                    for(var h in void 0 === o && (o = i.clusterEdgeProperties), this._createClusterEdges(t, e, i, o), e)if (Object.prototype.hasOwnProperty.call(e, h) && void 0 !== this.body.edges[h]) {
                        var d = this.body.edges[h];
                        this._backupEdgeOptions(d), d.setOptions({
                            physics: !1
                        });
                    }
                    for(var l in t)Object.prototype.hasOwnProperty.call(t, l) && (this.clusteredNodes[l] = {
                        clusterId: i.id,
                        node: this.body.nodes[l]
                    }, this.body.nodes[l].setOptions({
                        physics: !1
                    }));
                }
            },
            {
                key: "_getClusterNodeForNode",
                value: function(t) {
                    if (void 0 !== t) {
                        var e = this.clusteredNodes[t];
                        if (void 0 !== e) {
                            var i = e.clusterId;
                            if (void 0 !== i) return this.body.nodes[i];
                        }
                    }
                }
            },
            {
                key: "_filter",
                value: function(t, e) {
                    var i = [];
                    return Hm(t, function(t) {
                        e(t) && i.push(t);
                    }), i;
                }
            },
            {
                key: "_updateState",
                value: function() {
                    var t, e = this, i = [], o = {}, n = function(t) {
                        Hm(e.body.nodes, function(e) {
                            !0 === e.isCluster && t(e);
                        });
                    };
                    for(t in this.clusteredNodes)if (Object.prototype.hasOwnProperty.call(this.clusteredNodes, t)) void 0 === this.body.nodes[t] && i.push(t);
                    n(function(t) {
                        for(var e = 0; e < i.length; e++)delete t.containedNodes[i[e]];
                    });
                    for(var r = 0; r < i.length; r++)delete this.clusteredNodes[i[r]];
                    Hm(this.clusteredEdges, function(t) {
                        var i = e.body.edges[t];
                        void 0 !== i && i.endPointsValid() || (o[t] = t);
                    }), n(function(t) {
                        Hm(t.containedEdges, function(t, e) {
                            t.endPointsValid() || o[e] || (o[e] = e);
                        });
                    }), Hm(this.body.edges, function(t, i) {
                        var n = !0, r = t.clusteringEdgeReplacingIds;
                        if (void 0 !== r) {
                            var s = 0;
                            Hm(r, function(t) {
                                var i = e.body.edges[t];
                                void 0 !== i && i.endPointsValid() && (s += 1);
                            }), n = s > 0;
                        }
                        t.endPointsValid() && n || (o[i] = i);
                    }), n(function(t) {
                        Hm(o, function(i) {
                            delete t.containedEdges[i], Hm(t.edges, function(n, r) {
                                n.id !== i ? n.clusteringEdgeReplacingIds = e._filter(n.clusteringEdgeReplacingIds, function(t) {
                                    return !o[t];
                                }) : t.edges[r] = null;
                            }), t.edges = e._filter(t.edges, function(t) {
                                return null !== t;
                            });
                        });
                    }), Hm(o, function(t) {
                        delete e.clusteredEdges[t];
                    }), Hm(o, function(t) {
                        delete e.body.edges[t];
                    }), Hm(zf(this.body.edges), function(t) {
                        var i = e.body.edges[t], o = e._isClusteredNode(i.fromId) || e._isClusteredNode(i.toId);
                        if (o !== e._isClusteredEdge(i.id)) {
                            if (o) {
                                var n = e._getClusterNodeForNode(i.fromId);
                                void 0 !== n && e._clusterEdges(e.body.nodes[i.fromId], i, n);
                                var r = e._getClusterNodeForNode(i.toId);
                                void 0 !== r && e._clusterEdges(e.body.nodes[i.toId], i, r);
                            } else delete e._clusterEdges[t], e._restoreEdge(i);
                        }
                    });
                    for(var s = !1, a = !0, h = function() {
                        var t = [];
                        n(function(e) {
                            var i = zf(e.containedNodes).length, o = !0 === e.options.allowSingleNodeCluster;
                            (o && i < 1 || !o && i < 2) && t.push(e.id);
                        });
                        for(var i = 0; i < t.length; ++i)e.openCluster(t[i], {}, !1);
                        a = t.length > 0, s = s || a;
                    }; a;)h();
                    s && this._updateState();
                }
            },
            {
                key: "_isClusteredNode",
                value: function(t) {
                    return void 0 !== this.clusteredNodes[t];
                }
            },
            {
                key: "_isClusteredEdge",
                value: function(t) {
                    return void 0 !== this.clusteredEdges[t];
                }
            }
        ]), t;
    }();
    var _O = function() {
        function t(e, i) {
            var o;
            vh(this, t), void 0 !== window && (o = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame), window.requestAnimationFrame = void 0 === o ? function(t) {
                t();
            } : o, this.body = e, this.canvas = i, this.redrawRequested = !1, this.renderTimer = void 0, this.requiresTimeout = !0, this.renderingActive = !1, this.renderRequests = 0, this.allowRedraw = !0, this.dragging = !1, this.zooming = !1, this.options = {}, this.defaultOptions = {
                hideEdgesOnDrag: !1,
                hideEdgesOnZoom: !1,
                hideNodesOnDrag: !1
            }, wo(this.options, this.defaultOptions), this._determineBrowserMethod(), this.bindEventListeners();
        }
        return wu(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t, e = this;
                    this.body.emitter.on("dragStart", function() {
                        e.dragging = !0;
                    }), this.body.emitter.on("dragEnd", function() {
                        e.dragging = !1;
                    }), this.body.emitter.on("zoom", function() {
                        e.zooming = !0, window.clearTimeout(e.zoomTimeoutId), e.zoomTimeoutId = vg(function() {
                            var t;
                            e.zooming = !1, Wo(t = e._requestRedraw).call(t, e)();
                        }, 250);
                    }), this.body.emitter.on("_resizeNodes", function() {
                        e._resizeNodes();
                    }), this.body.emitter.on("_redraw", function() {
                        !1 === e.renderingActive && e._redraw();
                    }), this.body.emitter.on("_blockRedraw", function() {
                        e.allowRedraw = !1;
                    }), this.body.emitter.on("_allowRedraw", function() {
                        e.allowRedraw = !0, e.redrawRequested = !1;
                    }), this.body.emitter.on("_requestRedraw", Wo(t = this._requestRedraw).call(t, this)), this.body.emitter.on("_startRendering", function() {
                        e.renderRequests += 1, e.renderingActive = !0, e._startRendering();
                    }), this.body.emitter.on("_stopRendering", function() {
                        e.renderRequests -= 1, e.renderingActive = e.renderRequests > 0, e.renderTimer = void 0;
                    }), this.body.emitter.on("destroy", function() {
                        e.renderRequests = 0, e.allowRedraw = !1, e.renderingActive = !1, !0 === e.requiresTimeout ? clearTimeout(e.renderTimer) : window.cancelAnimationFrame(e.renderTimer), e.body.emitter.off();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) Nm([
                        "hideEdgesOnDrag",
                        "hideEdgesOnZoom",
                        "hideNodesOnDrag"
                    ], this.options, t);
                }
            },
            {
                key: "_requestNextFrame",
                value: function(t, e) {
                    if ("undefined" != typeof window) {
                        var i, o = window;
                        return !0 === this.requiresTimeout ? i = vg(t, e) : o.requestAnimationFrame && (i = o.requestAnimationFrame(t)), i;
                    }
                }
            },
            {
                key: "_startRendering",
                value: function() {
                    var t;
                    !0 === this.renderingActive && void 0 === this.renderTimer && (this.renderTimer = this._requestNextFrame(Wo(t = this._renderStep).call(t, this), this.simulationInterval));
                }
            },
            {
                key: "_renderStep",
                value: function() {
                    !0 === this.renderingActive && (this.renderTimer = void 0, !0 === this.requiresTimeout && this._startRendering(), this._redraw(), !1 === this.requiresTimeout && this._startRendering());
                }
            },
            {
                key: "redraw",
                value: function() {
                    this.body.emitter.emit("setSize"), this._redraw();
                }
            },
            {
                key: "_requestRedraw",
                value: function() {
                    var t = this;
                    !0 !== this.redrawRequested && !1 === this.renderingActive && !0 === this.allowRedraw && (this.redrawRequested = !0, this._requestNextFrame(function() {
                        t._redraw(!1);
                    }, 0));
                }
            },
            {
                key: "_redraw",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    if (!0 === this.allowRedraw) {
                        this.body.emitter.emit("initRedraw"), this.redrawRequested = !1;
                        var e = {
                            drawExternalLabels: null
                        };
                        0 !== this.canvas.frame.canvas.width && 0 !== this.canvas.frame.canvas.height || this.canvas.setSize(), this.canvas.setTransform();
                        var i = this.canvas.getContext(), o = this.canvas.frame.canvas.clientWidth, n = this.canvas.frame.canvas.clientHeight;
                        if (i.clearRect(0, 0, o, n), 0 === this.canvas.frame.clientWidth) return;
                        if (i.save(), i.translate(this.body.view.translation.x, this.body.view.translation.y), i.scale(this.body.view.scale, this.body.view.scale), i.beginPath(), this.body.emitter.emit("beforeDrawing", i), i.closePath(), !1 === t && (!1 === this.dragging || !0 === this.dragging && !1 === this.options.hideEdgesOnDrag) && (!1 === this.zooming || !0 === this.zooming && !1 === this.options.hideEdgesOnZoom) && this._drawEdges(i), !1 === this.dragging || !0 === this.dragging && !1 === this.options.hideNodesOnDrag) {
                            var r = this._drawNodes(i, t).drawExternalLabels;
                            e.drawExternalLabels = r;
                        }
                        !1 === t && (!1 === this.dragging || !0 === this.dragging && !1 === this.options.hideEdgesOnDrag) && (!1 === this.zooming || !0 === this.zooming && !1 === this.options.hideEdgesOnZoom) && this._drawArrows(i), null != e.drawExternalLabels && e.drawExternalLabels(), !1 === t && this._drawSelectionBox(i), i.beginPath(), this.body.emitter.emit("afterDrawing", i), i.closePath(), i.restore(), !0 === t && i.clearRect(0, 0, o, n);
                    }
                }
            },
            {
                key: "_resizeNodes",
                value: function() {
                    this.canvas.setTransform();
                    var t = this.canvas.getContext();
                    t.save(), t.translate(this.body.view.translation.x, this.body.view.translation.y), t.scale(this.body.view.scale, this.body.view.scale);
                    var e, i = this.body.nodes;
                    for(var o in i)Object.prototype.hasOwnProperty.call(i, o) && ((e = i[o]).resize(t), e.updateBoundingBox(t, e.selected));
                    t.restore();
                }
            },
            {
                key: "_drawNodes",
                value: function(t) {
                    for(var e, i, o = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = this.body.nodes, r = this.body.nodeIndices, s = [], a = [], h = this.canvas.DOMtoCanvas({
                        x: -20,
                        y: -20
                    }), d = this.canvas.DOMtoCanvas({
                        x: this.canvas.frame.canvas.clientWidth + 20,
                        y: this.canvas.frame.canvas.clientHeight + 20
                    }), l = {
                        top: h.y,
                        left: h.x,
                        bottom: d.y,
                        right: d.x
                    }, c = [], u = 0; u < r.length; u++)if ((e = n[r[u]]).hover) a.push(r[u]);
                    else if (e.isSelected()) s.push(r[u]);
                    else if (!0 === o) {
                        var f = e.draw(t);
                        null != f.drawExternalLabel && c.push(f.drawExternalLabel);
                    } else if (!0 === e.isBoundingBoxOverlappingWith(l)) {
                        var p = e.draw(t);
                        null != p.drawExternalLabel && c.push(p.drawExternalLabel);
                    } else e.updateBoundingBox(t, e.selected);
                    var v = s.length, g = a.length;
                    for(i = 0; i < v; i++){
                        var y = (e = n[s[i]]).draw(t);
                        null != y.drawExternalLabel && c.push(y.drawExternalLabel);
                    }
                    for(i = 0; i < g; i++){
                        var m = (e = n[a[i]]).draw(t);
                        null != m.drawExternalLabel && c.push(m.drawExternalLabel);
                    }
                    return {
                        drawExternalLabels: function() {
                            for(var t = 0, e = c; t < e.length; t++)(0, e[t])();
                        }
                    };
                }
            },
            {
                key: "_drawEdges",
                value: function(t) {
                    for(var e = this.body.edges, i = this.body.edgeIndices, o = 0; o < i.length; o++){
                        var n = e[i[o]];
                        !0 === n.connected && n.draw(t);
                    }
                }
            },
            {
                key: "_drawArrows",
                value: function(t) {
                    for(var e = this.body.edges, i = this.body.edgeIndices, o = 0; o < i.length; o++){
                        var n = e[i[o]];
                        !0 === n.connected && n.drawArrows(t);
                    }
                }
            },
            {
                key: "_determineBrowserMethod",
                value: function() {
                    if ("undefined" != typeof window) {
                        var t = navigator.userAgent.toLowerCase();
                        this.requiresTimeout = !1, (-1 != Vv(t).call(t, "msie 9.0") || -1 != Vv(t).call(t, "safari") && Vv(t).call(t, "chrome") <= -1) && (this.requiresTimeout = !0);
                    } else this.requiresTimeout = !0;
                }
            },
            {
                key: "_drawSelectionBox",
                value: function(t) {
                    if (this.body.selectionBox.show) {
                        t.beginPath();
                        var e = this.body.selectionBox.position.end.x - this.body.selectionBox.position.start.x, i = this.body.selectionBox.position.end.y - this.body.selectionBox.position.start.y;
                        t.rect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, e, i), t.fillStyle = "rgba(151, 194, 252, 0.2)", t.fillRect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, e, i), t.strokeStyle = "rgba(151, 194, 252, 1)", t.stroke();
                    } else t.closePath();
                }
            }
        ]), t;
    }(), xO = o(it.setInterval);
    function EO(t, e) {
        e.inputHandler = function(t) {
            t.isFirst && e(t);
        }, t.on("hammer.input", e.inputHandler);
    }
    function OO(t, e) {
        return e.inputHandler = function(t) {
            t.isFinal && e(t);
        }, t.on("hammer.input", e.inputHandler);
    }
    var CO = function() {
        function t(e) {
            vh(this, t), this.body = e, this.pixelRatio = 1, this.cameraState = {}, this.initialized = !1, this.canvasViewCenter = {}, this._cleanupCallbacks = [], this.options = {}, this.defaultOptions = {
                autoResize: !0,
                height: "100%",
                width: "100%"
            }, wo(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return wu(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t, e = this;
                    this.body.emitter.once("resize", function(t) {
                        0 !== t.width && (e.body.view.translation.x = .5 * t.width), 0 !== t.height && (e.body.view.translation.y = .5 * t.height);
                    }), this.body.emitter.on("setSize", Wo(t = this.setSize).call(t, this)), this.body.emitter.on("destroy", function() {
                        e.hammerFrame.destroy(), e.hammer.destroy(), e._cleanUp();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    var e = this;
                    if (void 0 !== t) Nm([
                        "width",
                        "height",
                        "autoResize"
                    ], this.options, t);
                    if (this._cleanUp(), !0 === this.options.autoResize) {
                        var i;
                        if (window.ResizeObserver) {
                            var o = new ResizeObserver(function() {
                                !0 === e.setSize() && e.body.emitter.emit("_requestRedraw");
                            }), n = this.frame;
                            o.observe(n), this._cleanupCallbacks.push(function() {
                                o.unobserve(n);
                            });
                        } else {
                            var r = xO(function() {
                                !0 === e.setSize() && e.body.emitter.emit("_requestRedraw");
                            }, 1e3);
                            this._cleanupCallbacks.push(function() {
                                clearInterval(r);
                            });
                        }
                        var s = Wo(i = this._onResize).call(i, this);
                        window.addEventListener("resize", s), this._cleanupCallbacks.push(function() {
                            window.removeEventListener("resize", s);
                        });
                    }
                }
            },
            {
                key: "_cleanUp",
                value: function() {
                    var t, e, i;
                    Qf(t = hp(e = Pp(i = this._cleanupCallbacks).call(i, 0)).call(e)).call(t, function(t) {
                        try {
                            t();
                        } catch (t) {
                            console.error(t);
                        }
                    });
                }
            },
            {
                key: "_onResize",
                value: function() {
                    this.setSize(), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_getCameraState",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.pixelRatio;
                    !0 === this.initialized && (this.cameraState.previousWidth = this.frame.canvas.width / t, this.cameraState.previousHeight = this.frame.canvas.height / t, this.cameraState.scale = this.body.view.scale, this.cameraState.position = this.DOMtoCanvas({
                        x: .5 * this.frame.canvas.width / t,
                        y: .5 * this.frame.canvas.height / t
                    }));
                }
            },
            {
                key: "_setCameraState",
                value: function() {
                    if (void 0 !== this.cameraState.scale && 0 !== this.frame.canvas.clientWidth && 0 !== this.frame.canvas.clientHeight && 0 !== this.pixelRatio && this.cameraState.previousWidth > 0 && this.cameraState.previousHeight > 0) {
                        var t = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth, e = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight, i = this.cameraState.scale;
                        1 != t && 1 != e ? i = .5 * this.cameraState.scale * (t + e) : 1 != t ? i = this.cameraState.scale * t : 1 != e && (i = this.cameraState.scale * e), this.body.view.scale = i;
                        var o = this.DOMtoCanvas({
                            x: .5 * this.frame.canvas.clientWidth,
                            y: .5 * this.frame.canvas.clientHeight
                        }), n = {
                            x: o.x - this.cameraState.position.x,
                            y: o.y - this.cameraState.position.y
                        };
                        this.body.view.translation.x += n.x * this.body.view.scale, this.body.view.translation.y += n.y * this.body.view.scale;
                    }
                }
            },
            {
                key: "_prepareValue",
                value: function(t) {
                    if ("number" == typeof t) return t + "px";
                    if ("string" == typeof t) {
                        if (-1 !== Vv(t).call(t, "%") || -1 !== Vv(t).call(t, "px")) return t;
                        if (-1 === Vv(t).call(t, "%")) return t + "px";
                    }
                    throw new Error("Could not use the value supplied for width or height:" + t);
                }
            },
            {
                key: "_create",
                value: function() {
                    for(; this.body.container.hasChildNodes();)this.body.container.removeChild(this.body.container.firstChild);
                    if (this.frame = document.createElement("div"), this.frame.className = "vis-network", this.frame.style.position = "relative", this.frame.style.overflow = "hidden", this.frame.tabIndex = 0, this.frame.canvas = document.createElement("canvas"), this.frame.canvas.style.position = "relative", this.frame.appendChild(this.frame.canvas), this.frame.canvas.getContext) this._setPixelRatio(), this.setTransform();
                    else {
                        var t = document.createElement("DIV");
                        t.style.color = "red", t.style.fontWeight = "bold", t.style.padding = "10px", t.innerText = "Error: your browser does not support HTML canvas", this.frame.canvas.appendChild(t);
                    }
                    this.body.container.appendChild(this.frame), this.body.view.scale = 1, this.body.view.translation = {
                        x: .5 * this.frame.canvas.clientWidth,
                        y: .5 * this.frame.canvas.clientHeight
                    }, this._bindHammer();
                }
            },
            {
                key: "_bindHammer",
                value: function() {
                    var t = this;
                    void 0 !== this.hammer && this.hammer.destroy(), this.drag = {}, this.pinch = {}, this.hammer = new ub(this.frame.canvas), this.hammer.get("pinch").set({
                        enable: !0
                    }), this.hammer.get("pan").set({
                        threshold: 5,
                        direction: ub.DIRECTION_ALL
                    }), EO(this.hammer, function(e) {
                        t.body.eventListeners.onTouch(e);
                    }), this.hammer.on("tap", function(e) {
                        t.body.eventListeners.onTap(e);
                    }), this.hammer.on("doubletap", function(e) {
                        t.body.eventListeners.onDoubleTap(e);
                    }), this.hammer.on("press", function(e) {
                        t.body.eventListeners.onHold(e);
                    }), this.hammer.on("panstart", function(e) {
                        t.body.eventListeners.onDragStart(e);
                    }), this.hammer.on("panmove", function(e) {
                        t.body.eventListeners.onDrag(e);
                    }), this.hammer.on("panend", function(e) {
                        t.body.eventListeners.onDragEnd(e);
                    }), this.hammer.on("pinch", function(e) {
                        t.body.eventListeners.onPinch(e);
                    }), this.frame.canvas.addEventListener("wheel", function(e) {
                        t.body.eventListeners.onMouseWheel(e);
                    }), this.frame.canvas.addEventListener("mousemove", function(e) {
                        t.body.eventListeners.onMouseMove(e);
                    }), this.frame.canvas.addEventListener("contextmenu", function(e) {
                        t.body.eventListeners.onContext(e);
                    }), this.hammerFrame = new ub(this.frame), OO(this.hammerFrame, function(e) {
                        t.body.eventListeners.onRelease(e);
                    });
                }
            },
            {
                key: "setSize",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.options.width, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.options.height;
                    t = this._prepareValue(t), e = this._prepareValue(e);
                    var i = !1, o = this.frame.canvas.width, n = this.frame.canvas.height, r = this.pixelRatio;
                    if (this._setPixelRatio(), t != this.options.width || e != this.options.height || this.frame.style.width != t || this.frame.style.height != e) this._getCameraState(r), this.frame.style.width = t, this.frame.style.height = e, this.frame.canvas.style.width = "100%", this.frame.canvas.style.height = "100%", this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio), this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio), this.options.width = t, this.options.height = e, this.canvasViewCenter = {
                        x: .5 * this.frame.clientWidth,
                        y: .5 * this.frame.clientHeight
                    }, i = !0;
                    else {
                        var s = Math.round(this.frame.canvas.clientWidth * this.pixelRatio), a = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
                        this.frame.canvas.width === s && this.frame.canvas.height === a || this._getCameraState(r), this.frame.canvas.width !== s && (this.frame.canvas.width = s, i = !0), this.frame.canvas.height !== a && (this.frame.canvas.height = a, i = !0);
                    }
                    return !0 === i && (this.body.emitter.emit("resize", {
                        width: Math.round(this.frame.canvas.width / this.pixelRatio),
                        height: Math.round(this.frame.canvas.height / this.pixelRatio),
                        oldWidth: Math.round(o / this.pixelRatio),
                        oldHeight: Math.round(n / this.pixelRatio)
                    }), this._setCameraState()), this.initialized = !0, i;
                }
            },
            {
                key: "getContext",
                value: function() {
                    return this.frame.canvas.getContext("2d");
                }
            },
            {
                key: "_determinePixelRatio",
                value: function() {
                    var t = this.getContext();
                    if (void 0 === t) throw new Error("Could not get canvax context");
                    var e = 1;
                    return "undefined" != typeof window && (e = window.devicePixelRatio || 1), e / (t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1);
                }
            },
            {
                key: "_setPixelRatio",
                value: function() {
                    this.pixelRatio = this._determinePixelRatio();
                }
            },
            {
                key: "setTransform",
                value: function() {
                    var t = this.getContext();
                    if (void 0 === t) throw new Error("Could not get canvax context");
                    t.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                }
            },
            {
                key: "_XconvertDOMtoCanvas",
                value: function(t) {
                    return (t - this.body.view.translation.x) / this.body.view.scale;
                }
            },
            {
                key: "_XconvertCanvasToDOM",
                value: function(t) {
                    return t * this.body.view.scale + this.body.view.translation.x;
                }
            },
            {
                key: "_YconvertDOMtoCanvas",
                value: function(t) {
                    return (t - this.body.view.translation.y) / this.body.view.scale;
                }
            },
            {
                key: "_YconvertCanvasToDOM",
                value: function(t) {
                    return t * this.body.view.scale + this.body.view.translation.y;
                }
            },
            {
                key: "canvasToDOM",
                value: function(t) {
                    return {
                        x: this._XconvertCanvasToDOM(t.x),
                        y: this._YconvertCanvasToDOM(t.y)
                    };
                }
            },
            {
                key: "DOMtoCanvas",
                value: function(t) {
                    return {
                        x: this._XconvertDOMtoCanvas(t.x),
                        y: this._YconvertDOMtoCanvas(t.y)
                    };
                }
            }
        ]), t;
    }();
    var SO = function() {
        function t(e, i) {
            var o, n, r = this;
            vh(this, t), this.body = e, this.canvas = i, this.animationSpeed = 1 / this.renderRefreshRate, this.animationEasingFunction = "easeInOutQuint", this.easingTime = 0, this.sourceScale = 0, this.targetScale = 0, this.sourceTranslation = 0, this.targetTranslation = 0, this.lockedOnNodeId = void 0, this.lockedOnNodeOffset = void 0, this.touchTime = 0, this.viewFunction = void 0, this.body.emitter.on("fit", Wo(o = this.fit).call(o, this)), this.body.emitter.on("animationFinished", function() {
                r.body.emitter.emit("_stopRendering");
            }), this.body.emitter.on("unlockNode", Wo(n = this.releaseNode).call(n, this));
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    this.options = t;
                }
            },
            {
                key: "fit",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    t = function(t, e) {
                        var i = wo({
                            nodes: e,
                            minZoomLevel: Number.MIN_VALUE,
                            maxZoomLevel: 1
                        }, null != t ? t : {});
                        if (!Of(i.nodes)) throw new TypeError("Nodes has to be an array of ids.");
                        if (0 === i.nodes.length && (i.nodes = e), !("number" == typeof i.minZoomLevel && i.minZoomLevel > 0)) throw new TypeError("Min zoom level has to be a number higher than zero.");
                        if (!("number" == typeof i.maxZoomLevel && i.minZoomLevel <= i.maxZoomLevel)) throw new TypeError("Max zoom level has to be a number higher than min zoom level.");
                        return i;
                    }(t, this.body.nodeIndices);
                    var i, o, n = this.canvas.frame.canvas.clientWidth, r = this.canvas.frame.canvas.clientHeight;
                    if (0 === n || 0 === r) o = 1, i = mO.getRange(this.body.nodes, t.nodes);
                    else if (!0 === e) {
                        var s = 0;
                        for(var a in this.body.nodes)if (Object.prototype.hasOwnProperty.call(this.body.nodes, a)) !0 === this.body.nodes[a].predefinedPosition && (s += 1);
                        if (s > .5 * this.body.nodeIndices.length) return void this.fit(t, !1);
                        i = mO.getRange(this.body.nodes, t.nodes), o = 12.662 / (this.body.nodeIndices.length + 7.4147) + .0964822, o *= Math.min(n / 600, r / 600);
                    } else {
                        this.body.emitter.emit("_resizeNodes"), i = mO.getRange(this.body.nodes, t.nodes);
                        var h = n / (1.1 * Math.abs(i.maxX - i.minX)), d = r / (1.1 * Math.abs(i.maxY - i.minY));
                        o = h <= d ? h : d;
                    }
                    o > t.maxZoomLevel ? o = t.maxZoomLevel : o < t.minZoomLevel && (o = t.minZoomLevel);
                    var l = {
                        position: mO.findCenter(i),
                        scale: o,
                        animation: t.animation
                    };
                    this.moveTo(l);
                }
            },
            {
                key: "focus",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    if (void 0 !== this.body.nodes[t]) {
                        var i = {
                            x: this.body.nodes[t].x,
                            y: this.body.nodes[t].y
                        };
                        e.position = i, e.lockedOnNode = t, this.moveTo(e);
                    } else console.error("Node: " + t + " cannot be found.");
                }
            },
            {
                key: "moveTo",
                value: function(t) {
                    if (void 0 !== t) {
                        if (null != t.offset) {
                            if (null != t.offset.x) {
                                if (t.offset.x = +t.offset.x, !Tk(t.offset.x)) throw new TypeError('The option "offset.x" has to be a finite number.');
                            } else t.offset.x = 0;
                            if (null != t.offset.y) {
                                if (t.offset.y = +t.offset.y, !Tk(t.offset.y)) throw new TypeError('The option "offset.y" has to be a finite number.');
                            } else t.offset.x = 0;
                        } else t.offset = {
                            x: 0,
                            y: 0
                        };
                        if (null != t.position) {
                            if (null != t.position.x) {
                                if (t.position.x = +t.position.x, !Tk(t.position.x)) throw new TypeError('The option "position.x" has to be a finite number.');
                            } else t.position.x = 0;
                            if (null != t.position.y) {
                                if (t.position.y = +t.position.y, !Tk(t.position.y)) throw new TypeError('The option "position.y" has to be a finite number.');
                            } else t.position.x = 0;
                        } else t.position = this.getViewPosition();
                        if (null != t.scale) {
                            if (t.scale = +t.scale, !(t.scale > 0)) throw new TypeError('The option "scale" has to be a number greater than zero.');
                        } else t.scale = this.body.view.scale;
                        void 0 === t.animation && (t.animation = {
                            duration: 0
                        }), !1 === t.animation && (t.animation = {
                            duration: 0
                        }), !0 === t.animation && (t.animation = {}), void 0 === t.animation.duration && (t.animation.duration = 1e3), void 0 === t.animation.easingFunction && (t.animation.easingFunction = "easeInOutQuad"), this.animateView(t);
                    } else t = {};
                }
            },
            {
                key: "animateView",
                value: function(t) {
                    if (void 0 !== t) {
                        this.animationEasingFunction = t.animation.easingFunction, this.releaseNode(), !0 === t.locked && (this.lockedOnNodeId = t.lockedOnNode, this.lockedOnNodeOffset = t.offset), 0 != this.easingTime && this._transitionRedraw(!0), this.sourceScale = this.body.view.scale, this.sourceTranslation = this.body.view.translation, this.targetScale = t.scale, this.body.view.scale = this.targetScale;
                        var e, i, o = this.canvas.DOMtoCanvas({
                            x: .5 * this.canvas.frame.canvas.clientWidth,
                            y: .5 * this.canvas.frame.canvas.clientHeight
                        }), n = o.x - t.position.x, r = o.y - t.position.y;
                        if (this.targetTranslation = {
                            x: this.sourceTranslation.x + n * this.targetScale + t.offset.x,
                            y: this.sourceTranslation.y + r * this.targetScale + t.offset.y
                        }, 0 === t.animation.duration) {
                            if (null != this.lockedOnNodeId) this.viewFunction = Wo(e = this._lockedRedraw).call(e, this), this.body.emitter.on("initRedraw", this.viewFunction);
                            else this.body.view.scale = this.targetScale, this.body.view.translation = this.targetTranslation, this.body.emitter.emit("_requestRedraw");
                        } else this.animationSpeed = 1 / (60 * t.animation.duration * .001) || 1 / 60, this.animationEasingFunction = t.animation.easingFunction, this.viewFunction = Wo(i = this._transitionRedraw).call(i, this), this.body.emitter.on("initRedraw", this.viewFunction), this.body.emitter.emit("_startRendering");
                    }
                }
            },
            {
                key: "_lockedRedraw",
                value: function() {
                    var t = this.body.nodes[this.lockedOnNodeId].x, e = this.body.nodes[this.lockedOnNodeId].y, i = this.canvas.DOMtoCanvas({
                        x: .5 * this.canvas.frame.canvas.clientWidth,
                        y: .5 * this.canvas.frame.canvas.clientHeight
                    }), o = i.x - t, n = i.y - e, r = this.body.view.translation, s = {
                        x: r.x + o * this.body.view.scale + this.lockedOnNodeOffset.x,
                        y: r.y + n * this.body.view.scale + this.lockedOnNodeOffset.y
                    };
                    this.body.view.translation = s;
                }
            },
            {
                key: "releaseNode",
                value: function() {
                    void 0 !== this.lockedOnNodeId && void 0 !== this.viewFunction && (this.body.emitter.off("initRedraw", this.viewFunction), this.lockedOnNodeId = void 0, this.lockedOnNodeOffset = void 0);
                }
            },
            {
                key: "_transitionRedraw",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    this.easingTime += this.animationSpeed, this.easingTime = !0 === t ? 1 : this.easingTime;
                    var e = Jm[this.animationEasingFunction](this.easingTime);
                    if (this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * e, this.body.view.translation = {
                        x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * e,
                        y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * e
                    }, this.easingTime >= 1) {
                        var i;
                        if (this.body.emitter.off("initRedraw", this.viewFunction), this.easingTime = 0, null != this.lockedOnNodeId) this.viewFunction = Wo(i = this._lockedRedraw).call(i, this), this.body.emitter.on("initRedraw", this.viewFunction);
                        this.body.emitter.emit("animationFinished");
                    }
                }
            },
            {
                key: "getScale",
                value: function() {
                    return this.body.view.scale;
                }
            },
            {
                key: "getViewPosition",
                value: function() {
                    return this.canvas.DOMtoCanvas({
                        x: .5 * this.canvas.frame.canvas.clientWidth,
                        y: .5 * this.canvas.frame.canvas.clientHeight
                    });
                }
            }
        ]), t;
    }();
    function TO(t) {
        var e, i = t && t.preventDefault || !1, o = t && t.container || window, n = {}, r = {
            keydown: {},
            keyup: {}
        }, s = {};
        for(e = 97; e <= 122; e++)s[String.fromCharCode(e)] = {
            code: e - 97 + 65,
            shift: !1
        };
        for(e = 65; e <= 90; e++)s[String.fromCharCode(e)] = {
            code: e,
            shift: !0
        };
        for(e = 0; e <= 9; e++)s["" + e] = {
            code: 48 + e,
            shift: !1
        };
        for(e = 1; e <= 12; e++)s["F" + e] = {
            code: 111 + e,
            shift: !1
        };
        for(e = 0; e <= 9; e++)s["num" + e] = {
            code: 96 + e,
            shift: !1
        };
        s["num*"] = {
            code: 106,
            shift: !1
        }, s["num+"] = {
            code: 107,
            shift: !1
        }, s["num-"] = {
            code: 109,
            shift: !1
        }, s["num/"] = {
            code: 111,
            shift: !1
        }, s["num."] = {
            code: 110,
            shift: !1
        }, s.left = {
            code: 37,
            shift: !1
        }, s.up = {
            code: 38,
            shift: !1
        }, s.right = {
            code: 39,
            shift: !1
        }, s.down = {
            code: 40,
            shift: !1
        }, s.space = {
            code: 32,
            shift: !1
        }, s.enter = {
            code: 13,
            shift: !1
        }, s.shift = {
            code: 16,
            shift: void 0
        }, s.esc = {
            code: 27,
            shift: !1
        }, s.backspace = {
            code: 8,
            shift: !1
        }, s.tab = {
            code: 9,
            shift: !1
        }, s.ctrl = {
            code: 17,
            shift: !1
        }, s.alt = {
            code: 18,
            shift: !1
        }, s.delete = {
            code: 46,
            shift: !1
        }, s.pageup = {
            code: 33,
            shift: !1
        }, s.pagedown = {
            code: 34,
            shift: !1
        }, s["="] = {
            code: 187,
            shift: !1
        }, s["-"] = {
            code: 189,
            shift: !1
        }, s["]"] = {
            code: 221,
            shift: !1
        }, s["["] = {
            code: 219,
            shift: !1
        };
        var a = function(t) {
            d(t, "keydown");
        }, h = function(t) {
            d(t, "keyup");
        }, d = function(t, e) {
            if (void 0 !== r[e][t.keyCode]) {
                for(var o = r[e][t.keyCode], n = 0; n < o.length; n++)(void 0 === o[n].shift || 1 == o[n].shift && 1 == t.shiftKey || 0 == o[n].shift && 0 == t.shiftKey) && o[n].fn(t);
                1 == i && t.preventDefault();
            }
        };
        return n.bind = function(t, e, i) {
            if (void 0 === i && (i = "keydown"), void 0 === s[t]) throw new Error("unsupported key: " + t);
            void 0 === r[i][s[t].code] && (r[i][s[t].code] = []), r[i][s[t].code].push({
                fn: e,
                shift: s[t].shift
            });
        }, n.bindAll = function(t, e) {
            for(var i in void 0 === e && (e = "keydown"), s)s.hasOwnProperty(i) && n.bind(i, t, e);
        }, n.getKey = function(t) {
            for(var e in s)if (s.hasOwnProperty(e)) {
                if (1 == t.shiftKey && 1 == s[e].shift && t.keyCode == s[e].code) return e;
                if (0 == t.shiftKey && 0 == s[e].shift && t.keyCode == s[e].code) return e;
                if (t.keyCode == s[e].code && "shift" == e) return e;
            }
            return "unknown key, currently not supported";
        }, n.unbind = function(t, e, i) {
            if (void 0 === i && (i = "keydown"), void 0 === s[t]) throw new Error("unsupported key: " + t);
            if (void 0 !== e) {
                var o = [], n = r[i][s[t].code];
                if (void 0 !== n) for(var a = 0; a < n.length; a++)n[a].fn == e && n[a].shift == s[t].shift || o.push(r[i][s[t].code][a]);
                r[i][s[t].code] = o;
            } else r[i][s[t].code] = [];
        }, n.reset = function() {
            r = {
                keydown: {},
                keyup: {}
            };
        }, n.destroy = function() {
            r = {
                keydown: {},
                keyup: {}
            }, o.removeEventListener("keydown", a, !0), o.removeEventListener("keyup", h, !0);
        }, o.addEventListener("keydown", a, !0), o.addEventListener("keyup", h, !0), n;
    }
    var MO = function() {
        function t(e, i) {
            var o = this;
            vh(this, t), this.body = e, this.canvas = i, this.iconsCreated = !1, this.navigationHammers = [], this.boundFunctions = {}, this.touchTime = 0, this.activated = !1, this.body.emitter.on("activate", function() {
                o.activated = !0, o.configureKeyboardBindings();
            }), this.body.emitter.on("deactivate", function() {
                o.activated = !1, o.configureKeyboardBindings();
            }), this.body.emitter.on("destroy", function() {
                void 0 !== o.keycharm && o.keycharm.destroy();
            }), this.options = {};
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    void 0 !== t && (this.options = t, this.create());
                }
            },
            {
                key: "create",
                value: function() {
                    !0 === this.options.navigationButtons ? !1 === this.iconsCreated && this.loadNavigationElements() : !0 === this.iconsCreated && this.cleanNavigation(), this.configureKeyboardBindings();
                }
            },
            {
                key: "cleanNavigation",
                value: function() {
                    if (0 != this.navigationHammers.length) {
                        for(var t = 0; t < this.navigationHammers.length; t++)this.navigationHammers[t].destroy();
                        this.navigationHammers = [];
                    }
                    this.navigationDOM && this.navigationDOM.wrapper && this.navigationDOM.wrapper.parentNode && this.navigationDOM.wrapper.parentNode.removeChild(this.navigationDOM.wrapper), this.iconsCreated = !1;
                }
            },
            {
                key: "loadNavigationElements",
                value: function() {
                    var t = this;
                    this.cleanNavigation(), this.navigationDOM = {};
                    var e = [
                        "up",
                        "down",
                        "left",
                        "right",
                        "zoomIn",
                        "zoomOut",
                        "zoomExtends"
                    ], i = [
                        "_moveUp",
                        "_moveDown",
                        "_moveLeft",
                        "_moveRight",
                        "_zoomIn",
                        "_zoomOut",
                        "_fit"
                    ];
                    this.navigationDOM.wrapper = document.createElement("div"), this.navigationDOM.wrapper.className = "vis-navigation", this.canvas.frame.appendChild(this.navigationDOM.wrapper);
                    for(var o = 0; o < e.length; o++){
                        this.navigationDOM[e[o]] = document.createElement("div"), this.navigationDOM[e[o]].className = "vis-button vis-" + e[o], this.navigationDOM.wrapper.appendChild(this.navigationDOM[e[o]]);
                        var n, r, s = new ub(this.navigationDOM[e[o]]);
                        if ("_fit" === i[o]) EO(s, Wo(n = this._fit).call(n, this));
                        else EO(s, Wo(r = this.bindToRedraw).call(r, this, i[o]));
                        this.navigationHammers.push(s);
                    }
                    var a = new ub(this.canvas.frame);
                    OO(a, function() {
                        t._stopMovement();
                    }), this.navigationHammers.push(a), this.iconsCreated = !0;
                }
            },
            {
                key: "bindToRedraw",
                value: function(t) {
                    var e;
                    void 0 === this.boundFunctions[t] && (this.boundFunctions[t] = Wo(e = this[t]).call(e, this), this.body.emitter.on("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_startRendering"));
                }
            },
            {
                key: "unbindFromRedraw",
                value: function(t) {
                    void 0 !== this.boundFunctions[t] && (this.body.emitter.off("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_stopRendering"), delete this.boundFunctions[t]);
                }
            },
            {
                key: "_fit",
                value: function() {
                    (new Date).valueOf() - this.touchTime > 700 && (this.body.emitter.emit("fit", {
                        duration: 700
                    }), this.touchTime = (new Date).valueOf());
                }
            },
            {
                key: "_stopMovement",
                value: function() {
                    for(var t in this.boundFunctions)Object.prototype.hasOwnProperty.call(this.boundFunctions, t) && (this.body.emitter.off("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_stopRendering"));
                    this.boundFunctions = {};
                }
            },
            {
                key: "_moveUp",
                value: function() {
                    this.body.view.translation.y += this.options.keyboard.speed.y;
                }
            },
            {
                key: "_moveDown",
                value: function() {
                    this.body.view.translation.y -= this.options.keyboard.speed.y;
                }
            },
            {
                key: "_moveLeft",
                value: function() {
                    this.body.view.translation.x += this.options.keyboard.speed.x;
                }
            },
            {
                key: "_moveRight",
                value: function() {
                    this.body.view.translation.x -= this.options.keyboard.speed.x;
                }
            },
            {
                key: "_zoomIn",
                value: function() {
                    var t = this.body.view.scale, e = this.body.view.scale * (1 + this.options.keyboard.speed.zoom), i = this.body.view.translation, o = e / t, n = (1 - o) * this.canvas.canvasViewCenter.x + i.x * o, r = (1 - o) * this.canvas.canvasViewCenter.y + i.y * o;
                    this.body.view.scale = e, this.body.view.translation = {
                        x: n,
                        y: r
                    }, this.body.emitter.emit("zoom", {
                        direction: "+",
                        scale: this.body.view.scale,
                        pointer: null
                    });
                }
            },
            {
                key: "_zoomOut",
                value: function() {
                    var t = this.body.view.scale, e = this.body.view.scale / (1 + this.options.keyboard.speed.zoom), i = this.body.view.translation, o = e / t, n = (1 - o) * this.canvas.canvasViewCenter.x + i.x * o, r = (1 - o) * this.canvas.canvasViewCenter.y + i.y * o;
                    this.body.view.scale = e, this.body.view.translation = {
                        x: n,
                        y: r
                    }, this.body.emitter.emit("zoom", {
                        direction: "-",
                        scale: this.body.view.scale,
                        pointer: null
                    });
                }
            },
            {
                key: "configureKeyboardBindings",
                value: function() {
                    var t, e, i, o, n, r, s, a, h, d, l, c, u, f, p, v, g, y, m, b, w, k, _, x, E = this;
                    (void 0 !== this.keycharm && this.keycharm.destroy(), !0 === this.options.keyboard.enabled) && (!0 === this.options.keyboard.bindToWindow ? this.keycharm = TO({
                        container: window,
                        preventDefault: !0
                    }) : this.keycharm = TO({
                        container: this.canvas.frame,
                        preventDefault: !0
                    }), this.keycharm.reset(), !0 === this.activated && (Wo(t = this.keycharm).call(t, "up", function() {
                        E.bindToRedraw("_moveUp");
                    }, "keydown"), Wo(e = this.keycharm).call(e, "down", function() {
                        E.bindToRedraw("_moveDown");
                    }, "keydown"), Wo(i = this.keycharm).call(i, "left", function() {
                        E.bindToRedraw("_moveLeft");
                    }, "keydown"), Wo(o = this.keycharm).call(o, "right", function() {
                        E.bindToRedraw("_moveRight");
                    }, "keydown"), Wo(n = this.keycharm).call(n, "=", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), Wo(r = this.keycharm).call(r, "num+", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), Wo(s = this.keycharm).call(s, "num-", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), Wo(a = this.keycharm).call(a, "-", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), Wo(h = this.keycharm).call(h, "[", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), Wo(d = this.keycharm).call(d, "]", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), Wo(l = this.keycharm).call(l, "pageup", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), Wo(c = this.keycharm).call(c, "pagedown", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), Wo(u = this.keycharm).call(u, "up", function() {
                        E.unbindFromRedraw("_moveUp");
                    }, "keyup"), Wo(f = this.keycharm).call(f, "down", function() {
                        E.unbindFromRedraw("_moveDown");
                    }, "keyup"), Wo(p = this.keycharm).call(p, "left", function() {
                        E.unbindFromRedraw("_moveLeft");
                    }, "keyup"), Wo(v = this.keycharm).call(v, "right", function() {
                        E.unbindFromRedraw("_moveRight");
                    }, "keyup"), Wo(g = this.keycharm).call(g, "=", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), Wo(y = this.keycharm).call(y, "num+", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), Wo(m = this.keycharm).call(m, "num-", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup"), Wo(b = this.keycharm).call(b, "-", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup"), Wo(w = this.keycharm).call(w, "[", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup"), Wo(k = this.keycharm).call(k, "]", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), Wo(_ = this.keycharm).call(_, "pageup", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), Wo(x = this.keycharm).call(x, "pagedown", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup")));
                }
            }
        ]), t;
    }();
    function PO(t, e) {
        var i = void 0 !== cf && ph(t) || t["@@iterator"];
        if (!i) {
            if (Of(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return DO(t, e);
                var o = mf(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return Xa(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return DO(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function DO(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    var IO = function() {
        function t(e, i, o) {
            var n, r, s, a, h, d, l, c, u, f, p, v, g;
            vh(this, t), this.body = e, this.canvas = i, this.selectionHandler = o, this.navigationHandler = new MO(e, i), this.body.eventListeners.onTap = Wo(n = this.onTap).call(n, this), this.body.eventListeners.onTouch = Wo(r = this.onTouch).call(r, this), this.body.eventListeners.onDoubleTap = Wo(s = this.onDoubleTap).call(s, this), this.body.eventListeners.onHold = Wo(a = this.onHold).call(a, this), this.body.eventListeners.onDragStart = Wo(h = this.onDragStart).call(h, this), this.body.eventListeners.onDrag = Wo(d = this.onDrag).call(d, this), this.body.eventListeners.onDragEnd = Wo(l = this.onDragEnd).call(l, this), this.body.eventListeners.onMouseWheel = Wo(c = this.onMouseWheel).call(c, this), this.body.eventListeners.onPinch = Wo(u = this.onPinch).call(u, this), this.body.eventListeners.onMouseMove = Wo(f = this.onMouseMove).call(f, this), this.body.eventListeners.onRelease = Wo(p = this.onRelease).call(p, this), this.body.eventListeners.onContext = Wo(v = this.onContext).call(v, this), this.touchTime = 0, this.drag = {}, this.pinch = {}, this.popup = void 0, this.popupObj = void 0, this.popupTimer = void 0, this.body.functions.getPointer = Wo(g = this.getPointer).call(g, this), this.options = {}, this.defaultOptions = {
                dragNodes: !0,
                dragView: !0,
                hover: !1,
                keyboard: {
                    enabled: !1,
                    speed: {
                        x: 10,
                        y: 10,
                        zoom: .02
                    },
                    bindToWindow: !0,
                    autoFocus: !0
                },
                navigationButtons: !1,
                tooltipDelay: 300,
                zoomView: !0,
                zoomSpeed: 1
            }, wo(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return wu(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t = this;
                    this.body.emitter.on("destroy", function() {
                        clearTimeout(t.popupTimer), delete t.body.functions.getPointer;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) Am([
                        "hideEdgesOnDrag",
                        "hideEdgesOnZoom",
                        "hideNodesOnDrag",
                        "keyboard",
                        "multiselect",
                        "selectable",
                        "selectConnectedEdges"
                    ], this.options, t), Qm(this.options, t, "keyboard"), t.tooltip && (wo(this.options.tooltip, t.tooltip), t.tooltip.color && (this.options.tooltip.color = Um(t.tooltip.color)));
                    this.navigationHandler.setOptions(this.options);
                }
            },
            {
                key: "getPointer",
                value: function(t) {
                    var e;
                    return {
                        x: t.x - (e = this.canvas.frame.canvas, e.getBoundingClientRect().left),
                        y: t.y - Lm(this.canvas.frame.canvas)
                    };
                }
            },
            {
                key: "onTouch",
                value: function(t) {
                    (new Date).valueOf() - this.touchTime > 50 && (this.drag.pointer = this.getPointer(t.center), this.drag.pinched = !1, this.pinch.scale = this.body.view.scale, this.touchTime = (new Date).valueOf());
                }
            },
            {
                key: "onTap",
                value: function(t) {
                    var e = this.getPointer(t.center), i = this.selectionHandler.options.multiselect && (t.changedPointers[0].ctrlKey || t.changedPointers[0].metaKey);
                    this.checkSelectionChanges(e, i), this.selectionHandler.commitAndEmit(e, t), this.selectionHandler.generateClickEvent("click", t, e);
                }
            },
            {
                key: "onDoubleTap",
                value: function(t) {
                    var e = this.getPointer(t.center);
                    this.selectionHandler.generateClickEvent("doubleClick", t, e);
                }
            },
            {
                key: "onHold",
                value: function(t) {
                    var e = this.getPointer(t.center), i = this.selectionHandler.options.multiselect;
                    this.checkSelectionChanges(e, i), this.selectionHandler.commitAndEmit(e, t), this.selectionHandler.generateClickEvent("click", t, e), this.selectionHandler.generateClickEvent("hold", t, e);
                }
            },
            {
                key: "onRelease",
                value: function(t) {
                    if ((new Date).valueOf() - this.touchTime > 10) {
                        var e = this.getPointer(t.center);
                        this.selectionHandler.generateClickEvent("release", t, e), this.touchTime = (new Date).valueOf();
                    }
                }
            },
            {
                key: "onContext",
                value: function(t) {
                    var e = this.getPointer({
                        x: t.clientX,
                        y: t.clientY
                    });
                    this.selectionHandler.generateClickEvent("oncontext", t, e);
                }
            },
            {
                key: "checkSelectionChanges",
                value: function(t) {
                    !0 === (arguments.length > 1 && void 0 !== arguments[1] && arguments[1]) ? this.selectionHandler.selectAdditionalOnPoint(t) : this.selectionHandler.selectOnPoint(t);
                }
            },
            {
                key: "_determineDifference",
                value: function(t, e) {
                    var i = function(t, e) {
                        for(var i = [], o = 0; o < t.length; o++){
                            var n = t[o];
                            -1 === Vv(e).call(e, n) && i.push(n);
                        }
                        return i;
                    };
                    return {
                        nodes: i(t.nodes, e.nodes),
                        edges: i(t.edges, e.edges)
                    };
                }
            },
            {
                key: "onDragStart",
                value: function(t) {
                    if (!this.drag.dragging) {
                        void 0 === this.drag.pointer && this.onTouch(t);
                        var e = this.selectionHandler.getNodeAt(this.drag.pointer);
                        if (this.drag.dragging = !0, this.drag.selection = [], this.drag.translation = wo({}, this.body.view.translation), this.drag.nodeId = void 0, t.srcEvent.shiftKey) {
                            this.body.selectionBox.show = !0;
                            var i = this.getPointer(t.center);
                            this.body.selectionBox.position.start = {
                                x: this.canvas._XconvertDOMtoCanvas(i.x),
                                y: this.canvas._YconvertDOMtoCanvas(i.y)
                            }, this.body.selectionBox.position.end = {
                                x: this.canvas._XconvertDOMtoCanvas(i.x),
                                y: this.canvas._YconvertDOMtoCanvas(i.y)
                            };
                        } else if (void 0 !== e && !0 === this.options.dragNodes) {
                            this.drag.nodeId = e.id, !1 === e.isSelected() && this.selectionHandler.setSelection({
                                nodes: [
                                    e.id
                                ]
                            }), this.selectionHandler.generateClickEvent("dragStart", t, this.drag.pointer);
                            var o, n = PO(this.selectionHandler.getSelectedNodes());
                            try {
                                for(n.s(); !(o = n.n()).done;){
                                    var r = o.value, s = {
                                        id: r.id,
                                        node: r,
                                        x: r.x,
                                        y: r.y,
                                        xFixed: r.options.fixed.x,
                                        yFixed: r.options.fixed.y
                                    };
                                    r.options.fixed.x = !0, r.options.fixed.y = !0, this.drag.selection.push(s);
                                }
                            } catch (t) {
                                n.e(t);
                            } finally{
                                n.f();
                            }
                        } else this.selectionHandler.generateClickEvent("dragStart", t, this.drag.pointer, void 0, !0);
                    }
                }
            },
            {
                key: "onDrag",
                value: function(t) {
                    var e = this;
                    if (!0 !== this.drag.pinched) {
                        this.body.emitter.emit("unlockNode");
                        var i = this.getPointer(t.center), o = this.drag.selection;
                        if (o && o.length && !0 === this.options.dragNodes) {
                            this.selectionHandler.generateClickEvent("dragging", t, i);
                            var n = i.x - this.drag.pointer.x, r = i.y - this.drag.pointer.y;
                            Qf(o).call(o, function(t) {
                                var i = t.node;
                                !1 === t.xFixed && (i.x = e.canvas._XconvertDOMtoCanvas(e.canvas._XconvertCanvasToDOM(t.x) + n)), !1 === t.yFixed && (i.y = e.canvas._YconvertDOMtoCanvas(e.canvas._YconvertCanvasToDOM(t.y) + r));
                            }), this.body.emitter.emit("startSimulation");
                        } else {
                            if (t.srcEvent.shiftKey) {
                                if (this.selectionHandler.generateClickEvent("dragging", t, i, void 0, !0), void 0 === this.drag.pointer) return void this.onDragStart(t);
                                this.body.selectionBox.position.end = {
                                    x: this.canvas._XconvertDOMtoCanvas(i.x),
                                    y: this.canvas._YconvertDOMtoCanvas(i.y)
                                }, this.body.emitter.emit("_requestRedraw");
                            }
                            if (!0 === this.options.dragView && !t.srcEvent.shiftKey) {
                                if (this.selectionHandler.generateClickEvent("dragging", t, i, void 0, !0), void 0 === this.drag.pointer) return void this.onDragStart(t);
                                var s = i.x - this.drag.pointer.x, a = i.y - this.drag.pointer.y;
                                this.body.view.translation = {
                                    x: this.drag.translation.x + s,
                                    y: this.drag.translation.y + a
                                }, this.body.emitter.emit("_requestRedraw");
                            }
                        }
                    }
                }
            },
            {
                key: "onDragEnd",
                value: function(t) {
                    var e = this;
                    if (this.drag.dragging = !1, this.body.selectionBox.show) {
                        var i;
                        this.body.selectionBox.show = !1;
                        var o = this.body.selectionBox.position, n = {
                            minX: Math.min(o.start.x, o.end.x),
                            minY: Math.min(o.start.y, o.end.y),
                            maxX: Math.max(o.start.x, o.end.x),
                            maxY: Math.max(o.start.y, o.end.y)
                        }, r = lv(i = this.body.nodeIndices).call(i, function(t) {
                            var i = e.body.nodes[t];
                            return i.x >= n.minX && i.x <= n.maxX && i.y >= n.minY && i.y <= n.maxY;
                        });
                        Qf(r).call(r, function(t) {
                            return e.selectionHandler.selectObject(e.body.nodes[t]);
                        });
                        var s = this.getPointer(t.center);
                        this.selectionHandler.commitAndEmit(s, t), this.selectionHandler.generateClickEvent("dragEnd", t, this.getPointer(t.center), void 0, !0), this.body.emitter.emit("_requestRedraw");
                    } else {
                        var a = this.drag.selection;
                        a && a.length ? (Qf(a).call(a, function(t) {
                            t.node.options.fixed.x = t.xFixed, t.node.options.fixed.y = t.yFixed;
                        }), this.selectionHandler.generateClickEvent("dragEnd", t, this.getPointer(t.center)), this.body.emitter.emit("startSimulation")) : (this.selectionHandler.generateClickEvent("dragEnd", t, this.getPointer(t.center), void 0, !0), this.body.emitter.emit("_requestRedraw"));
                    }
                }
            },
            {
                key: "onPinch",
                value: function(t) {
                    var e = this.getPointer(t.center);
                    this.drag.pinched = !0, void 0 === this.pinch.scale && (this.pinch.scale = 1);
                    var i = this.pinch.scale * t.scale;
                    this.zoom(i, e);
                }
            },
            {
                key: "zoom",
                value: function(t, e) {
                    if (!0 === this.options.zoomView) {
                        var i = this.body.view.scale;
                        t < 1e-5 && (t = 1e-5), t > 10 && (t = 10);
                        var o = void 0;
                        void 0 !== this.drag && !0 === this.drag.dragging && (o = this.canvas.DOMtoCanvas(this.drag.pointer));
                        var n = this.body.view.translation, r = t / i, s = (1 - r) * e.x + n.x * r, a = (1 - r) * e.y + n.y * r;
                        if (this.body.view.scale = t, this.body.view.translation = {
                            x: s,
                            y: a
                        }, null != o) {
                            var h = this.canvas.canvasToDOM(o);
                            this.drag.pointer.x = h.x, this.drag.pointer.y = h.y;
                        }
                        this.body.emitter.emit("_requestRedraw"), i < t ? this.body.emitter.emit("zoom", {
                            direction: "+",
                            scale: this.body.view.scale,
                            pointer: e
                        }) : this.body.emitter.emit("zoom", {
                            direction: "-",
                            scale: this.body.view.scale,
                            pointer: e
                        });
                    }
                }
            },
            {
                key: "onMouseWheel",
                value: function(t) {
                    if (!0 === this.options.zoomView) {
                        if (0 !== t.deltaY) {
                            var e = this.body.view.scale;
                            e *= 1 + (t.deltaY < 0 ? 1 : -1) * (.1 * this.options.zoomSpeed);
                            var i = this.getPointer({
                                x: t.clientX,
                                y: t.clientY
                            });
                            this.zoom(e, i);
                        }
                        t.preventDefault();
                    }
                }
            },
            {
                key: "onMouseMove",
                value: function(t) {
                    var e = this, i = this.getPointer({
                        x: t.clientX,
                        y: t.clientY
                    }), o = !1;
                    void 0 !== this.popup && (!1 === this.popup.hidden && this._checkHidePopup(i), !1 === this.popup.hidden && (o = !0, this.popup.setPosition(i.x + 3, i.y - 5), this.popup.show())), this.options.keyboard.autoFocus && !1 === this.options.keyboard.bindToWindow && !0 === this.options.keyboard.enabled && this.canvas.frame.focus(), !1 === o && (void 0 !== this.popupTimer && (clearInterval(this.popupTimer), this.popupTimer = void 0), this.drag.dragging || (this.popupTimer = vg(function() {
                        return e._checkShowPopup(i);
                    }, this.options.tooltipDelay))), !0 === this.options.hover && this.selectionHandler.hoverObject(t, i);
                }
            },
            {
                key: "_checkShowPopup",
                value: function(t) {
                    var e = this.canvas._XconvertDOMtoCanvas(t.x), i = this.canvas._YconvertDOMtoCanvas(t.y), o = {
                        left: e,
                        top: i,
                        right: e,
                        bottom: i
                    }, n = void 0 === this.popupObj ? void 0 : this.popupObj.id, r = !1, s = "node";
                    if (void 0 === this.popupObj) {
                        for(var a, h = this.body.nodeIndices, d = this.body.nodes, l = [], c = 0; c < h.length; c++)!0 === (a = d[h[c]]).isOverlappingWith(o) && (r = !0, void 0 !== a.getTitle() && l.push(h[c]));
                        l.length > 0 && (this.popupObj = d[l[l.length - 1]], r = !0);
                    }
                    if (void 0 === this.popupObj && !1 === r) {
                        for(var u, f = this.body.edgeIndices, p = this.body.edges, v = [], g = 0; g < f.length; g++)!0 === (u = p[f[g]]).isOverlappingWith(o) && !0 === u.connected && void 0 !== u.getTitle() && v.push(f[g]);
                        v.length > 0 && (this.popupObj = p[v[v.length - 1]], s = "edge");
                    }
                    void 0 !== this.popupObj ? this.popupObj.id !== n && (void 0 === this.popup && (this.popup = new fb(this.canvas.frame)), this.popup.popupTargetType = s, this.popup.popupTargetId = this.popupObj.id, this.popup.setPosition(t.x + 3, t.y - 5), this.popup.setText(this.popupObj.getTitle()), this.popup.show(), this.body.emitter.emit("showPopup", this.popupObj.id)) : void 0 !== this.popup && (this.popup.hide(), this.body.emitter.emit("hidePopup"));
                }
            },
            {
                key: "_checkHidePopup",
                value: function(t) {
                    var e = this.selectionHandler._pointerToPositionObject(t), i = !1;
                    if ("node" === this.popup.popupTargetType) {
                        if (void 0 !== this.body.nodes[this.popup.popupTargetId] && !0 === (i = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(e))) {
                            var o = this.selectionHandler.getNodeAt(t);
                            i = void 0 !== o && o.id === this.popup.popupTargetId;
                        }
                    } else void 0 === this.selectionHandler.getNodeAt(t) && void 0 !== this.body.edges[this.popup.popupTargetId] && (i = this.body.edges[this.popup.popupTargetId].isOverlappingWith(e));
                    !1 === i && (this.popupObj = void 0, this.popup.hide(), this.body.emitter.emit("hidePopup"));
                }
            }
        ]), t;
    }();
    ek("Set", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, _k);
    var BO = o(it.Set), FO = y, zO = ok, NO = kw.getWeakData, AO = Rw, RO = oi, jO = Y, LO = et, HO = zw, WO = Jt, VO = Hn.set, qO = Hn.getterFor, UO = zd.find, YO = zd.findIndex, XO = FO([].splice), KO = 0, GO = function(t) {
        return t.frozen || (t.frozen = new $O);
    }, $O = function() {
        this.entries = [];
    }, ZO = function(t, e) {
        return UO(t.entries, function(t) {
            return t[0] === e;
        });
    };
    $O.prototype = {
        get: function(t) {
            var e = ZO(this, t);
            if (e) return e[1];
        },
        has: function(t) {
            return !!ZO(this, t);
        },
        set: function(t, e) {
            var i = ZO(this, t);
            i ? i[1] = e : this.entries.push([
                t,
                e
            ]);
        },
        delete: function(t) {
            var e = YO(this.entries, function(e) {
                return e[0] === t;
            });
            return ~e && XO(this.entries, e, 1), !!~e;
        }
    };
    var QO, JO = {
        getConstructor: function(t, e, i, o) {
            var n = t(function(t, n) {
                AO(t, r), VO(t, {
                    type: e,
                    id: KO++,
                    frozen: void 0
                }), jO(n) || HO(n, t[o], {
                    that: t,
                    AS_ENTRIES: i
                });
            }), r = n.prototype, s = qO(e), a = function(t, e, i) {
                var o = s(t), n = NO(RO(e), !0);
                return !0 === n ? GO(o).set(e, i) : n[o.id] = i, t;
            };
            return zO(r, {
                delete: function(t) {
                    var e = s(this);
                    if (!LO(t)) return !1;
                    var i = NO(t);
                    return !0 === i ? GO(e).delete(t) : i && WO(i, e.id) && delete i[e.id];
                },
                has: function(t) {
                    var e = s(this);
                    if (!LO(t)) return !1;
                    var i = NO(t);
                    return !0 === i ? GO(e).has(t) : i && WO(i, e.id);
                }
            }), zO(r, i ? {
                get: function(t) {
                    var e = s(this);
                    if (LO(t)) {
                        var i = NO(t);
                        return !0 === i ? GO(e).get(t) : i ? i[e.id] : void 0;
                    }
                },
                set: function(t, e) {
                    return a(this, t, e);
                }
            } : {
                add: function(t) {
                    return a(this, t, !0);
                }
            }), n;
        }
    }, tC = rw, eC = r, iC = y, oC = ok, nC = kw, rC = ek, sC = JO, aC = et, hC = Hn.enforce, dC = s, lC = En, cC = Object, uC = Array.isArray, fC = cC.isExtensible, pC = cC.isFrozen, vC = cC.isSealed, gC = cC.freeze, yC = cC.seal, mC = {}, bC = {}, wC = !eC.ActiveXObject && "ActiveXObject" in eC, kC = function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, _C = rC("WeakMap", kC, sC), xC = _C.prototype, EC = iC(xC.set);
    if (lC) {
        if (wC) {
            QO = sC.getConstructor(kC, "WeakMap", !0), nC.enable();
            var OC = iC(xC.delete), CC = iC(xC.has), SC = iC(xC.get);
            oC(xC, {
                delete: function(t) {
                    if (aC(t) && !fC(t)) {
                        var e = hC(this);
                        return e.frozen || (e.frozen = new QO), OC(this, t) || e.frozen.delete(t);
                    }
                    return OC(this, t);
                },
                has: function(t) {
                    if (aC(t) && !fC(t)) {
                        var e = hC(this);
                        return e.frozen || (e.frozen = new QO), CC(this, t) || e.frozen.has(t);
                    }
                    return CC(this, t);
                },
                get: function(t) {
                    if (aC(t) && !fC(t)) {
                        var e = hC(this);
                        return e.frozen || (e.frozen = new QO), CC(this, t) ? SC(this, t) : e.frozen.get(t);
                    }
                    return SC(this, t);
                },
                set: function(t, e) {
                    if (aC(t) && !fC(t)) {
                        var i = hC(this);
                        i.frozen || (i.frozen = new QO), CC(this, t) ? EC(this, t, e) : i.frozen.set(t, e);
                    } else EC(this, t, e);
                    return this;
                }
            });
        } else tC && dC(function() {
            var t = gC([]);
            return EC(new _C, t, 1), !pC(t);
        }) && oC(xC, {
            set: function(t, e) {
                var i;
                return uC(t) && (pC(t) ? i = mC : vC(t) && (i = bC)), EC(this, t, e), i === mC && gC(t), i === bC && yC(t), this;
            }
        });
    }
    var TC, MC, PC, DC, IC, BC = o(it.WeakMap);
    function FC(t, e, i, o) {
        if ("a" === i && !o) throw new TypeError("Private accessor was defined without a getter");
        if ("function" == typeof e ? t !== e || !o : !e.has(t)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return "m" === i ? o : "a" === i ? o.call(t) : o ? o.value : e.get(t);
    }
    function zC(t, e, i, o, n) {
        if ("m" === o) throw new TypeError("Private method is not writable");
        if ("a" === o && !n) throw new TypeError("Private accessor was defined without a setter");
        if ("function" == typeof e ? t !== e || !n : !e.has(t)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return "a" === o ? n.call(t, i) : n ? n.value = i : e.set(t, i), i;
    }
    function NC(t, e) {
        var i = void 0 !== cf && ph(t) || t["@@iterator"];
        if (!i) {
            if (Of(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return AC(t, e);
                var o = mf(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return Xa(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return AC(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function AC(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function RC(t, e) {
        var i, o = new BO, n = NC(e);
        try {
            for(n.s(); !(i = n.n()).done;){
                var r = i.value;
                t.has(r) || o.add(r);
            }
        } catch (t) {
            n.e(t);
        } finally{
            n.f();
        }
        return o;
    }
    "function" == typeof SuppressedError && SuppressedError;
    var jC = function() {
        function t() {
            vh(this, t), TC.set(this, new BO), MC.set(this, new BO);
        }
        return wu(t, [
            {
                key: "size",
                get: function() {
                    return FC(this, MC, "f").size;
                }
            },
            {
                key: "add",
                value: function() {
                    for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
                    for(var o = 0, n = e; o < n.length; o++){
                        var r = n[o];
                        FC(this, MC, "f").add(r);
                    }
                }
            },
            {
                key: "delete",
                value: function() {
                    for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
                    for(var o = 0, n = e; o < n.length; o++){
                        var r = n[o];
                        FC(this, MC, "f").delete(r);
                    }
                }
            },
            {
                key: "clear",
                value: function() {
                    FC(this, MC, "f").clear();
                }
            },
            {
                key: "getSelection",
                value: function() {
                    return lf(FC(this, MC, "f"));
                }
            },
            {
                key: "getChanges",
                value: function() {
                    return {
                        added: lf(RC(FC(this, TC, "f"), FC(this, MC, "f"))),
                        deleted: lf(RC(FC(this, MC, "f"), FC(this, TC, "f"))),
                        previous: lf(new BO(FC(this, TC, "f"))),
                        current: lf(new BO(FC(this, MC, "f")))
                    };
                }
            },
            {
                key: "commit",
                value: function() {
                    var t = this.getChanges();
                    zC(this, TC, FC(this, MC, "f"), "f"), zC(this, MC, new BO(FC(this, TC, "f")), "f");
                    var e, i = NC(t.added);
                    try {
                        for(i.s(); !(e = i.n()).done;)e.value.select();
                    } catch (t) {
                        i.e(t);
                    } finally{
                        i.f();
                    }
                    var o, n = NC(t.deleted);
                    try {
                        for(n.s(); !(o = n.n()).done;)o.value.unselect();
                    } catch (t) {
                        n.e(t);
                    } finally{
                        n.f();
                    }
                    return t;
                }
            }
        ]), t;
    }();
    TC = new BC, MC = new BC;
    var LC = function() {
        function t() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function() {};
            vh(this, t), PC.set(this, new jC), DC.set(this, new jC), IC.set(this, void 0), zC(this, IC, e, "f");
        }
        return wu(t, [
            {
                key: "sizeNodes",
                get: function() {
                    return FC(this, PC, "f").size;
                }
            },
            {
                key: "sizeEdges",
                get: function() {
                    return FC(this, DC, "f").size;
                }
            },
            {
                key: "getNodes",
                value: function() {
                    return FC(this, PC, "f").getSelection();
                }
            },
            {
                key: "getEdges",
                value: function() {
                    return FC(this, DC, "f").getSelection();
                }
            },
            {
                key: "addNodes",
                value: function() {
                    var t;
                    (t = FC(this, PC, "f")).add.apply(t, arguments);
                }
            },
            {
                key: "addEdges",
                value: function() {
                    var t;
                    (t = FC(this, DC, "f")).add.apply(t, arguments);
                }
            },
            {
                key: "deleteNodes",
                value: function(t) {
                    FC(this, PC, "f").delete(t);
                }
            },
            {
                key: "deleteEdges",
                value: function(t) {
                    FC(this, DC, "f").delete(t);
                }
            },
            {
                key: "clear",
                value: function() {
                    FC(this, PC, "f").clear(), FC(this, DC, "f").clear();
                }
            },
            {
                key: "commit",
                value: function() {
                    for(var t, e, i = {
                        nodes: FC(this, PC, "f").commit(),
                        edges: FC(this, DC, "f").commit()
                    }, o = arguments.length, n = new Array(o), r = 0; r < o; r++)n[r] = arguments[r];
                    return (t = FC(this, IC, "f")).call.apply(t, yf(e = [
                        this,
                        i
                    ]).call(e, n)), i;
                }
            }
        ]), t;
    }();
    function HC(t, e) {
        var i = void 0 !== cf && ph(t) || t["@@iterator"];
        if (!i) {
            if (Of(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return WC(t, e);
                var o = mf(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return Xa(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return WC(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function WC(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    PC = new BC, DC = new BC, IC = new BC;
    var VC = function() {
        function t(e, i) {
            var o = this;
            vh(this, t), this.body = e, this.canvas = i, this._selectionAccumulator = new LC, this.hoverObj = {
                nodes: {},
                edges: {}
            }, this.options = {}, this.defaultOptions = {
                multiselect: !1,
                selectable: !0,
                selectConnectedEdges: !0,
                hoverConnectedEdges: !0
            }, wo(this.options, this.defaultOptions), this.body.emitter.on("_dataChanged", function() {
                o.updateSelection();
            });
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) Nm([
                        "multiselect",
                        "hoverConnectedEdges",
                        "selectable",
                        "selectConnectedEdges"
                    ], this.options, t);
                }
            },
            {
                key: "selectOnPoint",
                value: function(t) {
                    var e = !1;
                    if (!0 === this.options.selectable) {
                        var i = this.getNodeAt(t) || this.getEdgeAt(t);
                        this.unselectAll(), void 0 !== i && (e = this.selectObject(i)), this.body.emitter.emit("_requestRedraw");
                    }
                    return e;
                }
            },
            {
                key: "selectAdditionalOnPoint",
                value: function(t) {
                    var e = !1;
                    if (!0 === this.options.selectable) {
                        var i = this.getNodeAt(t) || this.getEdgeAt(t);
                        void 0 !== i && (e = !0, !0 === i.isSelected() ? this.deselectObject(i) : this.selectObject(i), this.body.emitter.emit("_requestRedraw"));
                    }
                    return e;
                }
            },
            {
                key: "_initBaseEvent",
                value: function(t, e) {
                    var i = {};
                    return i.pointer = {
                        DOM: {
                            x: e.x,
                            y: e.y
                        },
                        canvas: this.canvas.DOMtoCanvas(e)
                    }, i.event = t, i;
                }
            },
            {
                key: "generateClickEvent",
                value: function(t, e, i, o) {
                    var n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], r = this._initBaseEvent(e, i);
                    if (!0 === n) r.nodes = [], r.edges = [];
                    else {
                        var s = this.getSelection();
                        r.nodes = s.nodes, r.edges = s.edges;
                    }
                    void 0 !== o && (r.previousSelection = o), "click" == t && (r.items = this.getClickedItems(i)), void 0 !== e.controlEdge && (r.controlEdge = e.controlEdge), this.body.emitter.emit(t, r);
                }
            },
            {
                key: "selectObject",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.options.selectConnectedEdges;
                    if (void 0 !== t) {
                        if (t instanceof iE) {
                            var i;
                            if (!0 === e) (i = this._selectionAccumulator).addEdges.apply(i, lf(t.edges));
                            this._selectionAccumulator.addNodes(t);
                        } else this._selectionAccumulator.addEdges(t);
                        return !0;
                    }
                    return !1;
                }
            },
            {
                key: "deselectObject",
                value: function(t) {
                    !0 === t.isSelected() && (t.selected = !1, this._removeFromSelection(t));
                }
            },
            {
                key: "_getAllNodesOverlappingWith",
                value: function(t) {
                    for(var e = [], i = this.body.nodes, o = 0; o < this.body.nodeIndices.length; o++){
                        var n = this.body.nodeIndices[o];
                        i[n].isOverlappingWith(t) && e.push(n);
                    }
                    return e;
                }
            },
            {
                key: "_pointerToPositionObject",
                value: function(t) {
                    var e = this.canvas.DOMtoCanvas(t);
                    return {
                        left: e.x - 1,
                        top: e.y + 1,
                        right: e.x + 1,
                        bottom: e.y - 1
                    };
                }
            },
            {
                key: "getNodeAt",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this._pointerToPositionObject(t), o = this._getAllNodesOverlappingWith(i);
                    return o.length > 0 ? !0 === e ? this.body.nodes[o[o.length - 1]] : o[o.length - 1] : void 0;
                }
            },
            {
                key: "_getEdgesOverlappingWith",
                value: function(t, e) {
                    for(var i = this.body.edges, o = 0; o < this.body.edgeIndices.length; o++){
                        var n = this.body.edgeIndices[o];
                        i[n].isOverlappingWith(t) && e.push(n);
                    }
                }
            },
            {
                key: "_getAllEdgesOverlappingWith",
                value: function(t) {
                    var e = [];
                    return this._getEdgesOverlappingWith(t, e), e;
                }
            },
            {
                key: "getEdgeAt",
                value: function(t) {
                    for(var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this.canvas.DOMtoCanvas(t), o = 10, n = null, r = this.body.edges, s = 0; s < this.body.edgeIndices.length; s++){
                        var a = this.body.edgeIndices[s], h = r[a];
                        if (h.connected) {
                            var d = h.from.x, l = h.from.y, c = h.to.x, u = h.to.y, f = h.edgeType.getDistanceToEdge(d, l, c, u, i.x, i.y);
                            f < o && (n = a, o = f);
                        }
                    }
                    return null !== n ? !0 === e ? this.body.edges[n] : n : void 0;
                }
            },
            {
                key: "_addToHover",
                value: function(t) {
                    t instanceof iE ? this.hoverObj.nodes[t.id] = t : this.hoverObj.edges[t.id] = t;
                }
            },
            {
                key: "_removeFromSelection",
                value: function(t) {
                    var e;
                    t instanceof iE ? (this._selectionAccumulator.deleteNodes(t), (e = this._selectionAccumulator).deleteEdges.apply(e, lf(t.edges))) : this._selectionAccumulator.deleteEdges(t);
                }
            },
            {
                key: "unselectAll",
                value: function() {
                    this._selectionAccumulator.clear();
                }
            },
            {
                key: "getSelectedNodeCount",
                value: function() {
                    return this._selectionAccumulator.sizeNodes;
                }
            },
            {
                key: "getSelectedEdgeCount",
                value: function() {
                    return this._selectionAccumulator.sizeEdges;
                }
            },
            {
                key: "_hoverConnectedEdges",
                value: function(t) {
                    for(var e = 0; e < t.edges.length; e++){
                        var i = t.edges[e];
                        i.hover = !0, this._addToHover(i);
                    }
                }
            },
            {
                key: "emitBlurEvent",
                value: function(t, e, i) {
                    var o = this._initBaseEvent(t, e);
                    !0 === i.hover && (i.hover = !1, i instanceof iE ? (o.node = i.id, this.body.emitter.emit("blurNode", o)) : (o.edge = i.id, this.body.emitter.emit("blurEdge", o)));
                }
            },
            {
                key: "emitHoverEvent",
                value: function(t, e, i) {
                    var o = this._initBaseEvent(t, e), n = !1;
                    return !1 === i.hover && (i.hover = !0, this._addToHover(i), n = !0, i instanceof iE ? (o.node = i.id, this.body.emitter.emit("hoverNode", o)) : (o.edge = i.id, this.body.emitter.emit("hoverEdge", o))), n;
                }
            },
            {
                key: "hoverObject",
                value: function(t, e) {
                    var i = this.getNodeAt(e);
                    void 0 === i && (i = this.getEdgeAt(e));
                    var o = !1;
                    for(var n in this.hoverObj.nodes)Object.prototype.hasOwnProperty.call(this.hoverObj.nodes, n) && (void 0 === i || i instanceof iE && i.id != n || i instanceof JE) && (this.emitBlurEvent(t, e, this.hoverObj.nodes[n]), delete this.hoverObj.nodes[n], o = !0);
                    for(var r in this.hoverObj.edges)Object.prototype.hasOwnProperty.call(this.hoverObj.edges, r) && (!0 === o ? (this.hoverObj.edges[r].hover = !1, delete this.hoverObj.edges[r]) : (void 0 === i || i instanceof JE && i.id != r || i instanceof iE && !i.hover) && (this.emitBlurEvent(t, e, this.hoverObj.edges[r]), delete this.hoverObj.edges[r], o = !0));
                    if (void 0 !== i) {
                        var s = zf(this.hoverObj.edges).length, a = zf(this.hoverObj.nodes).length;
                        (o || i instanceof JE && 0 === s && 0 === a || i instanceof iE && 0 === s && 0 === a) && (o = this.emitHoverEvent(t, e, i)), i instanceof iE && !0 === this.options.hoverConnectedEdges && this._hoverConnectedEdges(i);
                    }
                    !0 === o && this.body.emitter.emit("_requestRedraw");
                }
            },
            {
                key: "commitWithoutEmitting",
                value: function() {
                    this._selectionAccumulator.commit();
                }
            },
            {
                key: "commitAndEmit",
                value: function(t, e) {
                    var i = !1, o = this._selectionAccumulator.commit(), n = {
                        nodes: o.nodes.previous,
                        edges: o.edges.previous
                    };
                    o.edges.deleted.length > 0 && (this.generateClickEvent("deselectEdge", e, t, n), i = !0), o.nodes.deleted.length > 0 && (this.generateClickEvent("deselectNode", e, t, n), i = !0), o.nodes.added.length > 0 && (this.generateClickEvent("selectNode", e, t), i = !0), o.edges.added.length > 0 && (this.generateClickEvent("selectEdge", e, t), i = !0), !0 === i && this.generateClickEvent("select", e, t);
                }
            },
            {
                key: "getSelection",
                value: function() {
                    return {
                        nodes: this.getSelectedNodeIds(),
                        edges: this.getSelectedEdgeIds()
                    };
                }
            },
            {
                key: "getSelectedNodes",
                value: function() {
                    return this._selectionAccumulator.getNodes();
                }
            },
            {
                key: "getSelectedEdges",
                value: function() {
                    return this._selectionAccumulator.getEdges();
                }
            },
            {
                key: "getSelectedNodeIds",
                value: function() {
                    var t;
                    return If(t = this._selectionAccumulator.getNodes()).call(t, function(t) {
                        return t.id;
                    });
                }
            },
            {
                key: "getSelectedEdgeIds",
                value: function() {
                    var t;
                    return If(t = this._selectionAccumulator.getEdges()).call(t, function(t) {
                        return t.id;
                    });
                }
            },
            {
                key: "setSelection",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    if (!t || !t.nodes && !t.edges) throw new TypeError("Selection must be an object with nodes and/or edges properties");
                    if ((e.unselectAll || void 0 === e.unselectAll) && this.unselectAll(), t.nodes) {
                        var i, o = HC(t.nodes);
                        try {
                            for(o.s(); !(i = o.n()).done;){
                                var n = i.value, r = this.body.nodes[n];
                                if (!r) throw new RangeError('Node with id "' + n + '" not found');
                                this.selectObject(r, e.highlightEdges);
                            }
                        } catch (t) {
                            o.e(t);
                        } finally{
                            o.f();
                        }
                    }
                    if (t.edges) {
                        var s, a = HC(t.edges);
                        try {
                            for(a.s(); !(s = a.n()).done;){
                                var h = s.value, d = this.body.edges[h];
                                if (!d) throw new RangeError('Edge with id "' + h + '" not found');
                                this.selectObject(d);
                            }
                        } catch (t) {
                            a.e(t);
                        } finally{
                            a.f();
                        }
                    }
                    this.body.emitter.emit("_requestRedraw"), this._selectionAccumulator.commit();
                }
            },
            {
                key: "selectNodes",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if (!t || void 0 === t.length) throw "Selection must be an array with ids";
                    this.setSelection({
                        nodes: t
                    }, {
                        highlightEdges: e
                    });
                }
            },
            {
                key: "selectEdges",
                value: function(t) {
                    if (!t || void 0 === t.length) throw "Selection must be an array with ids";
                    this.setSelection({
                        edges: t
                    });
                }
            },
            {
                key: "updateSelection",
                value: function() {
                    for(var t in this._selectionAccumulator.getNodes())Object.prototype.hasOwnProperty.call(this.body.nodes, t.id) || this._selectionAccumulator.deleteNodes(t);
                    for(var e in this._selectionAccumulator.getEdges())Object.prototype.hasOwnProperty.call(this.body.edges, e.id) || this._selectionAccumulator.deleteEdges(e);
                }
            },
            {
                key: "getClickedItems",
                value: function(t) {
                    for(var e = this.canvas.DOMtoCanvas(t), i = [], o = this.body.nodeIndices, n = this.body.nodes, r = o.length - 1; r >= 0; r--){
                        var s = n[o[r]].getItemsOnPoint(e);
                        i.push.apply(i, s);
                    }
                    for(var a = this.body.edgeIndices, h = this.body.edges, d = a.length - 1; d >= 0; d--){
                        var l = h[a[d]].getItemsOnPoint(e);
                        i.push.apply(i, l);
                    }
                    return i;
                }
            }
        ]), t;
    }(), qC = hd, UC = Math.floor, YC = function(t, e) {
        var i = t.length, o = UC(i / 2);
        return i < 8 ? XC(t, e) : KC(t, YC(qC(t, 0, o), e), YC(qC(t, o), e), e);
    }, XC = function(t, e) {
        for(var i, o, n = t.length, r = 1; r < n;){
            for(o = r, i = t[r]; o && e(t[o - 1], i) > 0;)t[o] = t[--o];
            o !== r++ && (t[o] = i);
        }
        return t;
    }, KC = function(t, e, i, o) {
        for(var n = e.length, r = i.length, s = 0, a = 0; s < n || a < r;)t[s + a] = s < n && a < r ? o(e[s], i[a]) <= 0 ? e[s++] : i[a++] : s < n ? e[s++] : i[a++];
        return t;
    }, GC = YC, $C = dt.match(/firefox\/(\d+)/i), ZC = !!$C && +$C[1], QC = /MSIE|Trident/.test(dt), JC = dt.match(/AppleWebKit\/(\d+)\./), tS = !!JC && +JC[1], eS = Mi, iS = y, oS = It, nS = $t, rS = Hi, sS = cp, aS = un, hS = s, dS = GC, lS = Hf, cS = ZC, uS = QC, fS = gt, pS = tS, vS = [], gS = iS(vS.sort), yS = iS(vS.push), mS = hS(function() {
        vS.sort(void 0);
    }), bS = hS(function() {
        vS.sort(null);
    }), wS = lS("sort"), kS = !hS(function() {
        if (fS) return fS < 70;
        if (!(cS && cS > 3)) {
            if (uS) return !0;
            if (pS) return pS < 603;
            var t, e, i, o, n = "";
            for(t = 65; t < 76; t++){
                switch(e = String.fromCharCode(t), t){
                    case 66:
                    case 69:
                    case 70:
                    case 72:
                        i = 3;
                        break;
                    case 68:
                    case 71:
                        i = 4;
                        break;
                    default:
                        i = 2;
                }
                for(o = 0; o < 47; o++)vS.push({
                    k: e + o,
                    v: i
                });
            }
            for(vS.sort(function(t, e) {
                return e.v - t.v;
            }), o = 0; o < vS.length; o++)e = vS[o].k.charAt(0), n.charAt(n.length - 1) !== e && (n += e);
            return "DGBEFHACIJK" !== n;
        }
    });
    eS({
        target: "Array",
        proto: !0,
        forced: mS || !bS || !wS || !kS
    }, {
        sort: function(t) {
            void 0 !== t && oS(t);
            var e = nS(this);
            if (kS) return void 0 === t ? gS(e) : gS(e, t);
            var i, o, n = [], r = rS(e);
            for(o = 0; o < r; o++)o in e && yS(n, e[o]);
            for(dS(n, function(t) {
                return function(e, i) {
                    return void 0 === i ? -1 : void 0 === e ? 1 : void 0 !== t ? +t(e, i) || 0 : aS(e) > aS(i) ? 1 : -1;
                };
            }(t)), i = rS(n), o = 0; o < i;)e[o] = n[o++];
            for(; o < r;)sS(e, o++);
            return e;
        }
    });
    var _S = zo("Array").sort, xS = ht, ES = _S, OS = Array.prototype, CS = function(t) {
        var e = t.sort;
        return t === OS || xS(OS, t) && e === OS.sort ? ES : e;
    }, SS = o(CS), TS = It, MS = $t, PS = U, DS = Hi, IS = TypeError, BS = function(t) {
        return function(e, i, o, n) {
            TS(i);
            var r = MS(e), s = PS(r), a = DS(r), h = t ? a - 1 : 0, d = t ? -1 : 1;
            if (o < 2) for(;;){
                if (h in s) {
                    n = s[h], h += d;
                    break;
                }
                if (h += d, t ? h < 0 : a <= h) throw new IS("Reduce of empty array with no initial value");
            }
            for(; t ? h >= 0 : a > h; h += d)h in s && (n = i(n, s[h], h, r));
            return n;
        };
    }, FS = {
        left: BS(!1),
        right: BS(!0)
    }, zS = "process" === k(r.process), NS = FS.left;
    Mi({
        target: "Array",
        proto: !0,
        forced: !zS && gt > 79 && gt < 83 || !Hf("reduce")
    }, {
        reduce: function(t) {
            var e = arguments.length;
            return NS(this, t, e, e > 1 ? arguments[1] : void 0);
        }
    });
    var AS = zo("Array").reduce, RS = ht, jS = AS, LS = Array.prototype, HS = function(t) {
        var e = t.reduce;
        return t === LS || RS(LS, t) && e === LS.reduce ? jS : e;
    }, WS = o(HS);
    function VS(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !sx) return !1;
            if (sx.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(sx(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = px(t);
            if (e) {
                var n = px(this).constructor;
                i = sx(o, arguments, n);
            } else i = o.apply(this, arguments);
            return ux(this, i);
        };
    }
    var qS = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, [
            {
                key: "abstract",
                value: function() {
                    throw new Error("Can't instantiate abstract class!");
                }
            },
            {
                key: "fake_use",
                value: function() {}
            },
            {
                key: "curveType",
                value: function() {
                    return this.abstract();
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    return this.fake_use(t), this.abstract();
                }
            },
            {
                key: "setPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
                    this.fake_use(t, e, i), this.abstract();
                }
            },
            {
                key: "getTreeSize",
                value: function(t) {
                    return this.fake_use(t), this.abstract();
                }
            },
            {
                key: "sort",
                value: function(t) {
                    this.fake_use(t), this.abstract();
                }
            },
            {
                key: "fix",
                value: function(t, e) {
                    this.fake_use(t, e), this.abstract();
                }
            },
            {
                key: "shift",
                value: function(t, e) {
                    this.fake_use(t, e), this.abstract();
                }
            }
        ]), t;
    }(), US = function(t) {
        cx(i, t);
        var e = VS(i);
        function i(t) {
            var o;
            return vh(this, i), (o = e.call(this)).layout = t, o;
        }
        return wu(i, [
            {
                key: "curveType",
                value: function() {
                    return "horizontal";
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    return t.x;
                }
            },
            {
                key: "setPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
                    void 0 !== i && this.layout.hierarchical.addToOrdering(t, i), t.x = e;
                }
            },
            {
                key: "getTreeSize",
                value: function(t) {
                    var e = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, t);
                    return {
                        min: e.min_x,
                        max: e.max_x
                    };
                }
            },
            {
                key: "sort",
                value: function(t) {
                    SS(t).call(t, function(t, e) {
                        return t.x - e.x;
                    });
                }
            },
            {
                key: "fix",
                value: function(t, e) {
                    t.y = this.layout.options.hierarchical.levelSeparation * e, t.options.fixed.y = !0;
                }
            },
            {
                key: "shift",
                value: function(t, e) {
                    this.layout.body.nodes[t].x += e;
                }
            }
        ]), i;
    }(qS), YS = function(t) {
        cx(i, t);
        var e = VS(i);
        function i(t) {
            var o;
            return vh(this, i), (o = e.call(this)).layout = t, o;
        }
        return wu(i, [
            {
                key: "curveType",
                value: function() {
                    return "vertical";
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    return t.y;
                }
            },
            {
                key: "setPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
                    void 0 !== i && this.layout.hierarchical.addToOrdering(t, i), t.y = e;
                }
            },
            {
                key: "getTreeSize",
                value: function(t) {
                    var e = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, t);
                    return {
                        min: e.min_y,
                        max: e.max_y
                    };
                }
            },
            {
                key: "sort",
                value: function(t) {
                    SS(t).call(t, function(t, e) {
                        return t.y - e.y;
                    });
                }
            },
            {
                key: "fix",
                value: function(t, e) {
                    t.x = this.layout.options.hierarchical.levelSeparation * e, t.options.fixed.x = !0;
                }
            },
            {
                key: "shift",
                value: function(t, e) {
                    this.layout.body.nodes[t].y += e;
                }
            }
        ]), i;
    }(qS), XS = zd.every;
    Mi({
        target: "Array",
        proto: !0,
        forced: !Hf("every")
    }, {
        every: function(t) {
            return XS(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var KS = zo("Array").every, GS = ht, $S = KS, ZS = Array.prototype, QS = function(t) {
        var e = t.every;
        return t === ZS || GS(ZS, t) && e === ZS.every ? $S : e;
    }, JS = o(QS);
    function tT(t, e) {
        var i = void 0 !== cf && ph(t) || t["@@iterator"];
        if (!i) {
            if (Of(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return eT(t, e);
                var o = mf(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return Xa(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return eT(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function eT(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function iT(t, e) {
        var i = new BO;
        return Qf(t).call(t, function(t) {
            var e;
            Qf(e = t.edges).call(e, function(t) {
                t.connected && i.add(t);
            });
        }), Qf(i).call(i, function(t) {
            var i = t.from.id, o = t.to.id;
            null == e[i] && (e[i] = 0), (null == e[o] || e[i] >= e[o]) && (e[o] = e[i] + 1);
        }), e;
    }
    function oT(t, e, i, o) {
        var n, r, s = Yv(null), a = WS(n = lf(N_(o).call(o))).call(n, function(t, e) {
            return t + 1 + e.edges.length;
        }, 0), h = i + "Id", d = "to" === i ? 1 : -1, l = tT(o);
        try {
            var c, u = function() {
                var n = df(r.value, 2), l = n[0], c = n[1];
                if (!o.has(l) || !t(c)) return 0;
                s[l] = 0;
                for(var u, f, p = [
                    c
                ], v = 0, g = function() {
                    var t, n;
                    if (!o.has(l)) return 0;
                    var r = s[u.id] + d;
                    if (Qf(t = lv(n = u.edges).call(n, function(t) {
                        return t.connected && t.to !== t.from && t[i] !== u && o.has(t.toId) && o.has(t.fromId);
                    })).call(t, function(t) {
                        var o = t[h], n = s[o];
                        (null == n || e(r, n)) && (s[o] = r, p.push(t[i]));
                    }), v > a) return {
                        v: {
                            v: iT(o, s)
                        }
                    };
                    ++v;
                }; u = p.pop();)if (0 !== (f = g()) && f) return f.v;
            };
            for(l.s(); !(r = l.n()).done;)if (0 !== (c = u()) && c) return c.v;
        } catch (t) {
            l.e(t);
        } finally{
            l.f();
        }
        return s;
    }
    var nT = function() {
        function t() {
            vh(this, t), this.childrenReference = {}, this.parentReference = {}, this.trees = {}, this.distributionOrdering = {}, this.levels = {}, this.distributionIndex = {}, this.isTree = !1, this.treeIndex = -1;
        }
        return wu(t, [
            {
                key: "addRelation",
                value: function(t, e) {
                    void 0 === this.childrenReference[t] && (this.childrenReference[t] = []), this.childrenReference[t].push(e), void 0 === this.parentReference[e] && (this.parentReference[e] = []), this.parentReference[e].push(t);
                }
            },
            {
                key: "checkIfTree",
                value: function() {
                    for(var t in this.parentReference)if (this.parentReference[t].length > 1) return void (this.isTree = !1);
                    this.isTree = !0;
                }
            },
            {
                key: "numTrees",
                value: function() {
                    return this.treeIndex + 1;
                }
            },
            {
                key: "setTreeIndex",
                value: function(t, e) {
                    void 0 !== e && void 0 === this.trees[t.id] && (this.trees[t.id] = e, this.treeIndex = Math.max(e, this.treeIndex));
                }
            },
            {
                key: "ensureLevel",
                value: function(t) {
                    void 0 === this.levels[t] && (this.levels[t] = 0);
                }
            },
            {
                key: "getMaxLevel",
                value: function(t) {
                    var e = this, i = {};
                    return function t(o) {
                        if (void 0 !== i[o]) return i[o];
                        var n = e.levels[o];
                        if (e.childrenReference[o]) {
                            var r = e.childrenReference[o];
                            if (r.length > 0) for(var s = 0; s < r.length; s++)n = Math.max(n, t(r[s]));
                        }
                        return i[o] = n, n;
                    }(t);
                }
            },
            {
                key: "levelDownstream",
                value: function(t, e) {
                    void 0 === this.levels[e.id] && (void 0 === this.levels[t.id] && (this.levels[t.id] = 0), this.levels[e.id] = this.levels[t.id] + 1);
                }
            },
            {
                key: "setMinLevelToZero",
                value: function(t) {
                    var e = 1e9;
                    for(var i in t)Object.prototype.hasOwnProperty.call(t, i) && void 0 !== this.levels[i] && (e = Math.min(this.levels[i], e));
                    for(var o in t)Object.prototype.hasOwnProperty.call(t, o) && void 0 !== this.levels[o] && (this.levels[o] -= e);
                }
            },
            {
                key: "getTreeSize",
                value: function(t, e) {
                    var i = 1e9, o = -1000000000, n = 1e9, r = -1000000000;
                    for(var s in this.trees)if (Object.prototype.hasOwnProperty.call(this.trees, s) && this.trees[s] === e) {
                        var a = t[s];
                        i = Math.min(a.x, i), o = Math.max(a.x, o), n = Math.min(a.y, n), r = Math.max(a.y, r);
                    }
                    return {
                        min_x: i,
                        max_x: o,
                        min_y: n,
                        max_y: r
                    };
                }
            },
            {
                key: "hasSameParent",
                value: function(t, e) {
                    var i = this.parentReference[t.id], o = this.parentReference[e.id];
                    if (void 0 === i || void 0 === o) return !1;
                    for(var n = 0; n < i.length; n++)for(var r = 0; r < o.length; r++)if (i[n] == o[r]) return !0;
                    return !1;
                }
            },
            {
                key: "inSameSubNetwork",
                value: function(t, e) {
                    return this.trees[t.id] === this.trees[e.id];
                }
            },
            {
                key: "getLevels",
                value: function() {
                    return zf(this.distributionOrdering);
                }
            },
            {
                key: "addToOrdering",
                value: function(t, e) {
                    void 0 === this.distributionOrdering[e] && (this.distributionOrdering[e] = []);
                    var i = !1, o = this.distributionOrdering[e];
                    for(var n in o)if (o[n] === t) {
                        i = !0;
                        break;
                    }
                    i || (this.distributionOrdering[e].push(t), this.distributionIndex[t.id] = this.distributionOrdering[e].length - 1);
                }
            }
        ]), t;
    }(), rT = function() {
        function t(e) {
            vh(this, t), this.body = e, this._resetRNG(Math.random() + ":" + jf()), this.setPhysics = !1, this.options = {}, this.optionsBackup = {
                physics: {}
            }, this.defaultOptions = {
                randomSeed: void 0,
                improvedLayout: !0,
                clusterThreshold: 150,
                hierarchical: {
                    enabled: !1,
                    levelSeparation: 150,
                    nodeSpacing: 100,
                    treeSpacing: 200,
                    blockShifting: !0,
                    edgeMinimization: !0,
                    parentCentralization: !0,
                    direction: "UD",
                    sortMethod: "hubsize"
                }
            }, wo(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return wu(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t = this;
                    this.body.emitter.on("_dataChanged", function() {
                        t.setupHierarchicalLayout();
                    }), this.body.emitter.on("_dataLoaded", function() {
                        t.layoutNetwork();
                    }), this.body.emitter.on("_resetHierarchicalLayout", function() {
                        t.setupHierarchicalLayout();
                    }), this.body.emitter.on("_adjustEdgesForHierarchicalLayout", function() {
                        if (!0 === t.options.hierarchical.enabled) {
                            var e = t.direction.curveType();
                            t.body.emitter.emit("_forceDisableDynamicCurves", e, !1);
                        }
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t, e) {
                    if (void 0 !== t) {
                        var i = this.options.hierarchical, o = i.enabled;
                        if (Nm([
                            "randomSeed",
                            "improvedLayout",
                            "clusterThreshold"
                        ], this.options, t), Qm(this.options, t, "hierarchical"), void 0 !== t.randomSeed && this._resetRNG(t.randomSeed), !0 === i.enabled) return !0 === o && this.body.emitter.emit("refresh", !0), "RL" === i.direction || "DU" === i.direction ? i.levelSeparation > 0 && (i.levelSeparation *= -1) : i.levelSeparation < 0 && (i.levelSeparation *= -1), this.setDirectionStrategy(), this.body.emitter.emit("_resetHierarchicalLayout"), this.adaptAllOptionsForHierarchicalLayout(e);
                        if (!0 === o) return this.body.emitter.emit("refresh"), Rm(e, this.optionsBackup);
                    }
                    return e;
                }
            },
            {
                key: "_resetRNG",
                value: function(t) {
                    this.initialRandomSeed = t, this._rng = Em(this.initialRandomSeed);
                }
            },
            {
                key: "adaptAllOptionsForHierarchicalLayout",
                value: function(t) {
                    if (!0 === this.options.hierarchical.enabled) {
                        var e = this.optionsBackup.physics;
                        void 0 === t.physics || !0 === t.physics ? (t.physics = {
                            enabled: void 0 === e.enabled || e.enabled,
                            solver: "hierarchicalRepulsion"
                        }, e.enabled = void 0 === e.enabled || e.enabled, e.solver = e.solver || "barnesHut") : "object" === gu(t.physics) ? (e.enabled = void 0 === t.physics.enabled || t.physics.enabled, e.solver = t.physics.solver || "barnesHut", t.physics.solver = "hierarchicalRepulsion") : !1 !== t.physics && (e.solver = "barnesHut", t.physics = {
                            solver: "hierarchicalRepulsion"
                        });
                        var i = this.direction.curveType();
                        if (void 0 === t.edges) this.optionsBackup.edges = {
                            smooth: {
                                enabled: !0,
                                type: "dynamic"
                            }
                        }, t.edges = {
                            smooth: !1
                        };
                        else if (void 0 === t.edges.smooth) this.optionsBackup.edges = {
                            smooth: {
                                enabled: !0,
                                type: "dynamic"
                            }
                        }, t.edges.smooth = !1;
                        else if ("boolean" == typeof t.edges.smooth) this.optionsBackup.edges = {
                            smooth: t.edges.smooth
                        }, t.edges.smooth = {
                            enabled: t.edges.smooth,
                            type: i
                        };
                        else {
                            var o = t.edges.smooth;
                            void 0 !== o.type && "dynamic" !== o.type && (i = o.type), this.optionsBackup.edges = {
                                smooth: {
                                    enabled: void 0 === o.enabled || o.enabled,
                                    type: void 0 === o.type ? "dynamic" : o.type,
                                    roundness: void 0 === o.roundness ? .5 : o.roundness,
                                    forceDirection: void 0 !== o.forceDirection && o.forceDirection
                                }
                            }, t.edges.smooth = {
                                enabled: void 0 === o.enabled || o.enabled,
                                type: i,
                                roundness: void 0 === o.roundness ? .5 : o.roundness,
                                forceDirection: void 0 !== o.forceDirection && o.forceDirection
                            };
                        }
                        this.body.emitter.emit("_forceDisableDynamicCurves", i);
                    }
                    return t;
                }
            },
            {
                key: "positionInitially",
                value: function(t) {
                    if (!0 !== this.options.hierarchical.enabled) {
                        this._resetRNG(this.initialRandomSeed);
                        for(var e = t.length + 50, i = 0; i < t.length; i++){
                            var o = t[i], n = 2 * Math.PI * this._rng();
                            void 0 === o.x && (o.x = e * Math.cos(n)), void 0 === o.y && (o.y = e * Math.sin(n));
                        }
                    }
                }
            },
            {
                key: "layoutNetwork",
                value: function() {
                    if (!0 !== this.options.hierarchical.enabled && !0 === this.options.improvedLayout) {
                        for(var t = this.body.nodeIndices, e = 0, i = 0; i < t.length; i++)!0 === this.body.nodes[t[i]].predefinedPosition && (e += 1);
                        if (e < .5 * t.length) {
                            var o = 0, n = this.options.clusterThreshold, r = {
                                clusterNodeProperties: {
                                    shape: "ellipse",
                                    label: "",
                                    group: "",
                                    font: {
                                        multi: !1
                                    }
                                },
                                clusterEdgeProperties: {
                                    label: "",
                                    font: {
                                        multi: !1
                                    },
                                    smooth: {
                                        enabled: !1
                                    }
                                }
                            };
                            if (t.length > n) {
                                for(var s = t.length; t.length > n && o <= 10;){
                                    o += 1;
                                    var a = t.length;
                                    if (o % 3 == 0 ? this.body.modules.clustering.clusterBridges(r) : this.body.modules.clustering.clusterOutliers(r), a == t.length && o % 3 != 0) return this._declusterAll(), this.body.emitter.emit("_layoutFailed"), void console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.");
                                }
                                this.body.modules.kamadaKawai.setOptions({
                                    springLength: Math.max(150, 2 * s)
                                });
                            }
                            o > 10 && console.info("The clustering didn't succeed within the amount of interations allowed, progressing with partial result."), this.body.modules.kamadaKawai.solve(t, this.body.edgeIndices, !0), this._shiftToCenter();
                            for(var h = 0; h < t.length; h++){
                                var d = this.body.nodes[t[h]];
                                !1 === d.predefinedPosition && (d.x += 70 * (.5 - this._rng()), d.y += 70 * (.5 - this._rng()));
                            }
                            this._declusterAll(), this.body.emitter.emit("_repositionBezierNodes");
                        }
                    }
                }
            },
            {
                key: "_shiftToCenter",
                value: function() {
                    for(var t = mO.getRangeCore(this.body.nodes, this.body.nodeIndices), e = mO.findCenter(t), i = 0; i < this.body.nodeIndices.length; i++){
                        var o = this.body.nodes[this.body.nodeIndices[i]];
                        o.x -= e.x, o.y -= e.y;
                    }
                }
            },
            {
                key: "_declusterAll",
                value: function() {
                    for(var t = !0; !0 === t;){
                        t = !1;
                        for(var e = 0; e < this.body.nodeIndices.length; e++)!0 === this.body.nodes[this.body.nodeIndices[e]].isCluster && (t = !0, this.body.modules.clustering.openCluster(this.body.nodeIndices[e], {}, !1));
                        !0 === t && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "getSeed",
                value: function() {
                    return this.initialRandomSeed;
                }
            },
            {
                key: "setupHierarchicalLayout",
                value: function() {
                    if (!0 === this.options.hierarchical.enabled && this.body.nodeIndices.length > 0) {
                        var t, e, i = !1, o = !1;
                        for(e in this.lastNodeOnLevel = {}, this.hierarchical = new nT, this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, e) && (void 0 !== (t = this.body.nodes[e]).options.level ? (i = !0, this.hierarchical.levels[e] = t.options.level) : o = !0);
                        if (!0 === o && !0 === i) throw new Error("To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.");
                        if (!0 === o) {
                            var n = this.options.hierarchical.sortMethod;
                            "hubsize" === n ? this._determineLevelsByHubsize() : "directed" === n ? this._determineLevelsDirected() : "custom" === n && this._determineLevelsCustomCallback();
                        }
                        for(var r in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, r) && this.hierarchical.ensureLevel(r);
                        var s = this._getDistribution();
                        this._generateMap(), this._placeNodesByHierarchy(s), this._condenseHierarchy(), this._shiftToCenter();
                    }
                }
            },
            {
                key: "_condenseHierarchy",
                value: function() {
                    var t = this, e = !1, i = {}, o = function(e, i) {
                        var o = t.hierarchical.trees;
                        for(var n in o)Object.prototype.hasOwnProperty.call(o, n) && o[n] === e && t.direction.shift(n, i);
                    }, n = function() {
                        for(var e = [], i = 0; i < t.hierarchical.numTrees(); i++)e.push(t.direction.getTreeSize(i));
                        return e;
                    }, r = function e(i, o) {
                        if (!o[i.id] && (o[i.id] = !0, t.hierarchical.childrenReference[i.id])) {
                            var n = t.hierarchical.childrenReference[i.id];
                            if (n.length > 0) for(var r = 0; r < n.length; r++)e(t.body.nodes[n[r]], o);
                        }
                    }, s = function(e) {
                        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e9, o = 1e9, n = 1e9, r = 1e9, s = -1000000000;
                        for(var a in e)if (Object.prototype.hasOwnProperty.call(e, a)) {
                            var h = t.body.nodes[a], d = t.hierarchical.levels[h.id], l = t.direction.getPosition(h), c = df(t._getSpaceAroundNode(h, e), 2), u = c[0], f = c[1];
                            o = Math.min(u, o), n = Math.min(f, n), d <= i && (r = Math.min(l, r), s = Math.max(l, s));
                        }
                        return [
                            r,
                            s,
                            o,
                            n
                        ];
                    }, a = function(e, i, o) {
                        for(var n = t.hierarchical, r = 0; r < i.length; r++){
                            var s = i[r], a = n.distributionOrdering[s];
                            if (a.length > 1) for(var h = 0; h < a.length - 1; h++){
                                var d = a[h], l = a[h + 1];
                                n.hasSameParent(d, l) && n.inSameSubNetwork(d, l) && e(d, l, o);
                            }
                        }
                    }, h = function(i, o) {
                        var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], a = t.direction.getPosition(i), h = t.direction.getPosition(o), d = Math.abs(h - a), l = t.options.hierarchical.nodeSpacing;
                        if (d > l) {
                            var c = {}, u = {};
                            r(i, c), r(o, u);
                            var f = function(e, i) {
                                var o = t.hierarchical.getMaxLevel(e.id), n = t.hierarchical.getMaxLevel(i.id);
                                return Math.min(o, n);
                            }(i, o), p = s(c, f), v = s(u, f), g = p[1], y = v[0], m = v[2];
                            if (Math.abs(g - y) > l) {
                                var b = g - y + l;
                                b < -m + l && (b = -m + l), b < 0 && (t._shiftBlock(o.id, b), e = !0, !0 === n && t._centerParent(o));
                            }
                        }
                    }, d = function(o, n) {
                        for(var a = n.id, h = n.edges, d = t.hierarchical.levels[n.id], l = t.options.hierarchical.levelSeparation * t.options.hierarchical.levelSeparation, c = {}, u = [], f = 0; f < h.length; f++){
                            var p = h[f];
                            if (p.toId != p.fromId) {
                                var v = p.toId == a ? p.from : p.to;
                                c[h[f].id] = v, t.hierarchical.levels[v.id] < d && u.push(p);
                            }
                        }
                        var g = function(e, i) {
                            for(var o = 0, n = 0; n < i.length; n++)if (void 0 !== c[i[n].id]) {
                                var r = t.direction.getPosition(c[i[n].id]) - e;
                                o += r / Math.sqrt(r * r + l);
                            }
                            return o;
                        }, y = function(e, i) {
                            for(var o = 0, n = 0; n < i.length; n++)if (void 0 !== c[i[n].id]) {
                                var r = t.direction.getPosition(c[i[n].id]) - e;
                                o -= l * Math.pow(r * r + l, -1.5);
                            }
                            return o;
                        }, m = function(e, i) {
                            for(var o = t.direction.getPosition(n), r = {}, s = 0; s < e; s++){
                                var a = g(o, i), h = y(o, i);
                                if (void 0 !== r[o -= Math.max(-40, Math.min(40, Math.round(a / h)))]) break;
                                r[o] = s;
                            }
                            return o;
                        }, b = m(o, u);
                        !function(o) {
                            var a = t.direction.getPosition(n);
                            if (void 0 === i[n.id]) {
                                var h = {};
                                r(n, h), i[n.id] = h;
                            }
                            var d = s(i[n.id]), l = d[2], c = d[3], u = o - a, f = 0;
                            u > 0 ? f = Math.min(u, c - t.options.hierarchical.nodeSpacing) : u < 0 && (f = -Math.min(-u, l - t.options.hierarchical.nodeSpacing)), 0 != f && (t._shiftBlock(n.id, f), e = !0);
                        }(b), function(i) {
                            var o = t.direction.getPosition(n), r = df(t._getSpaceAroundNode(n), 2), s = r[0], a = r[1], h = i - o, d = o;
                            h > 0 ? d = Math.min(o + (a - t.options.hierarchical.nodeSpacing), i) : h < 0 && (d = Math.max(o - (s - t.options.hierarchical.nodeSpacing), i)), d !== o && (t.direction.setPosition(n, d), e = !0);
                        }(b = m(o, h));
                    };
                    !0 === this.options.hierarchical.blockShifting && (function(i) {
                        var o = t.hierarchical.getLevels();
                        o = hp(o).call(o);
                        for(var n = 0; n < i && (e = !1, a(h, o, !0), !0 === e); n++);
                    }(5), function() {
                        for(var e in t.body.nodes)Object.prototype.hasOwnProperty.call(t.body.nodes, e) && t._centerParent(t.body.nodes[e]);
                    }()), !0 === this.options.hierarchical.edgeMinimization && function(i) {
                        var o = t.hierarchical.getLevels();
                        o = hp(o).call(o);
                        for(var n = 0; n < i; n++){
                            e = !1;
                            for(var r = 0; r < o.length; r++)for(var s = o[r], a = t.hierarchical.distributionOrdering[s], h = 0; h < a.length; h++)d(1e3, a[h]);
                            if (!0 !== e) break;
                        }
                    }(20), !0 === this.options.hierarchical.parentCentralization && function() {
                        var e = t.hierarchical.getLevels();
                        e = hp(e).call(e);
                        for(var i = 0; i < e.length; i++)for(var o = e[i], n = t.hierarchical.distributionOrdering[o], r = 0; r < n.length; r++)t._centerParent(n[r]);
                    }(), function() {
                        for(var e = n(), i = 0, r = 0; r < e.length - 1; r++)i += e[r].max - e[r + 1].min + t.options.hierarchical.treeSpacing, o(r + 1, i);
                    }();
                }
            },
            {
                key: "_getSpaceAroundNode",
                value: function(t, e) {
                    var i = !0;
                    void 0 === e && (i = !1);
                    var o = this.hierarchical.levels[t.id];
                    if (void 0 !== o) {
                        var n = this.hierarchical.distributionIndex[t.id], r = this.direction.getPosition(t), s = this.hierarchical.distributionOrdering[o], a = 1e9, h = 1e9;
                        if (0 !== n) {
                            var d = s[n - 1];
                            if (!0 === i && void 0 === e[d.id] || !1 === i) a = r - this.direction.getPosition(d);
                        }
                        if (n != s.length - 1) {
                            var l = s[n + 1];
                            if (!0 === i && void 0 === e[l.id] || !1 === i) {
                                var c = this.direction.getPosition(l);
                                h = Math.min(h, c - r);
                            }
                        }
                        return [
                            a,
                            h
                        ];
                    }
                    return [
                        0,
                        0
                    ];
                }
            },
            {
                key: "_centerParent",
                value: function(t) {
                    if (this.hierarchical.parentReference[t.id]) for(var e = this.hierarchical.parentReference[t.id], i = 0; i < e.length; i++){
                        var o = e[i], n = this.body.nodes[o], r = this.hierarchical.childrenReference[o];
                        if (void 0 !== r) {
                            var s = this._getCenterPosition(r), a = this.direction.getPosition(n), h = df(this._getSpaceAroundNode(n), 2), d = h[0], l = h[1], c = a - s;
                            (c < 0 && Math.abs(c) < l - this.options.hierarchical.nodeSpacing || c > 0 && Math.abs(c) < d - this.options.hierarchical.nodeSpacing) && this.direction.setPosition(n, s);
                        }
                    }
                }
            },
            {
                key: "_placeNodesByHierarchy",
                value: function(t) {
                    for(var e in this.positionedNodes = {}, t)if (Object.prototype.hasOwnProperty.call(t, e)) {
                        var i, o = zf(t[e]);
                        o = this._indexArrayToNodes(o), SS(i = this.direction).call(i, o);
                        for(var n = 0, r = 0; r < o.length; r++){
                            var s = o[r];
                            if (void 0 === this.positionedNodes[s.id]) {
                                var a = this.options.hierarchical.nodeSpacing, h = a * n;
                                n > 0 && (h = this.direction.getPosition(o[r - 1]) + a), this.direction.setPosition(s, h, e), this._validatePositionAndContinue(s, e, h), n++;
                            }
                        }
                    }
                }
            },
            {
                key: "_placeBranchNodes",
                value: function(t, e) {
                    var i, o = this.hierarchical.childrenReference[t];
                    if (void 0 !== o) {
                        for(var n = [], r = 0; r < o.length; r++)n.push(this.body.nodes[o[r]]);
                        SS(i = this.direction).call(i, n);
                        for(var s = 0; s < n.length; s++){
                            var a = n[s], h = this.hierarchical.levels[a.id];
                            if (!(h > e && void 0 === this.positionedNodes[a.id])) return;
                            var d = this.options.hierarchical.nodeSpacing, l = void 0;
                            l = 0 === s ? this.direction.getPosition(this.body.nodes[t]) : this.direction.getPosition(n[s - 1]) + d, this.direction.setPosition(a, l, h), this._validatePositionAndContinue(a, h, l);
                        }
                        var c = this._getCenterPosition(n);
                        this.direction.setPosition(this.body.nodes[t], c, e);
                    }
                }
            },
            {
                key: "_validatePositionAndContinue",
                value: function(t, e, i) {
                    if (this.hierarchical.isTree) {
                        if (void 0 !== this.lastNodeOnLevel[e]) {
                            var o = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[e]]);
                            if (i - o < this.options.hierarchical.nodeSpacing) {
                                var n = o + this.options.hierarchical.nodeSpacing - i, r = this._findCommonParent(this.lastNodeOnLevel[e], t.id);
                                this._shiftBlock(r.withChild, n);
                            }
                        }
                        this.lastNodeOnLevel[e] = t.id, this.positionedNodes[t.id] = !0, this._placeBranchNodes(t.id, e);
                    }
                }
            },
            {
                key: "_indexArrayToNodes",
                value: function(t) {
                    for(var e = [], i = 0; i < t.length; i++)e.push(this.body.nodes[t[i]]);
                    return e;
                }
            },
            {
                key: "_getDistribution",
                value: function() {
                    var t, e, i = {};
                    for(t in this.body.nodes)if (Object.prototype.hasOwnProperty.call(this.body.nodes, t)) {
                        e = this.body.nodes[t];
                        var o = void 0 === this.hierarchical.levels[t] ? 0 : this.hierarchical.levels[t];
                        this.direction.fix(e, o), void 0 === i[o] && (i[o] = {}), i[o][t] = e;
                    }
                    return i;
                }
            },
            {
                key: "_getActiveEdges",
                value: function(t) {
                    var e = this, i = [];
                    return Hm(t.edges, function(t) {
                        var o;
                        -1 !== Vv(o = e.body.edgeIndices).call(o, t.id) && i.push(t);
                    }), i;
                }
            },
            {
                key: "_getHubSizes",
                value: function() {
                    var t = this, e = {};
                    Hm(this.body.nodeIndices, function(i) {
                        var o = t.body.nodes[i], n = t._getActiveEdges(o).length;
                        e[n] = !0;
                    });
                    var i = [];
                    return Hm(e, function(t) {
                        i.push(Number(t));
                    }), SS(i).call(i, function(t, e) {
                        return e - t;
                    }), i;
                }
            },
            {
                key: "_determineLevelsByHubsize",
                value: function() {
                    for(var t = this, e = function(e, i) {
                        t.hierarchical.levelDownstream(e, i);
                    }, i = this._getHubSizes(), o = function() {
                        var o = i[n];
                        if (0 === o) return 1;
                        Hm(t.body.nodeIndices, function(i) {
                            var n = t.body.nodes[i];
                            o === t._getActiveEdges(n).length && t._crawlNetwork(e, i);
                        });
                    }, n = 0; n < i.length && !o(); ++n);
                }
            },
            {
                key: "_determineLevelsCustomCallback",
                value: function() {
                    var t = this;
                    this._crawlNetwork(function(e, i, o) {
                        var n = t.hierarchical.levels[e.id];
                        void 0 === n && (n = t.hierarchical.levels[e.id] = 1e5);
                        var r = (mO.cloneOptions(e, "node"), mO.cloneOptions(i, "node"), void mO.cloneOptions(o, "edge"));
                        t.hierarchical.levels[i.id] = n + r;
                    }), this.hierarchical.setMinLevelToZero(this.body.nodes);
                }
            },
            {
                key: "_determineLevelsDirected",
                value: function() {
                    var t, e = this, i = WS(t = this.body.nodeIndices).call(t, function(t, i) {
                        return t.set(i, e.body.nodes[i]), t;
                    }, new xk);
                    "roots" === this.options.hierarchical.shakeTowards ? this.hierarchical.levels = function(t) {
                        return oT(function(e) {
                            var i, o;
                            return JS(i = lv(o = e.edges).call(o, function(e) {
                                return t.has(e.toId);
                            })).call(i, function(t) {
                                return t.from === e;
                            });
                        }, function(t, e) {
                            return e < t;
                        }, "to", t);
                    }(i) : this.hierarchical.levels = function(t) {
                        return oT(function(e) {
                            var i, o;
                            return JS(i = lv(o = e.edges).call(o, function(e) {
                                return t.has(e.toId);
                            })).call(i, function(t) {
                                return t.to === e;
                            });
                        }, function(t, e) {
                            return e > t;
                        }, "from", t);
                    }(i), this.hierarchical.setMinLevelToZero(this.body.nodes);
                }
            },
            {
                key: "_generateMap",
                value: function() {
                    var t = this;
                    this._crawlNetwork(function(e, i) {
                        t.hierarchical.levels[i.id] > t.hierarchical.levels[e.id] && t.hierarchical.addRelation(e.id, i.id);
                    }), this.hierarchical.checkIfTree();
                }
            },
            {
                key: "_crawlNetwork",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function() {}, i = arguments.length > 1 ? arguments[1] : void 0, o = {}, n = function i(n, r) {
                        if (void 0 === o[n.id]) {
                            var s;
                            t.hierarchical.setTreeIndex(n, r), o[n.id] = !0;
                            for(var a = t._getActiveEdges(n), h = 0; h < a.length; h++){
                                var d = a[h];
                                !0 === d.connected && (s = d.toId == n.id ? d.from : d.to, n.id != s.id && (e(n, s, d), i(s, r)));
                            }
                        }
                    };
                    if (void 0 === i) for(var r = 0, s = 0; s < this.body.nodeIndices.length; s++){
                        var a = this.body.nodeIndices[s];
                        if (void 0 === o[a]) n(this.body.nodes[a], r), r += 1;
                    }
                    else {
                        var h = this.body.nodes[i];
                        if (void 0 === h) return void console.error("Node not found:", i);
                        n(h);
                    }
                }
            },
            {
                key: "_shiftBlock",
                value: function(t, e) {
                    var i = this, o = {};
                    !function t(n) {
                        if (!o[n]) {
                            o[n] = !0, i.direction.shift(n, e);
                            var r = i.hierarchical.childrenReference[n];
                            if (void 0 !== r) for(var s = 0; s < r.length; s++)t(r[s]);
                        }
                    }(t);
                }
            },
            {
                key: "_findCommonParent",
                value: function(t, e) {
                    var i = this, o = {};
                    return function t(e, o) {
                        var n = i.hierarchical.parentReference[o];
                        if (void 0 !== n) for(var r = 0; r < n.length; r++){
                            var s = n[r];
                            e[s] = !0, t(e, s);
                        }
                    }(o, t), function t(e, o) {
                        var n = i.hierarchical.parentReference[o];
                        if (void 0 !== n) for(var r = 0; r < n.length; r++){
                            var s = n[r];
                            if (void 0 !== e[s]) return {
                                foundParent: s,
                                withChild: o
                            };
                            var a = t(e, s);
                            if (null !== a.foundParent) return a;
                        }
                        return {
                            foundParent: null,
                            withChild: o
                        };
                    }(o, e);
                }
            },
            {
                key: "setDirectionStrategy",
                value: function() {
                    var t = "UD" === this.options.hierarchical.direction || "DU" === this.options.hierarchical.direction;
                    this.direction = t ? new US(this) : new YS(this);
                }
            },
            {
                key: "_getCenterPosition",
                value: function(t) {
                    for(var e = 1e9, i = -1000000000, o = 0; o < t.length; o++){
                        var n = void 0;
                        if (void 0 !== t[o].id) n = t[o];
                        else {
                            var r = t[o];
                            n = this.body.nodes[r];
                        }
                        var s = this.direction.getPosition(n);
                        e = Math.min(e, s), i = Math.max(i, s);
                    }
                    return .5 * (e + i);
                }
            }
        ]), t;
    }();
    function sT(t, e) {
        var i = void 0 !== cf && ph(t) || t["@@iterator"];
        if (!i) {
            if (Of(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return aT(t, e);
                var o = mf(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return Xa(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return aT(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function aT(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    var hT = function() {
        function t(e, i, o, n) {
            var r, s, a = this;
            vh(this, t), this.body = e, this.canvas = i, this.selectionHandler = o, this.interactionHandler = n, this.editMode = !1, this.manipulationDiv = void 0, this.editModeDiv = void 0, this.closeDiv = void 0, this._domEventListenerCleanupQueue = [], this.temporaryUIFunctions = {}, this.temporaryEventFunctions = [], this.touchTime = 0, this.temporaryIds = {
                nodes: [],
                edges: []
            }, this.guiEnabled = !1, this.inMode = !1, this.selectedControlNode = void 0, this.options = {}, this.defaultOptions = {
                enabled: !1,
                initiallyActive: !1,
                addNode: !0,
                addEdge: !0,
                editNode: void 0,
                editEdge: !0,
                deleteNode: !0,
                deleteEdge: !0,
                controlNodeStyle: {
                    shape: "dot",
                    size: 6,
                    color: {
                        background: "#ff0000",
                        border: "#3c3c3c",
                        highlight: {
                            background: "#07f968",
                            border: "#3c3c3c"
                        }
                    },
                    borderWidth: 2,
                    borderWidthSelected: 2
                }
            }, wo(this.options, this.defaultOptions), this.body.emitter.on("destroy", function() {
                a._clean();
            }), this.body.emitter.on("_dataChanged", Wo(r = this._restore).call(r, this)), this.body.emitter.on("_resetData", Wo(s = this._restore).call(s, this));
        }
        return wu(t, [
            {
                key: "_restore",
                value: function() {
                    !1 !== this.inMode && (!0 === this.options.initiallyActive ? this.enableEditMode() : this.disableEditMode());
                }
            },
            {
                key: "setOptions",
                value: function(t, e, i) {
                    void 0 !== e && (void 0 !== e.locale ? this.options.locale = e.locale : this.options.locale = i.locale, void 0 !== e.locales ? this.options.locales = e.locales : this.options.locales = i.locales), void 0 !== t && ("boolean" == typeof t ? this.options.enabled = t : (this.options.enabled = !0, Rm(this.options, t)), !0 === this.options.initiallyActive && (this.editMode = !0), this._setup());
                }
            },
            {
                key: "toggleEditMode",
                value: function() {
                    !0 === this.editMode ? this.disableEditMode() : this.enableEditMode();
                }
            },
            {
                key: "enableEditMode",
                value: function() {
                    this.editMode = !0, this._clean(), !0 === this.guiEnabled && (this.manipulationDiv.style.display = "block", this.closeDiv.style.display = "block", this.editModeDiv.style.display = "none", this.showManipulatorToolbar());
                }
            },
            {
                key: "disableEditMode",
                value: function() {
                    this.editMode = !1, this._clean(), !0 === this.guiEnabled && (this.manipulationDiv.style.display = "none", this.closeDiv.style.display = "none", this.editModeDiv.style.display = "block", this._createEditButton());
                }
            },
            {
                key: "showManipulatorToolbar",
                value: function() {
                    if (this._clean(), this.manipulationDOM = {}, !0 === this.guiEnabled) {
                        var t, e;
                        this.editMode = !0, this.manipulationDiv.style.display = "block", this.closeDiv.style.display = "block";
                        var i = this.selectionHandler.getSelectedNodeCount(), o = this.selectionHandler.getSelectedEdgeCount(), n = i + o, r = this.options.locales[this.options.locale], s = !1;
                        !1 !== this.options.addNode && (this._createAddNodeButton(r), s = !0), !1 !== this.options.addEdge && (!0 === s ? this._createSeperator(1) : s = !0, this._createAddEdgeButton(r)), 1 === i && "function" == typeof this.options.editNode ? (!0 === s ? this._createSeperator(2) : s = !0, this._createEditNodeButton(r)) : 1 === o && 0 === i && !1 !== this.options.editEdge && (!0 === s ? this._createSeperator(3) : s = !0, this._createEditEdgeButton(r)), 0 !== n && (i > 0 && !1 !== this.options.deleteNode || 0 === i && !1 !== this.options.deleteEdge) && (!0 === s && this._createSeperator(4), this._createDeleteButton(r)), this._bindElementEvents(this.closeDiv, Wo(t = this.toggleEditMode).call(t, this)), this._temporaryBindEvent("select", Wo(e = this.showManipulatorToolbar).call(e, this));
                    }
                    this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "addNodeMode",
                value: function() {
                    var t;
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "addNode", !0 === this.guiEnabled) {
                        var e, i = this.options.locales[this.options.locale];
                        this.manipulationDOM = {}, this._createBackButton(i), this._createSeperator(), this._createDescription(i.addDescription || this.options.locales.en.addDescription), this._bindElementEvents(this.closeDiv, Wo(e = this.toggleEditMode).call(e, this));
                    }
                    this._temporaryBindEvent("click", Wo(t = this._performAddNode).call(t, this));
                }
            },
            {
                key: "editNode",
                value: function() {
                    var t = this;
                    !0 !== this.editMode && this.enableEditMode(), this._clean();
                    var e = this.selectionHandler.getSelectedNodes()[0];
                    if (void 0 !== e) {
                        if (this.inMode = "editNode", "function" != typeof this.options.editNode) throw new Error("No function has been configured to handle the editing of nodes.");
                        if (!0 !== e.isCluster) {
                            var i = Rm({}, e.options, !1);
                            if (i.x = e.x, i.y = e.y, 2 !== this.options.editNode.length) throw new Error("The function for edit does not support two arguments (data, callback)");
                            this.options.editNode(i, function(e) {
                                null != e && "editNode" === t.inMode && t.body.data.nodes.getDataSet().update(e), t.showManipulatorToolbar();
                            });
                        } else alert(this.options.locales[this.options.locale].editClusterError || this.options.locales.en.editClusterError);
                    } else this.showManipulatorToolbar();
                }
            },
            {
                key: "addEdgeMode",
                value: function() {
                    var t, e, i, o, n;
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "addEdge", !0 === this.guiEnabled) {
                        var r, s = this.options.locales[this.options.locale];
                        this.manipulationDOM = {}, this._createBackButton(s), this._createSeperator(), this._createDescription(s.edgeDescription || this.options.locales.en.edgeDescription), this._bindElementEvents(this.closeDiv, Wo(r = this.toggleEditMode).call(r, this));
                    }
                    this._temporaryBindUI("onTouch", Wo(t = this._handleConnect).call(t, this)), this._temporaryBindUI("onDragEnd", Wo(e = this._finishConnect).call(e, this)), this._temporaryBindUI("onDrag", Wo(i = this._dragControlNode).call(i, this)), this._temporaryBindUI("onRelease", Wo(o = this._finishConnect).call(o, this)), this._temporaryBindUI("onDragStart", Wo(n = this._dragStartEdge).call(n, this)), this._temporaryBindUI("onHold", function() {});
                }
            },
            {
                key: "editEdgeMode",
                value: function() {
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "editEdge", "object" !== gu(this.options.editEdge) || "function" != typeof this.options.editEdge.editWithoutDrag || (this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0], void 0 === this.edgeBeingEditedId)) {
                        if (!0 === this.guiEnabled) {
                            var t, e = this.options.locales[this.options.locale];
                            this.manipulationDOM = {}, this._createBackButton(e), this._createSeperator(), this._createDescription(e.editEdgeDescription || this.options.locales.en.editEdgeDescription), this._bindElementEvents(this.closeDiv, Wo(t = this.toggleEditMode).call(t, this));
                        }
                        if (this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0], void 0 !== this.edgeBeingEditedId) {
                            var i, o, n, r, s = this.body.edges[this.edgeBeingEditedId], a = this._getNewTargetNode(s.from.x, s.from.y), h = this._getNewTargetNode(s.to.x, s.to.y);
                            this.temporaryIds.nodes.push(a.id), this.temporaryIds.nodes.push(h.id), this.body.nodes[a.id] = a, this.body.nodeIndices.push(a.id), this.body.nodes[h.id] = h, this.body.nodeIndices.push(h.id), this._temporaryBindUI("onTouch", Wo(i = this._controlNodeTouch).call(i, this)), this._temporaryBindUI("onTap", function() {}), this._temporaryBindUI("onHold", function() {}), this._temporaryBindUI("onDragStart", Wo(o = this._controlNodeDragStart).call(o, this)), this._temporaryBindUI("onDrag", Wo(n = this._controlNodeDrag).call(n, this)), this._temporaryBindUI("onDragEnd", Wo(r = this._controlNodeDragEnd).call(r, this)), this._temporaryBindUI("onMouseMove", function() {}), this._temporaryBindEvent("beforeDrawing", function(t) {
                                var e = s.edgeType.findBorderPositions(t);
                                !1 === a.selected && (a.x = e.from.x, a.y = e.from.y), !1 === h.selected && (h.x = e.to.x, h.y = e.to.y);
                            }), this.body.emitter.emit("_redraw");
                        } else this.showManipulatorToolbar();
                    } else {
                        var d = this.body.edges[this.edgeBeingEditedId];
                        this._performEditEdge(d.from.id, d.to.id);
                    }
                }
            },
            {
                key: "deleteSelected",
                value: function() {
                    var t = this;
                    !0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "delete";
                    var e = this.selectionHandler.getSelectedNodeIds(), i = this.selectionHandler.getSelectedEdgeIds(), o = void 0;
                    if (e.length > 0) {
                        for(var n = 0; n < e.length; n++)if (!0 === this.body.nodes[e[n]].isCluster) return void alert(this.options.locales[this.options.locale].deleteClusterError || this.options.locales.en.deleteClusterError);
                        "function" == typeof this.options.deleteNode && (o = this.options.deleteNode);
                    } else i.length > 0 && "function" == typeof this.options.deleteEdge && (o = this.options.deleteEdge);
                    if ("function" == typeof o) {
                        var r = {
                            nodes: e,
                            edges: i
                        };
                        if (2 !== o.length) throw new Error("The function for delete does not support two arguments (data, callback)");
                        o(r, function(e) {
                            null != e && "delete" === t.inMode ? (t.body.data.edges.getDataSet().remove(e.edges), t.body.data.nodes.getDataSet().remove(e.nodes), t.body.emitter.emit("startSimulation"), t.showManipulatorToolbar()) : (t.body.emitter.emit("startSimulation"), t.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().remove(i), this.body.data.nodes.getDataSet().remove(e), this.body.emitter.emit("startSimulation"), this.showManipulatorToolbar();
                }
            },
            {
                key: "_setup",
                value: function() {
                    !0 === this.options.enabled ? (this.guiEnabled = !0, this._createWrappers(), !1 === this.editMode ? this._createEditButton() : this.showManipulatorToolbar()) : (this._removeManipulationDOM(), this.guiEnabled = !1);
                }
            },
            {
                key: "_createWrappers",
                value: function() {
                    var t, e;
                    (void 0 === this.manipulationDiv && (this.manipulationDiv = document.createElement("div"), this.manipulationDiv.className = "vis-manipulation", !0 === this.editMode ? this.manipulationDiv.style.display = "block" : this.manipulationDiv.style.display = "none", this.canvas.frame.appendChild(this.manipulationDiv)), void 0 === this.editModeDiv && (this.editModeDiv = document.createElement("div"), this.editModeDiv.className = "vis-edit-mode", !0 === this.editMode ? this.editModeDiv.style.display = "none" : this.editModeDiv.style.display = "block", this.canvas.frame.appendChild(this.editModeDiv)), void 0 === this.closeDiv) && (this.closeDiv = document.createElement("button"), this.closeDiv.className = "vis-close", this.closeDiv.setAttribute("aria-label", null !== (t = null === (e = this.options.locales[this.options.locale]) || void 0 === e ? void 0 : e.close) && void 0 !== t ? t : this.options.locales.en.close), this.closeDiv.style.display = this.manipulationDiv.style.display, this.canvas.frame.appendChild(this.closeDiv));
                }
            },
            {
                key: "_getNewTargetNode",
                value: function(t, e) {
                    var i = Rm({}, this.options.controlNodeStyle);
                    i.id = "targetNode" + yO(), i.hidden = !1, i.physics = !1, i.x = t, i.y = e;
                    var o = this.body.functions.createNode(i);
                    return o.shape.boundingBox = {
                        left: t,
                        right: t,
                        top: e,
                        bottom: e
                    }, o;
                }
            },
            {
                key: "_createEditButton",
                value: function() {
                    var t;
                    this._clean(), this.manipulationDOM = {}, Dm(this.editModeDiv);
                    var e = this.options.locales[this.options.locale], i = this._createButton("editMode", "vis-edit vis-edit-mode", e.edit || this.options.locales.en.edit);
                    this.editModeDiv.appendChild(i), this._bindElementEvents(i, Wo(t = this.toggleEditMode).call(t, this));
                }
            },
            {
                key: "_clean",
                value: function() {
                    this.inMode = !1, !0 === this.guiEnabled && (Dm(this.editModeDiv), Dm(this.manipulationDiv), this._cleanupDOMEventListeners()), this._cleanupTemporaryNodesAndEdges(), this._unbindTemporaryUIs(), this._unbindTemporaryEvents(), this.body.emitter.emit("restorePhysics");
                }
            },
            {
                key: "_cleanupDOMEventListeners",
                value: function() {
                    var t, e, i = sT(Pp(t = this._domEventListenerCleanupQueue).call(t, 0));
                    try {
                        for(i.s(); !(e = i.n()).done;)(0, e.value)();
                    } catch (t) {
                        i.e(t);
                    } finally{
                        i.f();
                    }
                }
            },
            {
                key: "_removeManipulationDOM",
                value: function() {
                    this._clean(), Dm(this.manipulationDiv), Dm(this.editModeDiv), Dm(this.closeDiv), this.manipulationDiv && this.canvas.frame.removeChild(this.manipulationDiv), this.editModeDiv && this.canvas.frame.removeChild(this.editModeDiv), this.closeDiv && this.canvas.frame.removeChild(this.closeDiv), this.manipulationDiv = void 0, this.editModeDiv = void 0, this.closeDiv = void 0;
                }
            },
            {
                key: "_createSeperator",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                    this.manipulationDOM["seperatorLineDiv" + t] = document.createElement("div"), this.manipulationDOM["seperatorLineDiv" + t].className = "vis-separator-line", this.manipulationDiv.appendChild(this.manipulationDOM["seperatorLineDiv" + t]);
                }
            },
            {
                key: "_createAddNodeButton",
                value: function(t) {
                    var e, i = this._createButton("addNode", "vis-add", t.addNode || this.options.locales.en.addNode);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, Wo(e = this.addNodeMode).call(e, this));
                }
            },
            {
                key: "_createAddEdgeButton",
                value: function(t) {
                    var e, i = this._createButton("addEdge", "vis-connect", t.addEdge || this.options.locales.en.addEdge);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, Wo(e = this.addEdgeMode).call(e, this));
                }
            },
            {
                key: "_createEditNodeButton",
                value: function(t) {
                    var e, i = this._createButton("editNode", "vis-edit", t.editNode || this.options.locales.en.editNode);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, Wo(e = this.editNode).call(e, this));
                }
            },
            {
                key: "_createEditEdgeButton",
                value: function(t) {
                    var e, i = this._createButton("editEdge", "vis-edit", t.editEdge || this.options.locales.en.editEdge);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, Wo(e = this.editEdgeMode).call(e, this));
                }
            },
            {
                key: "_createDeleteButton",
                value: function(t) {
                    var e, i;
                    i = this.options.rtl ? "vis-delete-rtl" : "vis-delete";
                    var o = this._createButton("delete", i, t.del || this.options.locales.en.del);
                    this.manipulationDiv.appendChild(o), this._bindElementEvents(o, Wo(e = this.deleteSelected).call(e, this));
                }
            },
            {
                key: "_createBackButton",
                value: function(t) {
                    var e, i = this._createButton("back", "vis-back", t.back || this.options.locales.en.back);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, Wo(e = this.showManipulatorToolbar).call(e, this));
                }
            },
            {
                key: "_createButton",
                value: function(t, e, i) {
                    var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "vis-label";
                    return this.manipulationDOM[t + "Div"] = document.createElement("button"), this.manipulationDOM[t + "Div"].className = "vis-button " + e, this.manipulationDOM[t + "Label"] = document.createElement("div"), this.manipulationDOM[t + "Label"].className = o, this.manipulationDOM[t + "Label"].innerText = i, this.manipulationDOM[t + "Div"].appendChild(this.manipulationDOM[t + "Label"]), this.manipulationDOM[t + "Div"];
                }
            },
            {
                key: "_createDescription",
                value: function(t) {
                    this.manipulationDOM.descriptionLabel = document.createElement("div"), this.manipulationDOM.descriptionLabel.className = "vis-none", this.manipulationDOM.descriptionLabel.innerText = t, this.manipulationDiv.appendChild(this.manipulationDOM.descriptionLabel);
                }
            },
            {
                key: "_temporaryBindEvent",
                value: function(t, e) {
                    this.temporaryEventFunctions.push({
                        event: t,
                        boundFunction: e
                    }), this.body.emitter.on(t, e);
                }
            },
            {
                key: "_temporaryBindUI",
                value: function(t, e) {
                    if (void 0 === this.body.eventListeners[t]) throw new Error("This UI function does not exist. Typo? You tried: " + t + " possible are: " + $v(zf(this.body.eventListeners)));
                    this.temporaryUIFunctions[t] = this.body.eventListeners[t], this.body.eventListeners[t] = e;
                }
            },
            {
                key: "_unbindTemporaryUIs",
                value: function() {
                    for(var t in this.temporaryUIFunctions)Object.prototype.hasOwnProperty.call(this.temporaryUIFunctions, t) && (this.body.eventListeners[t] = this.temporaryUIFunctions[t], delete this.temporaryUIFunctions[t]);
                    this.temporaryUIFunctions = {};
                }
            },
            {
                key: "_unbindTemporaryEvents",
                value: function() {
                    for(var t = 0; t < this.temporaryEventFunctions.length; t++){
                        var e = this.temporaryEventFunctions[t].event, i = this.temporaryEventFunctions[t].boundFunction;
                        this.body.emitter.off(e, i);
                    }
                    this.temporaryEventFunctions = [];
                }
            },
            {
                key: "_bindElementEvents",
                value: function(t, e) {
                    var i = new ub(t, {});
                    EO(i, e), this._domEventListenerCleanupQueue.push(function() {
                        i.destroy();
                    });
                    var o = function(t) {
                        var i = t.keyCode, o = t.key;
                        "Enter" !== o && " " !== o && 13 !== i && 32 !== i || e();
                    };
                    t.addEventListener("keyup", o, !1), this._domEventListenerCleanupQueue.push(function() {
                        t.removeEventListener("keyup", o, !1);
                    });
                }
            },
            {
                key: "_cleanupTemporaryNodesAndEdges",
                value: function() {
                    for(var t = 0; t < this.temporaryIds.edges.length; t++){
                        var e;
                        this.body.edges[this.temporaryIds.edges[t]].disconnect(), delete this.body.edges[this.temporaryIds.edges[t]];
                        var i, o = Vv(e = this.body.edgeIndices).call(e, this.temporaryIds.edges[t]);
                        if (-1 !== o) Pp(i = this.body.edgeIndices).call(i, o, 1);
                    }
                    for(var n = 0; n < this.temporaryIds.nodes.length; n++){
                        var r;
                        delete this.body.nodes[this.temporaryIds.nodes[n]];
                        var s, a = Vv(r = this.body.nodeIndices).call(r, this.temporaryIds.nodes[n]);
                        if (-1 !== a) Pp(s = this.body.nodeIndices).call(s, a, 1);
                    }
                    this.temporaryIds = {
                        nodes: [],
                        edges: []
                    };
                }
            },
            {
                key: "_controlNodeTouch",
                value: function(t) {
                    this.selectionHandler.unselectAll(), this.lastTouch = this.body.functions.getPointer(t.center), this.lastTouch.translation = wo({}, this.body.view.translation);
                }
            },
            {
                key: "_controlNodeDragStart",
                value: function() {
                    var t = this.lastTouch, e = this.selectionHandler._pointerToPositionObject(t), i = this.body.nodes[this.temporaryIds.nodes[0]], o = this.body.nodes[this.temporaryIds.nodes[1]], n = this.body.edges[this.edgeBeingEditedId];
                    this.selectedControlNode = void 0;
                    var r = i.isOverlappingWith(e), s = o.isOverlappingWith(e);
                    !0 === r ? (this.selectedControlNode = i, n.edgeType.from = i) : !0 === s && (this.selectedControlNode = o, n.edgeType.to = o), void 0 !== this.selectedControlNode && this.selectionHandler.selectObject(this.selectedControlNode), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_controlNodeDrag",
                value: function(t) {
                    this.body.emitter.emit("disablePhysics");
                    var e = this.body.functions.getPointer(t.center), i = this.canvas.DOMtoCanvas(e);
                    void 0 !== this.selectedControlNode ? (this.selectedControlNode.x = i.x, this.selectedControlNode.y = i.y) : this.interactionHandler.onDrag(t), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_controlNodeDragEnd",
                value: function(t) {
                    var e = this.body.functions.getPointer(t.center), i = this.selectionHandler._pointerToPositionObject(e), o = this.body.edges[this.edgeBeingEditedId];
                    if (void 0 !== this.selectedControlNode) {
                        this.selectionHandler.unselectAll();
                        for(var n = this.selectionHandler._getAllNodesOverlappingWith(i), r = void 0, s = n.length - 1; s >= 0; s--)if (n[s] !== this.selectedControlNode.id) {
                            r = this.body.nodes[n[s]];
                            break;
                        }
                        if (void 0 !== r && void 0 !== this.selectedControlNode) {
                            if (!0 === r.isCluster) alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError);
                            else {
                                var a = this.body.nodes[this.temporaryIds.nodes[0]];
                                this.selectedControlNode.id === a.id ? this._performEditEdge(r.id, o.to.id) : this._performEditEdge(o.from.id, r.id);
                            }
                        } else o.updateEdgeType(), this.body.emitter.emit("restorePhysics");
                        this.body.emitter.emit("_redraw");
                    }
                }
            },
            {
                key: "_handleConnect",
                value: function(t) {
                    if ((new Date).valueOf() - this.touchTime > 100) {
                        this.lastTouch = this.body.functions.getPointer(t.center), this.lastTouch.translation = wo({}, this.body.view.translation), this.interactionHandler.drag.pointer = this.lastTouch, this.interactionHandler.drag.translation = this.lastTouch.translation;
                        var e = this.lastTouch, i = this.selectionHandler.getNodeAt(e);
                        if (void 0 !== i) {
                            if (!0 === i.isCluster) alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError);
                            else {
                                var o = this._getNewTargetNode(i.x, i.y);
                                this.body.nodes[o.id] = o, this.body.nodeIndices.push(o.id);
                                var n = this.body.functions.createEdge({
                                    id: "connectionEdge" + yO(),
                                    from: i.id,
                                    to: o.id,
                                    physics: !1,
                                    smooth: {
                                        enabled: !0,
                                        type: "continuous",
                                        roundness: .5
                                    }
                                });
                                this.body.edges[n.id] = n, this.body.edgeIndices.push(n.id), this.temporaryIds.nodes.push(o.id), this.temporaryIds.edges.push(n.id);
                            }
                        }
                        this.touchTime = (new Date).valueOf();
                    }
                }
            },
            {
                key: "_dragControlNode",
                value: function(t) {
                    var e = this.body.functions.getPointer(t.center), i = this.selectionHandler._pointerToPositionObject(e), o = void 0;
                    void 0 !== this.temporaryIds.edges[0] && (o = this.body.edges[this.temporaryIds.edges[0]].fromId);
                    for(var n = this.selectionHandler._getAllNodesOverlappingWith(i), r = void 0, s = n.length - 1; s >= 0; s--){
                        var a;
                        if (-1 === Vv(a = this.temporaryIds.nodes).call(a, n[s])) {
                            r = this.body.nodes[n[s]];
                            break;
                        }
                    }
                    if (t.controlEdge = {
                        from: o,
                        to: r ? r.id : void 0
                    }, this.selectionHandler.generateClickEvent("controlNodeDragging", t, e), void 0 !== this.temporaryIds.nodes[0]) {
                        var h = this.body.nodes[this.temporaryIds.nodes[0]];
                        h.x = this.canvas._XconvertDOMtoCanvas(e.x), h.y = this.canvas._YconvertDOMtoCanvas(e.y), this.body.emitter.emit("_redraw");
                    } else this.interactionHandler.onDrag(t);
                }
            },
            {
                key: "_finishConnect",
                value: function(t) {
                    var e = this.body.functions.getPointer(t.center), i = this.selectionHandler._pointerToPositionObject(e), o = void 0;
                    void 0 !== this.temporaryIds.edges[0] && (o = this.body.edges[this.temporaryIds.edges[0]].fromId);
                    for(var n = this.selectionHandler._getAllNodesOverlappingWith(i), r = void 0, s = n.length - 1; s >= 0; s--){
                        var a;
                        if (-1 === Vv(a = this.temporaryIds.nodes).call(a, n[s])) {
                            r = this.body.nodes[n[s]];
                            break;
                        }
                    }
                    this._cleanupTemporaryNodesAndEdges(), void 0 !== r && (!0 === r.isCluster ? alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError) : void 0 !== this.body.nodes[o] && void 0 !== this.body.nodes[r.id] && this._performAddEdge(o, r.id)), t.controlEdge = {
                        from: o,
                        to: r ? r.id : void 0
                    }, this.selectionHandler.generateClickEvent("controlNodeDragEnd", t, e), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_dragStartEdge",
                value: function(t) {
                    var e = this.lastTouch;
                    this.selectionHandler.generateClickEvent("dragStart", t, e, void 0, !0);
                }
            },
            {
                key: "_performAddNode",
                value: function(t) {
                    var e = this, i = {
                        id: yO(),
                        x: t.pointer.canvas.x,
                        y: t.pointer.canvas.y,
                        label: "new"
                    };
                    if ("function" == typeof this.options.addNode) {
                        if (2 !== this.options.addNode.length) throw this.showManipulatorToolbar(), new Error("The function for add does not support two arguments (data,callback)");
                        this.options.addNode(i, function(t) {
                            null != t && "addNode" === e.inMode && e.body.data.nodes.getDataSet().add(t), e.showManipulatorToolbar();
                        });
                    } else this.body.data.nodes.getDataSet().add(i), this.showManipulatorToolbar();
                }
            },
            {
                key: "_performAddEdge",
                value: function(t, e) {
                    var i = this, o = {
                        from: t,
                        to: e
                    };
                    if ("function" == typeof this.options.addEdge) {
                        if (2 !== this.options.addEdge.length) throw new Error("The function for connect does not support two arguments (data,callback)");
                        this.options.addEdge(o, function(t) {
                            null != t && "addEdge" === i.inMode && (i.body.data.edges.getDataSet().add(t), i.selectionHandler.unselectAll(), i.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().add(o), this.selectionHandler.unselectAll(), this.showManipulatorToolbar();
                }
            },
            {
                key: "_performEditEdge",
                value: function(t, e) {
                    var i = this, o = {
                        id: this.edgeBeingEditedId,
                        from: t,
                        to: e,
                        label: this.body.data.edges.get(this.edgeBeingEditedId).label
                    }, n = this.options.editEdge;
                    if ("object" === gu(n) && (n = n.editWithoutDrag), "function" == typeof n) {
                        if (2 !== n.length) throw new Error("The function for edit does not support two arguments (data, callback)");
                        n(o, function(t) {
                            null == t || "editEdge" !== i.inMode ? (i.body.edges[o.id].updateEdgeType(), i.body.emitter.emit("_redraw"), i.showManipulatorToolbar()) : (i.body.data.edges.getDataSet().update(t), i.selectionHandler.unselectAll(), i.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().update(o), this.selectionHandler.unselectAll(), this.showManipulatorToolbar();
                }
            }
        ]), t;
    }(), dT = "string", lT = "boolean", cT = "number", uT = "array", fT = "object", pT = [
        "arrow",
        "bar",
        "box",
        "circle",
        "crow",
        "curve",
        "diamond",
        "image",
        "inv_curve",
        "inv_triangle",
        "triangle",
        "vee"
    ], vT = {
        borderWidth: {
            number: cT
        },
        borderWidthSelected: {
            number: cT,
            undefined: "undefined"
        },
        brokenImage: {
            string: dT,
            undefined: "undefined"
        },
        chosen: {
            label: {
                boolean: lT,
                function: "function"
            },
            node: {
                boolean: lT,
                function: "function"
            },
            __type__: {
                object: fT,
                boolean: lT
            }
        },
        color: {
            border: {
                string: dT
            },
            background: {
                string: dT
            },
            highlight: {
                border: {
                    string: dT
                },
                background: {
                    string: dT
                },
                __type__: {
                    object: fT,
                    string: dT
                }
            },
            hover: {
                border: {
                    string: dT
                },
                background: {
                    string: dT
                },
                __type__: {
                    object: fT,
                    string: dT
                }
            },
            __type__: {
                object: fT,
                string: dT
            }
        },
        opacity: {
            number: cT,
            undefined: "undefined"
        },
        fixed: {
            x: {
                boolean: lT
            },
            y: {
                boolean: lT
            },
            __type__: {
                object: fT,
                boolean: lT
            }
        },
        font: {
            align: {
                string: dT
            },
            color: {
                string: dT
            },
            size: {
                number: cT
            },
            face: {
                string: dT
            },
            background: {
                string: dT
            },
            strokeWidth: {
                number: cT
            },
            strokeColor: {
                string: dT
            },
            vadjust: {
                number: cT
            },
            multi: {
                boolean: lT,
                string: dT
            },
            bold: {
                color: {
                    string: dT
                },
                size: {
                    number: cT
                },
                face: {
                    string: dT
                },
                mod: {
                    string: dT
                },
                vadjust: {
                    number: cT
                },
                __type__: {
                    object: fT,
                    string: dT
                }
            },
            boldital: {
                color: {
                    string: dT
                },
                size: {
                    number: cT
                },
                face: {
                    string: dT
                },
                mod: {
                    string: dT
                },
                vadjust: {
                    number: cT
                },
                __type__: {
                    object: fT,
                    string: dT
                }
            },
            ital: {
                color: {
                    string: dT
                },
                size: {
                    number: cT
                },
                face: {
                    string: dT
                },
                mod: {
                    string: dT
                },
                vadjust: {
                    number: cT
                },
                __type__: {
                    object: fT,
                    string: dT
                }
            },
            mono: {
                color: {
                    string: dT
                },
                size: {
                    number: cT
                },
                face: {
                    string: dT
                },
                mod: {
                    string: dT
                },
                vadjust: {
                    number: cT
                },
                __type__: {
                    object: fT,
                    string: dT
                }
            },
            __type__: {
                object: fT,
                string: dT
            }
        },
        group: {
            string: dT,
            number: cT,
            undefined: "undefined"
        },
        heightConstraint: {
            minimum: {
                number: cT
            },
            valign: {
                string: dT
            },
            __type__: {
                object: fT,
                boolean: lT,
                number: cT
            }
        },
        hidden: {
            boolean: lT
        },
        icon: {
            face: {
                string: dT
            },
            code: {
                string: dT
            },
            size: {
                number: cT
            },
            color: {
                string: dT
            },
            weight: {
                string: dT,
                number: cT
            },
            __type__: {
                object: fT
            }
        },
        id: {
            string: dT,
            number: cT
        },
        image: {
            selected: {
                string: dT,
                undefined: "undefined"
            },
            unselected: {
                string: dT,
                undefined: "undefined"
            },
            __type__: {
                object: fT,
                string: dT
            }
        },
        imagePadding: {
            top: {
                number: cT
            },
            right: {
                number: cT
            },
            bottom: {
                number: cT
            },
            left: {
                number: cT
            },
            __type__: {
                object: fT,
                number: cT
            }
        },
        label: {
            string: dT,
            undefined: "undefined"
        },
        labelHighlightBold: {
            boolean: lT
        },
        level: {
            number: cT,
            undefined: "undefined"
        },
        margin: {
            top: {
                number: cT
            },
            right: {
                number: cT
            },
            bottom: {
                number: cT
            },
            left: {
                number: cT
            },
            __type__: {
                object: fT,
                number: cT
            }
        },
        mass: {
            number: cT
        },
        physics: {
            boolean: lT
        },
        scaling: {
            min: {
                number: cT
            },
            max: {
                number: cT
            },
            label: {
                enabled: {
                    boolean: lT
                },
                min: {
                    number: cT
                },
                max: {
                    number: cT
                },
                maxVisible: {
                    number: cT
                },
                drawThreshold: {
                    number: cT
                },
                __type__: {
                    object: fT,
                    boolean: lT
                }
            },
            customScalingFunction: {
                function: "function"
            },
            __type__: {
                object: fT
            }
        },
        shadow: {
            enabled: {
                boolean: lT
            },
            color: {
                string: dT
            },
            size: {
                number: cT
            },
            x: {
                number: cT
            },
            y: {
                number: cT
            },
            __type__: {
                object: fT,
                boolean: lT
            }
        },
        shape: {
            string: [
                "custom",
                "ellipse",
                "circle",
                "database",
                "box",
                "text",
                "image",
                "circularImage",
                "diamond",
                "dot",
                "star",
                "triangle",
                "triangleDown",
                "square",
                "icon",
                "hexagon"
            ]
        },
        ctxRenderer: {
            function: "function"
        },
        shapeProperties: {
            borderDashes: {
                boolean: lT,
                array: uT
            },
            borderRadius: {
                number: cT
            },
            interpolation: {
                boolean: lT
            },
            useImageSize: {
                boolean: lT
            },
            useBorderWithImage: {
                boolean: lT
            },
            coordinateOrigin: {
                string: [
                    "center",
                    "top-left"
                ]
            },
            __type__: {
                object: fT
            }
        },
        size: {
            number: cT
        },
        title: {
            string: dT,
            dom: "dom",
            undefined: "undefined"
        },
        value: {
            number: cT,
            undefined: "undefined"
        },
        widthConstraint: {
            minimum: {
                number: cT
            },
            maximum: {
                number: cT
            },
            __type__: {
                object: fT,
                boolean: lT,
                number: cT
            }
        },
        x: {
            number: cT
        },
        y: {
            number: cT
        },
        __type__: {
            object: fT
        }
    }, gT = {
        configure: {
            enabled: {
                boolean: lT
            },
            filter: {
                boolean: lT,
                string: dT,
                array: uT,
                function: "function"
            },
            container: {
                dom: "dom"
            },
            showButton: {
                boolean: lT
            },
            __type__: {
                object: fT,
                boolean: lT,
                string: dT,
                array: uT,
                function: "function"
            }
        },
        edges: {
            arrows: {
                to: {
                    enabled: {
                        boolean: lT
                    },
                    scaleFactor: {
                        number: cT
                    },
                    type: {
                        string: pT
                    },
                    imageHeight: {
                        number: cT
                    },
                    imageWidth: {
                        number: cT
                    },
                    src: {
                        string: dT
                    },
                    __type__: {
                        object: fT,
                        boolean: lT
                    }
                },
                middle: {
                    enabled: {
                        boolean: lT
                    },
                    scaleFactor: {
                        number: cT
                    },
                    type: {
                        string: pT
                    },
                    imageWidth: {
                        number: cT
                    },
                    imageHeight: {
                        number: cT
                    },
                    src: {
                        string: dT
                    },
                    __type__: {
                        object: fT,
                        boolean: lT
                    }
                },
                from: {
                    enabled: {
                        boolean: lT
                    },
                    scaleFactor: {
                        number: cT
                    },
                    type: {
                        string: pT
                    },
                    imageWidth: {
                        number: cT
                    },
                    imageHeight: {
                        number: cT
                    },
                    src: {
                        string: dT
                    },
                    __type__: {
                        object: fT,
                        boolean: lT
                    }
                },
                __type__: {
                    string: [
                        "from",
                        "to",
                        "middle"
                    ],
                    object: fT
                }
            },
            endPointOffset: {
                from: {
                    number: cT
                },
                to: {
                    number: cT
                },
                __type__: {
                    object: fT,
                    number: cT
                }
            },
            arrowStrikethrough: {
                boolean: lT
            },
            background: {
                enabled: {
                    boolean: lT
                },
                color: {
                    string: dT
                },
                size: {
                    number: cT
                },
                dashes: {
                    boolean: lT,
                    array: uT
                },
                __type__: {
                    object: fT,
                    boolean: lT
                }
            },
            chosen: {
                label: {
                    boolean: lT,
                    function: "function"
                },
                edge: {
                    boolean: lT,
                    function: "function"
                },
                __type__: {
                    object: fT,
                    boolean: lT
                }
            },
            color: {
                color: {
                    string: dT
                },
                highlight: {
                    string: dT
                },
                hover: {
                    string: dT
                },
                inherit: {
                    string: [
                        "from",
                        "to",
                        "both"
                    ],
                    boolean: lT
                },
                opacity: {
                    number: cT
                },
                __type__: {
                    object: fT,
                    string: dT
                }
            },
            dashes: {
                boolean: lT,
                array: uT
            },
            font: {
                color: {
                    string: dT
                },
                size: {
                    number: cT
                },
                face: {
                    string: dT
                },
                background: {
                    string: dT
                },
                strokeWidth: {
                    number: cT
                },
                strokeColor: {
                    string: dT
                },
                align: {
                    string: [
                        "horizontal",
                        "top",
                        "middle",
                        "bottom"
                    ]
                },
                vadjust: {
                    number: cT
                },
                multi: {
                    boolean: lT,
                    string: dT
                },
                bold: {
                    color: {
                        string: dT
                    },
                    size: {
                        number: cT
                    },
                    face: {
                        string: dT
                    },
                    mod: {
                        string: dT
                    },
                    vadjust: {
                        number: cT
                    },
                    __type__: {
                        object: fT,
                        string: dT
                    }
                },
                boldital: {
                    color: {
                        string: dT
                    },
                    size: {
                        number: cT
                    },
                    face: {
                        string: dT
                    },
                    mod: {
                        string: dT
                    },
                    vadjust: {
                        number: cT
                    },
                    __type__: {
                        object: fT,
                        string: dT
                    }
                },
                ital: {
                    color: {
                        string: dT
                    },
                    size: {
                        number: cT
                    },
                    face: {
                        string: dT
                    },
                    mod: {
                        string: dT
                    },
                    vadjust: {
                        number: cT
                    },
                    __type__: {
                        object: fT,
                        string: dT
                    }
                },
                mono: {
                    color: {
                        string: dT
                    },
                    size: {
                        number: cT
                    },
                    face: {
                        string: dT
                    },
                    mod: {
                        string: dT
                    },
                    vadjust: {
                        number: cT
                    },
                    __type__: {
                        object: fT,
                        string: dT
                    }
                },
                __type__: {
                    object: fT,
                    string: dT
                }
            },
            hidden: {
                boolean: lT
            },
            hoverWidth: {
                function: "function",
                number: cT
            },
            label: {
                string: dT,
                undefined: "undefined"
            },
            labelHighlightBold: {
                boolean: lT
            },
            length: {
                number: cT,
                undefined: "undefined"
            },
            physics: {
                boolean: lT
            },
            scaling: {
                min: {
                    number: cT
                },
                max: {
                    number: cT
                },
                label: {
                    enabled: {
                        boolean: lT
                    },
                    min: {
                        number: cT
                    },
                    max: {
                        number: cT
                    },
                    maxVisible: {
                        number: cT
                    },
                    drawThreshold: {
                        number: cT
                    },
                    __type__: {
                        object: fT,
                        boolean: lT
                    }
                },
                customScalingFunction: {
                    function: "function"
                },
                __type__: {
                    object: fT
                }
            },
            selectionWidth: {
                function: "function",
                number: cT
            },
            selfReferenceSize: {
                number: cT
            },
            selfReference: {
                size: {
                    number: cT
                },
                angle: {
                    number: cT
                },
                renderBehindTheNode: {
                    boolean: lT
                },
                __type__: {
                    object: fT
                }
            },
            shadow: {
                enabled: {
                    boolean: lT
                },
                color: {
                    string: dT
                },
                size: {
                    number: cT
                },
                x: {
                    number: cT
                },
                y: {
                    number: cT
                },
                __type__: {
                    object: fT,
                    boolean: lT
                }
            },
            smooth: {
                enabled: {
                    boolean: lT
                },
                type: {
                    string: [
                        "dynamic",
                        "continuous",
                        "discrete",
                        "diagonalCross",
                        "straightCross",
                        "horizontal",
                        "vertical",
                        "curvedCW",
                        "curvedCCW",
                        "cubicBezier"
                    ]
                },
                roundness: {
                    number: cT
                },
                forceDirection: {
                    string: [
                        "horizontal",
                        "vertical",
                        "none"
                    ],
                    boolean: lT
                },
                __type__: {
                    object: fT,
                    boolean: lT
                }
            },
            title: {
                string: dT,
                undefined: "undefined"
            },
            width: {
                number: cT
            },
            widthConstraint: {
                maximum: {
                    number: cT
                },
                __type__: {
                    object: fT,
                    boolean: lT,
                    number: cT
                }
            },
            value: {
                number: cT,
                undefined: "undefined"
            },
            __type__: {
                object: fT
            }
        },
        groups: {
            useDefaultGroups: {
                boolean: lT
            },
            __any__: vT,
            __type__: {
                object: fT
            }
        },
        interaction: {
            dragNodes: {
                boolean: lT
            },
            dragView: {
                boolean: lT
            },
            hideEdgesOnDrag: {
                boolean: lT
            },
            hideEdgesOnZoom: {
                boolean: lT
            },
            hideNodesOnDrag: {
                boolean: lT
            },
            hover: {
                boolean: lT
            },
            keyboard: {
                enabled: {
                    boolean: lT
                },
                speed: {
                    x: {
                        number: cT
                    },
                    y: {
                        number: cT
                    },
                    zoom: {
                        number: cT
                    },
                    __type__: {
                        object: fT
                    }
                },
                bindToWindow: {
                    boolean: lT
                },
                autoFocus: {
                    boolean: lT
                },
                __type__: {
                    object: fT,
                    boolean: lT
                }
            },
            multiselect: {
                boolean: lT
            },
            navigationButtons: {
                boolean: lT
            },
            selectable: {
                boolean: lT
            },
            selectConnectedEdges: {
                boolean: lT
            },
            hoverConnectedEdges: {
                boolean: lT
            },
            tooltipDelay: {
                number: cT
            },
            zoomView: {
                boolean: lT
            },
            zoomSpeed: {
                number: cT
            },
            __type__: {
                object: fT
            }
        },
        layout: {
            randomSeed: {
                undefined: "undefined",
                number: cT,
                string: dT
            },
            improvedLayout: {
                boolean: lT
            },
            clusterThreshold: {
                number: cT
            },
            hierarchical: {
                enabled: {
                    boolean: lT
                },
                levelSeparation: {
                    number: cT
                },
                nodeSpacing: {
                    number: cT
                },
                treeSpacing: {
                    number: cT
                },
                blockShifting: {
                    boolean: lT
                },
                edgeMinimization: {
                    boolean: lT
                },
                parentCentralization: {
                    boolean: lT
                },
                direction: {
                    string: [
                        "UD",
                        "DU",
                        "LR",
                        "RL"
                    ]
                },
                sortMethod: {
                    string: [
                        "hubsize",
                        "directed"
                    ]
                },
                shakeTowards: {
                    string: [
                        "leaves",
                        "roots"
                    ]
                },
                __type__: {
                    object: fT,
                    boolean: lT
                }
            },
            __type__: {
                object: fT
            }
        },
        manipulation: {
            enabled: {
                boolean: lT
            },
            initiallyActive: {
                boolean: lT
            },
            addNode: {
                boolean: lT,
                function: "function"
            },
            addEdge: {
                boolean: lT,
                function: "function"
            },
            editNode: {
                function: "function"
            },
            editEdge: {
                editWithoutDrag: {
                    function: "function"
                },
                __type__: {
                    object: fT,
                    boolean: lT,
                    function: "function"
                }
            },
            deleteNode: {
                boolean: lT,
                function: "function"
            },
            deleteEdge: {
                boolean: lT,
                function: "function"
            },
            controlNodeStyle: vT,
            __type__: {
                object: fT,
                boolean: lT
            }
        },
        nodes: vT,
        physics: {
            enabled: {
                boolean: lT
            },
            barnesHut: {
                theta: {
                    number: cT
                },
                gravitationalConstant: {
                    number: cT
                },
                centralGravity: {
                    number: cT
                },
                springLength: {
                    number: cT
                },
                springConstant: {
                    number: cT
                },
                damping: {
                    number: cT
                },
                avoidOverlap: {
                    number: cT
                },
                __type__: {
                    object: fT
                }
            },
            forceAtlas2Based: {
                theta: {
                    number: cT
                },
                gravitationalConstant: {
                    number: cT
                },
                centralGravity: {
                    number: cT
                },
                springLength: {
                    number: cT
                },
                springConstant: {
                    number: cT
                },
                damping: {
                    number: cT
                },
                avoidOverlap: {
                    number: cT
                },
                __type__: {
                    object: fT
                }
            },
            repulsion: {
                centralGravity: {
                    number: cT
                },
                springLength: {
                    number: cT
                },
                springConstant: {
                    number: cT
                },
                nodeDistance: {
                    number: cT
                },
                damping: {
                    number: cT
                },
                __type__: {
                    object: fT
                }
            },
            hierarchicalRepulsion: {
                centralGravity: {
                    number: cT
                },
                springLength: {
                    number: cT
                },
                springConstant: {
                    number: cT
                },
                nodeDistance: {
                    number: cT
                },
                damping: {
                    number: cT
                },
                avoidOverlap: {
                    number: cT
                },
                __type__: {
                    object: fT
                }
            },
            maxVelocity: {
                number: cT
            },
            minVelocity: {
                number: cT
            },
            solver: {
                string: [
                    "barnesHut",
                    "repulsion",
                    "hierarchicalRepulsion",
                    "forceAtlas2Based"
                ]
            },
            stabilization: {
                enabled: {
                    boolean: lT
                },
                iterations: {
                    number: cT
                },
                updateInterval: {
                    number: cT
                },
                onlyDynamicEdges: {
                    boolean: lT
                },
                fit: {
                    boolean: lT
                },
                __type__: {
                    object: fT,
                    boolean: lT
                }
            },
            timestep: {
                number: cT
            },
            adaptiveTimestep: {
                boolean: lT
            },
            wind: {
                x: {
                    number: cT
                },
                y: {
                    number: cT
                },
                __type__: {
                    object: fT
                }
            },
            __type__: {
                object: fT,
                boolean: lT
            }
        },
        autoResize: {
            boolean: lT
        },
        clickToUse: {
            boolean: lT
        },
        locale: {
            string: dT
        },
        locales: {
            __any__: {
                any: "any"
            },
            __type__: {
                object: fT
            }
        },
        height: {
            string: dT
        },
        width: {
            string: dT
        },
        __type__: {
            object: fT
        }
    }, yT = {
        nodes: {
            borderWidth: [
                1,
                0,
                10,
                1
            ],
            borderWidthSelected: [
                2,
                0,
                10,
                1
            ],
            color: {
                border: [
                    "color",
                    "#2B7CE9"
                ],
                background: [
                    "color",
                    "#97C2FC"
                ],
                highlight: {
                    border: [
                        "color",
                        "#2B7CE9"
                    ],
                    background: [
                        "color",
                        "#D2E5FF"
                    ]
                },
                hover: {
                    border: [
                        "color",
                        "#2B7CE9"
                    ],
                    background: [
                        "color",
                        "#D2E5FF"
                    ]
                }
            },
            opacity: [
                0,
                0,
                1,
                .1
            ],
            fixed: {
                x: !1,
                y: !1
            },
            font: {
                color: [
                    "color",
                    "#343434"
                ],
                size: [
                    14,
                    0,
                    100,
                    1
                ],
                face: [
                    "arial",
                    "verdana",
                    "tahoma"
                ],
                background: [
                    "color",
                    "none"
                ],
                strokeWidth: [
                    0,
                    0,
                    50,
                    1
                ],
                strokeColor: [
                    "color",
                    "#ffffff"
                ]
            },
            hidden: !1,
            labelHighlightBold: !0,
            physics: !0,
            scaling: {
                min: [
                    10,
                    0,
                    200,
                    1
                ],
                max: [
                    30,
                    0,
                    200,
                    1
                ],
                label: {
                    enabled: !1,
                    min: [
                        14,
                        0,
                        200,
                        1
                    ],
                    max: [
                        30,
                        0,
                        200,
                        1
                    ],
                    maxVisible: [
                        30,
                        0,
                        200,
                        1
                    ],
                    drawThreshold: [
                        5,
                        0,
                        20,
                        1
                    ]
                }
            },
            shadow: {
                enabled: !1,
                color: "rgba(0,0,0,0.5)",
                size: [
                    10,
                    0,
                    20,
                    1
                ],
                x: [
                    5,
                    -30,
                    30,
                    1
                ],
                y: [
                    5,
                    -30,
                    30,
                    1
                ]
            },
            shape: [
                "ellipse",
                "box",
                "circle",
                "database",
                "diamond",
                "dot",
                "square",
                "star",
                "text",
                "triangle",
                "triangleDown",
                "hexagon"
            ],
            shapeProperties: {
                borderDashes: !1,
                borderRadius: [
                    6,
                    0,
                    20,
                    1
                ],
                interpolation: !0,
                useImageSize: !1
            },
            size: [
                25,
                0,
                200,
                1
            ]
        },
        edges: {
            arrows: {
                to: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        .05
                    ],
                    type: "arrow"
                },
                middle: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        .05
                    ],
                    type: "arrow"
                },
                from: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        .05
                    ],
                    type: "arrow"
                }
            },
            endPointOffset: {
                from: [
                    0,
                    -10,
                    10,
                    1
                ],
                to: [
                    0,
                    -10,
                    10,
                    1
                ]
            },
            arrowStrikethrough: !0,
            color: {
                color: [
                    "color",
                    "#848484"
                ],
                highlight: [
                    "color",
                    "#848484"
                ],
                hover: [
                    "color",
                    "#848484"
                ],
                inherit: [
                    "from",
                    "to",
                    "both",
                    !0,
                    !1
                ],
                opacity: [
                    1,
                    0,
                    1,
                    .05
                ]
            },
            dashes: !1,
            font: {
                color: [
                    "color",
                    "#343434"
                ],
                size: [
                    14,
                    0,
                    100,
                    1
                ],
                face: [
                    "arial",
                    "verdana",
                    "tahoma"
                ],
                background: [
                    "color",
                    "none"
                ],
                strokeWidth: [
                    2,
                    0,
                    50,
                    1
                ],
                strokeColor: [
                    "color",
                    "#ffffff"
                ],
                align: [
                    "horizontal",
                    "top",
                    "middle",
                    "bottom"
                ]
            },
            hidden: !1,
            hoverWidth: [
                1.5,
                0,
                5,
                .1
            ],
            labelHighlightBold: !0,
            physics: !0,
            scaling: {
                min: [
                    1,
                    0,
                    100,
                    1
                ],
                max: [
                    15,
                    0,
                    100,
                    1
                ],
                label: {
                    enabled: !0,
                    min: [
                        14,
                        0,
                        200,
                        1
                    ],
                    max: [
                        30,
                        0,
                        200,
                        1
                    ],
                    maxVisible: [
                        30,
                        0,
                        200,
                        1
                    ],
                    drawThreshold: [
                        5,
                        0,
                        20,
                        1
                    ]
                }
            },
            selectionWidth: [
                1.5,
                0,
                5,
                .1
            ],
            selfReferenceSize: [
                20,
                0,
                200,
                1
            ],
            selfReference: {
                size: [
                    20,
                    0,
                    200,
                    1
                ],
                angle: [
                    Math.PI / 2,
                    -6 * Math.PI,
                    6 * Math.PI,
                    Math.PI / 8
                ],
                renderBehindTheNode: !0
            },
            shadow: {
                enabled: !1,
                color: "rgba(0,0,0,0.5)",
                size: [
                    10,
                    0,
                    20,
                    1
                ],
                x: [
                    5,
                    -30,
                    30,
                    1
                ],
                y: [
                    5,
                    -30,
                    30,
                    1
                ]
            },
            smooth: {
                enabled: !0,
                type: [
                    "dynamic",
                    "continuous",
                    "discrete",
                    "diagonalCross",
                    "straightCross",
                    "horizontal",
                    "vertical",
                    "curvedCW",
                    "curvedCCW",
                    "cubicBezier"
                ],
                forceDirection: [
                    "horizontal",
                    "vertical",
                    "none"
                ],
                roundness: [
                    .5,
                    0,
                    1,
                    .05
                ]
            },
            width: [
                1,
                0,
                30,
                1
            ]
        },
        layout: {
            hierarchical: {
                enabled: !1,
                levelSeparation: [
                    150,
                    20,
                    500,
                    5
                ],
                nodeSpacing: [
                    100,
                    20,
                    500,
                    5
                ],
                treeSpacing: [
                    200,
                    20,
                    500,
                    5
                ],
                blockShifting: !0,
                edgeMinimization: !0,
                parentCentralization: !0,
                direction: [
                    "UD",
                    "DU",
                    "LR",
                    "RL"
                ],
                sortMethod: [
                    "hubsize",
                    "directed"
                ],
                shakeTowards: [
                    "leaves",
                    "roots"
                ]
            }
        },
        interaction: {
            dragNodes: !0,
            dragView: !0,
            hideEdgesOnDrag: !1,
            hideEdgesOnZoom: !1,
            hideNodesOnDrag: !1,
            hover: !1,
            keyboard: {
                enabled: !1,
                speed: {
                    x: [
                        10,
                        0,
                        40,
                        1
                    ],
                    y: [
                        10,
                        0,
                        40,
                        1
                    ],
                    zoom: [
                        .02,
                        0,
                        .1,
                        .005
                    ]
                },
                bindToWindow: !0,
                autoFocus: !0
            },
            multiselect: !1,
            navigationButtons: !1,
            selectable: !0,
            selectConnectedEdges: !0,
            hoverConnectedEdges: !0,
            tooltipDelay: [
                300,
                0,
                1e3,
                25
            ],
            zoomView: !0,
            zoomSpeed: [
                1,
                .1,
                2,
                .1
            ]
        },
        manipulation: {
            enabled: !1,
            initiallyActive: !1
        },
        physics: {
            enabled: !0,
            barnesHut: {
                theta: [
                    .5,
                    .1,
                    1,
                    .05
                ],
                gravitationalConstant: [
                    -2000,
                    -30000,
                    0,
                    50
                ],
                centralGravity: [
                    .3,
                    0,
                    10,
                    .05
                ],
                springLength: [
                    95,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    .04,
                    0,
                    1.2,
                    .005
                ],
                damping: [
                    .09,
                    0,
                    1,
                    .01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    .01
                ]
            },
            forceAtlas2Based: {
                theta: [
                    .5,
                    .1,
                    1,
                    .05
                ],
                gravitationalConstant: [
                    -50,
                    -500,
                    0,
                    1
                ],
                centralGravity: [
                    .01,
                    0,
                    1,
                    .005
                ],
                springLength: [
                    95,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    .08,
                    0,
                    1.2,
                    .005
                ],
                damping: [
                    .4,
                    0,
                    1,
                    .01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    .01
                ]
            },
            repulsion: {
                centralGravity: [
                    .2,
                    0,
                    10,
                    .05
                ],
                springLength: [
                    200,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    .05,
                    0,
                    1.2,
                    .005
                ],
                nodeDistance: [
                    100,
                    0,
                    500,
                    5
                ],
                damping: [
                    .09,
                    0,
                    1,
                    .01
                ]
            },
            hierarchicalRepulsion: {
                centralGravity: [
                    .2,
                    0,
                    10,
                    .05
                ],
                springLength: [
                    100,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    .01,
                    0,
                    1.2,
                    .005
                ],
                nodeDistance: [
                    120,
                    0,
                    500,
                    5
                ],
                damping: [
                    .09,
                    0,
                    1,
                    .01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    .01
                ]
            },
            maxVelocity: [
                50,
                0,
                150,
                1
            ],
            minVelocity: [
                .1,
                .01,
                .5,
                .01
            ],
            solver: [
                "barnesHut",
                "forceAtlas2Based",
                "repulsion",
                "hierarchicalRepulsion"
            ],
            timestep: [
                .5,
                .01,
                1,
                .01
            ],
            wind: {
                x: [
                    0,
                    -10,
                    10,
                    .1
                ],
                y: [
                    0,
                    -10,
                    10,
                    .1
                ]
            }
        }
    }, mT = function(t, e, i) {
        var o;
        return !(!Qp(t).call(t, "physics") || !Qp(o = yT.physics.solver).call(o, e) || i.physics.solver === e || "wind" === e);
    }, bT = Object.freeze({
        __proto__: null,
        allOptions: gT,
        configuratorHideOption: mT,
        configureOptions: yT
    }), wT = function() {
        function t() {
            vh(this, t);
        }
        return wu(t, [
            {
                key: "getDistances",
                value: function(t, e, i) {
                    for(var o = {}, n = t.edges, r = 0; r < e.length; r++){
                        var s = {};
                        o[e[r]] = s;
                        for(var a = 0; a < e.length; a++)s[e[a]] = r == a ? 0 : 1e9;
                    }
                    for(var h = 0; h < i.length; h++){
                        var d = n[i[h]];
                        !0 === d.connected && void 0 !== o[d.fromId] && void 0 !== o[d.toId] && (o[d.fromId][d.toId] = 1, o[d.toId][d.fromId] = 1);
                    }
                    for(var l = e.length, c = 0; c < l; c++)for(var u = e[c], f = o[u], p = 0; p < l - 1; p++)for(var v = e[p], g = o[v], y = p + 1; y < l; y++){
                        var m = e[y], b = o[m], w = Math.min(g[m], g[u] + f[m]);
                        g[m] = w, b[v] = w;
                    }
                    return o;
                }
            }
        ]), t;
    }(), kT = function() {
        function t(e, i, o) {
            vh(this, t), this.body = e, this.springLength = i, this.springConstant = o, this.distanceSolver = new wT;
        }
        return wu(t, [
            {
                key: "setOptions",
                value: function(t) {
                    t && (t.springLength && (this.springLength = t.springLength), t.springConstant && (this.springConstant = t.springConstant));
                }
            },
            {
                key: "solve",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = this.distanceSolver.getDistances(this.body, t, e);
                    this._createL_matrix(o), this._createK_matrix(o), this._createE_matrix();
                    for(var n = 0, r = Math.max(1e3, Math.min(10 * this.body.nodeIndices.length, 6e3)), s = 1e9, a = 0, h = 0, d = 0, l = 0, c = 0; s > .01 && n < r;){
                        n += 1;
                        var u = df(this._getHighestEnergyNode(i), 4);
                        for(a = u[0], s = u[1], h = u[2], d = u[3], l = s, c = 0; l > 1 && c < 5;){
                            c += 1, this._moveNode(a, h, d);
                            var f = df(this._getEnergy(a), 3);
                            l = f[0], h = f[1], d = f[2];
                        }
                    }
                }
            },
            {
                key: "_getHighestEnergyNode",
                value: function(t) {
                    for(var e = this.body.nodeIndices, i = this.body.nodes, o = 0, n = e[0], r = 0, s = 0, a = 0; a < e.length; a++){
                        var h = e[a];
                        if (!0 !== i[h].predefinedPosition || !0 === i[h].isCluster && !0 === t || !0 !== i[h].options.fixed.x || !0 !== i[h].options.fixed.y) {
                            var d = df(this._getEnergy(h), 3), l = d[0], c = d[1], u = d[2];
                            o < l && (o = l, n = h, r = c, s = u);
                        }
                    }
                    return [
                        n,
                        o,
                        r,
                        s
                    ];
                }
            },
            {
                key: "_getEnergy",
                value: function(t) {
                    var e = df(this.E_sums[t], 2), i = e[0], o = e[1];
                    return [
                        Math.sqrt(Math.pow(i, 2) + Math.pow(o, 2)),
                        i,
                        o
                    ];
                }
            },
            {
                key: "_moveNode",
                value: function(t, e, i) {
                    for(var o = this.body.nodeIndices, n = this.body.nodes, r = 0, s = 0, a = 0, h = n[t].x, d = n[t].y, l = this.K_matrix[t], c = this.L_matrix[t], u = 0; u < o.length; u++){
                        var f = o[u];
                        if (f !== t) {
                            var p = n[f].x, v = n[f].y, g = l[f], y = c[f], m = 1 / Math.pow(Math.pow(h - p, 2) + Math.pow(d - v, 2), 1.5);
                            r += g * (1 - y * Math.pow(d - v, 2) * m), s += g * (y * (h - p) * (d - v) * m), a += g * (1 - y * Math.pow(h - p, 2) * m);
                        }
                    }
                    var b = (e / r + i / s) / (s / r - a / s), w = -(s * b + e) / r;
                    n[t].x += w, n[t].y += b, this._updateE_matrix(t);
                }
            },
            {
                key: "_createL_matrix",
                value: function(t) {
                    var e = this.body.nodeIndices, i = this.springLength;
                    this.L_matrix = [];
                    for(var o = 0; o < e.length; o++){
                        this.L_matrix[e[o]] = {};
                        for(var n = 0; n < e.length; n++)this.L_matrix[e[o]][e[n]] = i * t[e[o]][e[n]];
                    }
                }
            },
            {
                key: "_createK_matrix",
                value: function(t) {
                    var e = this.body.nodeIndices, i = this.springConstant;
                    this.K_matrix = [];
                    for(var o = 0; o < e.length; o++){
                        this.K_matrix[e[o]] = {};
                        for(var n = 0; n < e.length; n++)this.K_matrix[e[o]][e[n]] = i * Math.pow(t[e[o]][e[n]], -2);
                    }
                }
            },
            {
                key: "_createE_matrix",
                value: function() {
                    var t = this.body.nodeIndices, e = this.body.nodes;
                    this.E_matrix = {}, this.E_sums = {};
                    for(var i = 0; i < t.length; i++)this.E_matrix[t[i]] = [];
                    for(var o = 0; o < t.length; o++){
                        for(var n = t[o], r = e[n].x, s = e[n].y, a = 0, h = 0, d = o; d < t.length; d++){
                            var l = t[d];
                            if (l !== n) {
                                var c = e[l].x, u = e[l].y, f = 1 / Math.sqrt(Math.pow(r - c, 2) + Math.pow(s - u, 2));
                                this.E_matrix[n][d] = [
                                    this.K_matrix[n][l] * (r - c - this.L_matrix[n][l] * (r - c) * f),
                                    this.K_matrix[n][l] * (s - u - this.L_matrix[n][l] * (s - u) * f)
                                ], this.E_matrix[l][o] = this.E_matrix[n][d], a += this.E_matrix[n][d][0], h += this.E_matrix[n][d][1];
                            }
                        }
                        this.E_sums[n] = [
                            a,
                            h
                        ];
                    }
                }
            },
            {
                key: "_updateE_matrix",
                value: function(t) {
                    for(var e = this.body.nodeIndices, i = this.body.nodes, o = this.E_matrix[t], n = this.K_matrix[t], r = this.L_matrix[t], s = i[t].x, a = i[t].y, h = 0, d = 0, l = 0; l < e.length; l++){
                        var c = e[l];
                        if (c !== t) {
                            var u = o[l], f = u[0], p = u[1], v = i[c].x, g = i[c].y, y = 1 / Math.sqrt(Math.pow(s - v, 2) + Math.pow(a - g, 2)), m = n[c] * (s - v - r[c] * (s - v) * y), b = n[c] * (a - g - r[c] * (a - g) * y);
                            o[l] = [
                                m,
                                b
                            ], h += m, d += b;
                            var w = this.E_sums[c];
                            w[0] += m - f, w[1] += b - p;
                        }
                    }
                    this.E_sums[t] = [
                        h,
                        d
                    ];
                }
            }
        ]), t;
    }();
    function _T(t, e, i) {
        var o, n, r, s, a = this;
        if (!(this instanceof _T)) throw new SyntaxError("Constructor must be called with the new operator");
        this.options = {}, this.defaultOptions = {
            locale: "en",
            locales: Kb,
            clickToUse: !1
        }, wo(this.options, this.defaultOptions), this.body = {
            container: t,
            nodes: {},
            nodeIndices: [],
            edges: {},
            edgeIndices: [],
            emitter: {
                on: Wo(o = this.on).call(o, this),
                off: Wo(n = this.off).call(n, this),
                emit: Wo(r = this.emit).call(r, this),
                once: Wo(s = this.once).call(s, this)
            },
            eventListeners: {
                onTap: function() {},
                onTouch: function() {},
                onDoubleTap: function() {},
                onHold: function() {},
                onDragStart: function() {},
                onDrag: function() {},
                onDragEnd: function() {},
                onMouseWheel: function() {},
                onPinch: function() {},
                onMouseMove: function() {},
                onRelease: function() {},
                onContext: function() {}
            },
            data: {
                nodes: null,
                edges: null
            },
            functions: {
                createNode: function() {},
                createEdge: function() {},
                getPointer: function() {}
            },
            modules: {},
            view: {
                scale: 1,
                translation: {
                    x: 0,
                    y: 0
                }
            },
            selectionBox: {
                show: !1,
                position: {
                    start: {
                        x: 0,
                        y: 0
                    },
                    end: {
                        x: 0,
                        y: 0
                    }
                }
            }
        }, this.bindEventListeners(), this.images = new $b(function() {
            return a.body.emitter.emit("_requestRedraw");
        }), this.groups = new Ek, this.canvas = new CO(this.body), this.selectionHandler = new VC(this.body, this.canvas), this.interactionHandler = new IO(this.body, this.canvas, this.selectionHandler), this.view = new SO(this.body, this.canvas), this.renderer = new _O(this.body, this.canvas), this.physics = new cO(this.body), this.layoutEngine = new rT(this.body), this.clustering = new kO(this.body), this.manipulation = new hT(this.body, this.canvas, this.selectionHandler, this.interactionHandler), this.nodesHandler = new rE(this.body, this.images, this.groups, this.layoutEngine), this.edgesHandler = new tO(this.body, this.images, this.groups), this.body.modules.kamadaKawai = new kT(this.body, 150, .05), this.body.modules.clustering = this.clustering, this.canvas._create(), this.setOptions(i), this.setData(e);
    }
    $o(_T.prototype), _T.prototype.setOptions = function(t) {
        var e = this;
        if (null === t && (t = void 0), void 0 !== t) {
            !0 === vb.validate(t, gT) && console.error("%cErrors have been found in the supplied options object.", pb);
            if (Nm([
                "locale",
                "locales",
                "clickToUse"
            ], this.options, t), void 0 !== t.locale && (t.locale = function(t, e) {
                try {
                    var i = df(e.split(/[-_ /]/, 2), 2), o = i[0], n = i[1], r = null != o ? o.toLowerCase() : null, s = null != n ? n.toUpperCase() : null;
                    if (r && s) {
                        var a, h = r + "-" + s;
                        if (Object.prototype.hasOwnProperty.call(t, h)) return h;
                        console.warn(yf(a = "Unknown variant ".concat(s, " of language ")).call(a, r, "."));
                    }
                    if (r) {
                        var d = r;
                        if (Object.prototype.hasOwnProperty.call(t, d)) return d;
                        console.warn("Unknown language ".concat(r));
                    }
                    return console.warn("Unknown locale ".concat(e, ", falling back to English.")), "en";
                } catch (t) {
                    return console.error(t), console.warn("Unexpected error while normalizing locale ".concat(e, ", falling back to English.")), "en";
                }
            }(t.locales || this.options.locales, t.locale)), t = this.layoutEngine.setOptions(t.layout, t), this.canvas.setOptions(t), this.groups.setOptions(t.groups), this.nodesHandler.setOptions(t.nodes), this.edgesHandler.setOptions(t.edges), this.physics.setOptions(t.physics), this.manipulation.setOptions(t.manipulation, t, this.options), this.interactionHandler.setOptions(t.interaction), this.renderer.setOptions(t.interaction), this.selectionHandler.setOptions(t.interaction), void 0 !== t.groups && this.body.emitter.emit("refreshNodes"), "configure" in t && (this.configurator || (this.configurator = new cb(this, this.body.container, yT, this.canvas.pixelRatio, mT)), this.configurator.setOptions(t.configure)), this.configurator && !0 === this.configurator.options.enabled) {
                var i = {
                    nodes: {},
                    edges: {},
                    layout: {},
                    interaction: {},
                    manipulation: {},
                    physics: {},
                    global: {}
                };
                Rm(i.nodes, this.nodesHandler.options), Rm(i.edges, this.edgesHandler.options), Rm(i.layout, this.layoutEngine.options), Rm(i.interaction, this.selectionHandler.options), Rm(i.interaction, this.renderer.options), Rm(i.interaction, this.interactionHandler.options), Rm(i.manipulation, this.manipulation.options), Rm(i.physics, this.physics.options), Rm(i.global, this.canvas.options), Rm(i.global, this.options), this.configurator.setModuleOptions(i);
            }
            void 0 !== t.clickToUse ? !0 === t.clickToUse ? void 0 === this.activator && (this.activator = new lb(this.canvas.frame), this.activator.on("change", function() {
                e.body.emitter.emit("activate");
            })) : (void 0 !== this.activator && (this.activator.destroy(), delete this.activator), this.body.emitter.emit("activate")) : this.body.emitter.emit("activate"), this.canvas.setSize(), this.body.emitter.emit("startSimulation");
        }
    }, _T.prototype._updateVisibleIndices = function() {
        var t = this.body.nodes, e = this.body.edges;
        for(var i in this.body.nodeIndices = [], this.body.edgeIndices = [], t)Object.prototype.hasOwnProperty.call(t, i) && (this.clustering._isClusteredNode(i) || !1 !== t[i].options.hidden || this.body.nodeIndices.push(t[i].id));
        for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
            var n = e[o], r = t[n.fromId], s = t[n.toId], a = void 0 !== r && void 0 !== s;
            !this.clustering._isClusteredEdge(o) && !1 === n.options.hidden && a && !1 === r.options.hidden && !1 === s.options.hidden && this.body.edgeIndices.push(n.id);
        }
    }, _T.prototype.bindEventListeners = function() {
        var t = this;
        this.body.emitter.on("_dataChanged", function() {
            t.edgesHandler._updateState(), t.body.emitter.emit("_dataUpdated");
        }), this.body.emitter.on("_dataUpdated", function() {
            t.clustering._updateState(), t._updateVisibleIndices(), t._updateValueRange(t.body.nodes), t._updateValueRange(t.body.edges), t.body.emitter.emit("startSimulation"), t.body.emitter.emit("_requestRedraw");
        });
    }, _T.prototype.setData = function(t) {
        if (this.body.emitter.emit("resetPhysics"), this.body.emitter.emit("_resetData"), this.selectionHandler.unselectAll(), t && t.dot && (t.nodes || t.edges)) throw new SyntaxError('Data must contain either parameter "dot" or  parameter pair "nodes" and "edges", but not both.');
        if (this.setOptions(t && t.options), t && t.dot) {
            console.warn("The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);");
            var e = qb(t.dot);
            this.setData(e);
        } else if (t && t.gephi) {
            console.warn("The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);");
            var i = Yb(t.gephi);
            this.setData(i);
        } else this.nodesHandler.setData(t && t.nodes, !0), this.edgesHandler.setData(t && t.edges, !0), this.body.emitter.emit("_dataChanged"), this.body.emitter.emit("_dataLoaded"), this.body.emitter.emit("initPhysics");
    }, _T.prototype.destroy = function() {
        for(var t in this.body.emitter.emit("destroy"), this.body.emitter.off(), this.off(), delete this.groups, delete this.canvas, delete this.selectionHandler, delete this.interactionHandler, delete this.view, delete this.renderer, delete this.physics, delete this.layoutEngine, delete this.clustering, delete this.manipulation, delete this.nodesHandler, delete this.edgesHandler, delete this.configurator, delete this.images, this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, t) && delete this.body.nodes[t];
        for(var e in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, e) && delete this.body.edges[e];
        Dm(this.body.container);
    }, _T.prototype._updateValueRange = function(t) {
        var e, i = void 0, o = void 0, n = 0;
        for(e in t)if (Object.prototype.hasOwnProperty.call(t, e)) {
            var r = t[e].getValue();
            void 0 !== r && (i = void 0 === i ? r : Math.min(r, i), o = void 0 === o ? r : Math.max(r, o), n += r);
        }
        if (void 0 !== i && void 0 !== o) for(e in t)Object.prototype.hasOwnProperty.call(t, e) && t[e].setValueRange(i, o, n);
    }, _T.prototype.isActive = function() {
        return !this.activator || this.activator.active;
    }, _T.prototype.setSize = function() {
        return this.canvas.setSize.apply(this.canvas, arguments);
    }, _T.prototype.canvasToDOM = function() {
        return this.canvas.canvasToDOM.apply(this.canvas, arguments);
    }, _T.prototype.DOMtoCanvas = function() {
        return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
    }, _T.prototype.findNode = function() {
        return this.clustering.findNode.apply(this.clustering, arguments);
    }, _T.prototype.isCluster = function() {
        return this.clustering.isCluster.apply(this.clustering, arguments);
    }, _T.prototype.openCluster = function() {
        return this.clustering.openCluster.apply(this.clustering, arguments);
    }, _T.prototype.cluster = function() {
        return this.clustering.cluster.apply(this.clustering, arguments);
    }, _T.prototype.getNodesInCluster = function() {
        return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
    }, _T.prototype.clusterByConnection = function() {
        return this.clustering.clusterByConnection.apply(this.clustering, arguments);
    }, _T.prototype.clusterByHubsize = function() {
        return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
    }, _T.prototype.updateClusteredNode = function() {
        return this.clustering.updateClusteredNode.apply(this.clustering, arguments);
    }, _T.prototype.getClusteredEdges = function() {
        return this.clustering.getClusteredEdges.apply(this.clustering, arguments);
    }, _T.prototype.getBaseEdge = function() {
        return this.clustering.getBaseEdge.apply(this.clustering, arguments);
    }, _T.prototype.getBaseEdges = function() {
        return this.clustering.getBaseEdges.apply(this.clustering, arguments);
    }, _T.prototype.updateEdge = function() {
        return this.clustering.updateEdge.apply(this.clustering, arguments);
    }, _T.prototype.clusterOutliers = function() {
        return this.clustering.clusterOutliers.apply(this.clustering, arguments);
    }, _T.prototype.getSeed = function() {
        return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
    }, _T.prototype.enableEditMode = function() {
        return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
    }, _T.prototype.disableEditMode = function() {
        return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
    }, _T.prototype.addNodeMode = function() {
        return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
    }, _T.prototype.editNode = function() {
        return this.manipulation.editNode.apply(this.manipulation, arguments);
    }, _T.prototype.editNodeMode = function() {
        return console.warn("Deprecated: Please use editNode instead of editNodeMode."), this.manipulation.editNode.apply(this.manipulation, arguments);
    }, _T.prototype.addEdgeMode = function() {
        return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
    }, _T.prototype.editEdgeMode = function() {
        return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
    }, _T.prototype.deleteSelected = function() {
        return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
    }, _T.prototype.getPositions = function() {
        return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
    }, _T.prototype.getPosition = function() {
        return this.nodesHandler.getPosition.apply(this.nodesHandler, arguments);
    }, _T.prototype.storePositions = function() {
        return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
    }, _T.prototype.moveNode = function() {
        return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
    }, _T.prototype.getBoundingBox = function() {
        return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
    }, _T.prototype.getConnectedNodes = function(t) {
        return void 0 !== this.body.nodes[t] ? this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments) : this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
    }, _T.prototype.getConnectedEdges = function() {
        return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
    }, _T.prototype.startSimulation = function() {
        return this.physics.startSimulation.apply(this.physics, arguments);
    }, _T.prototype.stopSimulation = function() {
        return this.physics.stopSimulation.apply(this.physics, arguments);
    }, _T.prototype.stabilize = function() {
        return this.physics.stabilize.apply(this.physics, arguments);
    }, _T.prototype.getSelection = function() {
        return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
    }, _T.prototype.setSelection = function() {
        return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
    }, _T.prototype.getSelectedNodes = function() {
        return this.selectionHandler.getSelectedNodeIds.apply(this.selectionHandler, arguments);
    }, _T.prototype.getSelectedEdges = function() {
        return this.selectionHandler.getSelectedEdgeIds.apply(this.selectionHandler, arguments);
    }, _T.prototype.getNodeAt = function() {
        var t = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
        return void 0 !== t && void 0 !== t.id ? t.id : t;
    }, _T.prototype.getEdgeAt = function() {
        var t = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
        return void 0 !== t && void 0 !== t.id ? t.id : t;
    }, _T.prototype.selectNodes = function() {
        return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
    }, _T.prototype.selectEdges = function() {
        return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
    }, _T.prototype.unselectAll = function() {
        this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments), this.selectionHandler.commitWithoutEmitting.apply(this.selectionHandler), this.redraw();
    }, _T.prototype.redraw = function() {
        return this.renderer.redraw.apply(this.renderer, arguments);
    }, _T.prototype.getScale = function() {
        return this.view.getScale.apply(this.view, arguments);
    }, _T.prototype.getViewPosition = function() {
        return this.view.getViewPosition.apply(this.view, arguments);
    }, _T.prototype.fit = function() {
        return this.view.fit.apply(this.view, arguments);
    }, _T.prototype.moveTo = function() {
        return this.view.moveTo.apply(this.view, arguments);
    }, _T.prototype.focus = function() {
        return this.view.focus.apply(this.view, arguments);
    }, _T.prototype.releaseNode = function() {
        return this.view.releaseNode.apply(this.view, arguments);
    }, _T.prototype.getOptionsFromConfigurator = function() {
        var t = {};
        return this.configurator && (t = this.configurator.getOptions.apply(this.configurator)), t;
    };
    var xT = qb;
    t.Network = _T, t.NetworkImages = $b, t.networkDOTParser = Ub, t.networkGephiParser = Xb, t.networkOptions = bT, t.parseDOTNetwork = xT, t.parseGephiNetwork = Yb;
});

},{"9d5251a2a98f3fb1":"4KUfH"}],"4KUfH":[function(require,module,exports) {
var global = arguments[3];
/**
 * vis-data
 * http://visjs.org/
 *
 * Manage unstructured data using DataSet. Add, update, and remove data, and listen for changes in the data.
 *
 * @version 7.1.9
 * @date    2023-11-24T17:53:34.179Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */ (function(global, factory) {
    factory(exports);
})(this, function(exports1) {
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
    }
    var defineProperty$f = {
        exports: {}
    };
    var check = function(it) {
        return it && it.Math === Math && it;
    };
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global$p = // eslint-disable-next-line es/no-global-this -- safe
    check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
    check(typeof self == "object" && self) || check(typeof commonjsGlobal == "object" && commonjsGlobal) || // eslint-disable-next-line no-new-func -- fallback
    function() {
        return this;
    }() || commonjsGlobal || Function("return this")();
    var fails$u = function(exec) {
        try {
            return !!exec();
        } catch (error) {
            return true;
        }
    };
    var fails$t = fails$u;
    var functionBindNative = !fails$t(function() {
        // eslint-disable-next-line es/no-function-prototype-bind -- safe
        var test = (function() {}).bind();
        // eslint-disable-next-line no-prototype-builtins -- safe
        return typeof test != "function" || test.hasOwnProperty("prototype");
    });
    var NATIVE_BIND$4 = functionBindNative;
    var FunctionPrototype$4 = Function.prototype;
    var apply$6 = FunctionPrototype$4.apply;
    var call$k = FunctionPrototype$4.call;
    // eslint-disable-next-line es/no-reflect -- safe
    var functionApply = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND$4 ? call$k.bind(apply$6) : function() {
        return call$k.apply(apply$6, arguments);
    });
    var NATIVE_BIND$3 = functionBindNative;
    var FunctionPrototype$3 = Function.prototype;
    var call$j = FunctionPrototype$3.call;
    var uncurryThisWithBind = NATIVE_BIND$3 && FunctionPrototype$3.bind.bind(call$j, call$j);
    var functionUncurryThis = NATIVE_BIND$3 ? uncurryThisWithBind : function(fn) {
        return function() {
            return call$j.apply(fn, arguments);
        };
    };
    var uncurryThis$q = functionUncurryThis;
    var toString$9 = uncurryThis$q({}.toString);
    var stringSlice$1 = uncurryThis$q("".slice);
    var classofRaw$2 = function(it) {
        return stringSlice$1(toString$9(it), 8, -1);
    };
    var classofRaw$1 = classofRaw$2;
    var uncurryThis$p = functionUncurryThis;
    var functionUncurryThisClause = function(fn) {
        // Nashorn bug:
        //   https://github.com/zloirock/core-js/issues/1128
        //   https://github.com/zloirock/core-js/issues/1130
        if (classofRaw$1(fn) === "Function") return uncurryThis$p(fn);
    };
    var documentAll$2 = typeof document == "object" && document.all;
    // https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
    // eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
    var IS_HTMLDDA = typeof documentAll$2 == "undefined" && documentAll$2 !== undefined;
    var documentAll_1 = {
        all: documentAll$2,
        IS_HTMLDDA: IS_HTMLDDA
    };
    var $documentAll$1 = documentAll_1;
    var documentAll$1 = $documentAll$1.all;
    // `IsCallable` abstract operation
    // https://tc39.es/ecma262/#sec-iscallable
    var isCallable$m = $documentAll$1.IS_HTMLDDA ? function(argument) {
        return typeof argument == "function" || argument === documentAll$1;
    } : function(argument) {
        return typeof argument == "function";
    };
    var objectGetOwnPropertyDescriptor = {};
    var fails$s = fails$u;
    // Detect IE8's incomplete defineProperty implementation
    var descriptors = !fails$s(function() {
        // eslint-disable-next-line es/no-object-defineproperty -- required for testing
        return Object.defineProperty({}, 1, {
            get: function() {
                return 7;
            }
        })[1] !== 7;
    });
    var NATIVE_BIND$2 = functionBindNative;
    var call$i = Function.prototype.call;
    var functionCall = NATIVE_BIND$2 ? call$i.bind(call$i) : function() {
        return call$i.apply(call$i, arguments);
    };
    var objectPropertyIsEnumerable = {};
    var $propertyIsEnumerable$1 = {}.propertyIsEnumerable;
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var getOwnPropertyDescriptor$7 = Object.getOwnPropertyDescriptor;
    // Nashorn ~ JDK8 bug
    var NASHORN_BUG = getOwnPropertyDescriptor$7 && !$propertyIsEnumerable$1.call({
        1: 2
    }, 1);
    // `Object.prototype.propertyIsEnumerable` method implementation
    // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
    objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor$7(this, V);
        return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable$1;
    var createPropertyDescriptor$7 = function(bitmap, value) {
        return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
        };
    };
    var uncurryThis$o = functionUncurryThis;
    var fails$r = fails$u;
    var classof$f = classofRaw$2;
    var $Object$4 = Object;
    var split = uncurryThis$o("".split);
    // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var indexedObject = fails$r(function() {
        // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
        // eslint-disable-next-line no-prototype-builtins -- safe
        return !$Object$4("z").propertyIsEnumerable(0);
    }) ? function(it) {
        return classof$f(it) === "String" ? split(it, "") : $Object$4(it);
    } : $Object$4;
    // we can't use just `it == null` since of `document.all` special case
    // https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
    var isNullOrUndefined$6 = function(it) {
        return it === null || it === undefined;
    };
    var isNullOrUndefined$5 = isNullOrUndefined$6;
    var $TypeError$g = TypeError;
    // `RequireObjectCoercible` abstract operation
    // https://tc39.es/ecma262/#sec-requireobjectcoercible
    var requireObjectCoercible$3 = function(it) {
        if (isNullOrUndefined$5(it)) throw new $TypeError$g("Can't call method on " + it);
        return it;
    };
    // toObject with fallback for non-array-like ES3 strings
    var IndexedObject$3 = indexedObject;
    var requireObjectCoercible$2 = requireObjectCoercible$3;
    var toIndexedObject$a = function(it) {
        return IndexedObject$3(requireObjectCoercible$2(it));
    };
    var isCallable$l = isCallable$m;
    var $documentAll = documentAll_1;
    var documentAll = $documentAll.all;
    var isObject$h = $documentAll.IS_HTMLDDA ? function(it) {
        return typeof it == "object" ? it !== null : isCallable$l(it) || it === documentAll;
    } : function(it) {
        return typeof it == "object" ? it !== null : isCallable$l(it);
    };
    var path$o = {};
    var path$n = path$o;
    var global$o = global$p;
    var isCallable$k = isCallable$m;
    var aFunction = function(variable) {
        return isCallable$k(variable) ? variable : undefined;
    };
    var getBuiltIn$f = function(namespace, method) {
        return arguments.length < 2 ? aFunction(path$n[namespace]) || aFunction(global$o[namespace]) : path$n[namespace] && path$n[namespace][method] || global$o[namespace] && global$o[namespace][method];
    };
    var uncurryThis$n = functionUncurryThis;
    var objectIsPrototypeOf = uncurryThis$n({}.isPrototypeOf);
    var engineUserAgent = typeof navigator != "undefined" && String(navigator.userAgent) || "";
    var global$n = global$p;
    var userAgent$5 = engineUserAgent;
    var process$3 = global$n.process;
    var Deno$1 = global$n.Deno;
    var versions = process$3 && process$3.versions || Deno$1 && Deno$1.version;
    var v8 = versions && versions.v8;
    var match, version;
    if (v8) {
        match = v8.split(".");
        // in old Chrome, versions of V8 isn't V8 = Chrome / 10
        // but their correct versions are not interesting for us
        version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
    }
    // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
    // so check `userAgent` even if `.v8` exists, but 0
    if (!version && userAgent$5) {
        match = userAgent$5.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
            match = userAgent$5.match(/Chrome\/(\d+)/);
            if (match) version = +match[1];
        }
    }
    var engineV8Version = version;
    /* eslint-disable es/no-symbol -- required for testing */ var V8_VERSION$3 = engineV8Version;
    var fails$q = fails$u;
    var global$m = global$p;
    var $String$5 = global$m.String;
    // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
    var symbolConstructorDetection = !!Object.getOwnPropertySymbols && !fails$q(function() {
        var symbol = Symbol("symbol detection");
        // Chrome 38 Symbol has incorrect toString conversion
        // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
        // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,
        // of course, fail.
        return !$String$5(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
        !Symbol.sham && V8_VERSION$3 && V8_VERSION$3 < 41;
    });
    /* eslint-disable es/no-symbol -- required for testing */ var NATIVE_SYMBOL$5 = symbolConstructorDetection;
    var useSymbolAsUid = NATIVE_SYMBOL$5 && !Symbol.sham && typeof Symbol.iterator == "symbol";
    var getBuiltIn$e = getBuiltIn$f;
    var isCallable$j = isCallable$m;
    var isPrototypeOf$k = objectIsPrototypeOf;
    var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
    var $Object$3 = Object;
    var isSymbol$5 = USE_SYMBOL_AS_UID$1 ? function(it) {
        return typeof it == "symbol";
    } : function(it) {
        var $Symbol = getBuiltIn$e("Symbol");
        return isCallable$j($Symbol) && isPrototypeOf$k($Symbol.prototype, $Object$3(it));
    };
    var $String$4 = String;
    var tryToString$6 = function(argument) {
        try {
            return $String$4(argument);
        } catch (error) {
            return "Object";
        }
    };
    var isCallable$i = isCallable$m;
    var tryToString$5 = tryToString$6;
    var $TypeError$f = TypeError;
    // `Assert: IsCallable(argument) is true`
    var aCallable$e = function(argument) {
        if (isCallable$i(argument)) return argument;
        throw new $TypeError$f(tryToString$5(argument) + " is not a function");
    };
    var aCallable$d = aCallable$e;
    var isNullOrUndefined$4 = isNullOrUndefined$6;
    // `GetMethod` abstract operation
    // https://tc39.es/ecma262/#sec-getmethod
    var getMethod$3 = function(V, P) {
        var func = V[P];
        return isNullOrUndefined$4(func) ? undefined : aCallable$d(func);
    };
    var call$h = functionCall;
    var isCallable$h = isCallable$m;
    var isObject$g = isObject$h;
    var $TypeError$e = TypeError;
    // `OrdinaryToPrimitive` abstract operation
    // https://tc39.es/ecma262/#sec-ordinarytoprimitive
    var ordinaryToPrimitive$1 = function(input, pref) {
        var fn, val;
        if (pref === "string" && isCallable$h(fn = input.toString) && !isObject$g(val = call$h(fn, input))) return val;
        if (isCallable$h(fn = input.valueOf) && !isObject$g(val = call$h(fn, input))) return val;
        if (pref !== "string" && isCallable$h(fn = input.toString) && !isObject$g(val = call$h(fn, input))) return val;
        throw new $TypeError$e("Can't convert object to primitive value");
    };
    var shared$7 = {
        exports: {}
    };
    var isPure = true;
    var global$l = global$p;
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    var defineProperty$e = Object.defineProperty;
    var defineGlobalProperty$1 = function(key, value) {
        try {
            defineProperty$e(global$l, key, {
                value: value,
                configurable: true,
                writable: true
            });
        } catch (error) {
            global$l[key] = value;
        }
        return value;
    };
    var global$k = global$p;
    var defineGlobalProperty = defineGlobalProperty$1;
    var SHARED = "__core-js_shared__";
    var store$3 = global$k[SHARED] || defineGlobalProperty(SHARED, {});
    var sharedStore = store$3;
    var store$2 = sharedStore;
    (shared$7.exports = function(key, value) {
        return store$2[key] || (store$2[key] = value !== undefined ? value : {});
    })("versions", []).push({
        version: "3.33.2",
        mode: "pure",
        copyright: "\xa9 2014-2023 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.33.2/LICENSE",
        source: "https://github.com/zloirock/core-js"
    });
    var sharedExports = shared$7.exports;
    var requireObjectCoercible$1 = requireObjectCoercible$3;
    var $Object$2 = Object;
    // `ToObject` abstract operation
    // https://tc39.es/ecma262/#sec-toobject
    var toObject$e = function(argument) {
        return $Object$2(requireObjectCoercible$1(argument));
    };
    var uncurryThis$m = functionUncurryThis;
    var toObject$d = toObject$e;
    var hasOwnProperty = uncurryThis$m({}.hasOwnProperty);
    // `HasOwnProperty` abstract operation
    // https://tc39.es/ecma262/#sec-hasownproperty
    // eslint-disable-next-line es/no-object-hasown -- safe
    var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
        return hasOwnProperty(toObject$d(it), key);
    };
    var uncurryThis$l = functionUncurryThis;
    var id$1 = 0;
    var postfix = Math.random();
    var toString$8 = uncurryThis$l(1.0.toString);
    var uid$4 = function(key) {
        return "Symbol(" + (key === undefined ? "" : key) + ")_" + toString$8(++id$1 + postfix, 36);
    };
    var global$j = global$p;
    var shared$6 = sharedExports;
    var hasOwn$j = hasOwnProperty_1;
    var uid$3 = uid$4;
    var NATIVE_SYMBOL$4 = symbolConstructorDetection;
    var USE_SYMBOL_AS_UID = useSymbolAsUid;
    var Symbol$3 = global$j.Symbol;
    var WellKnownSymbolsStore$2 = shared$6("wks");
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$3["for"] || Symbol$3 : Symbol$3 && Symbol$3.withoutSetter || uid$3;
    var wellKnownSymbol$n = function(name) {
        if (!hasOwn$j(WellKnownSymbolsStore$2, name)) WellKnownSymbolsStore$2[name] = NATIVE_SYMBOL$4 && hasOwn$j(Symbol$3, name) ? Symbol$3[name] : createWellKnownSymbol("Symbol." + name);
        return WellKnownSymbolsStore$2[name];
    };
    var call$g = functionCall;
    var isObject$f = isObject$h;
    var isSymbol$4 = isSymbol$5;
    var getMethod$2 = getMethod$3;
    var ordinaryToPrimitive = ordinaryToPrimitive$1;
    var wellKnownSymbol$m = wellKnownSymbol$n;
    var $TypeError$d = TypeError;
    var TO_PRIMITIVE = wellKnownSymbol$m("toPrimitive");
    // `ToPrimitive` abstract operation
    // https://tc39.es/ecma262/#sec-toprimitive
    var toPrimitive$6 = function(input, pref) {
        if (!isObject$f(input) || isSymbol$4(input)) return input;
        var exoticToPrim = getMethod$2(input, TO_PRIMITIVE);
        var result;
        if (exoticToPrim) {
            if (pref === undefined) pref = "default";
            result = call$g(exoticToPrim, input, pref);
            if (!isObject$f(result) || isSymbol$4(result)) return result;
            throw new $TypeError$d("Can't convert object to primitive value");
        }
        if (pref === undefined) pref = "number";
        return ordinaryToPrimitive(input, pref);
    };
    var toPrimitive$5 = toPrimitive$6;
    var isSymbol$3 = isSymbol$5;
    // `ToPropertyKey` abstract operation
    // https://tc39.es/ecma262/#sec-topropertykey
    var toPropertyKey$4 = function(argument) {
        var key = toPrimitive$5(argument, "string");
        return isSymbol$3(key) ? key : key + "";
    };
    var global$i = global$p;
    var isObject$e = isObject$h;
    var document$3 = global$i.document;
    // typeof document.createElement is 'object' in old IE
    var EXISTS$1 = isObject$e(document$3) && isObject$e(document$3.createElement);
    var documentCreateElement$1 = function(it) {
        return EXISTS$1 ? document$3.createElement(it) : {};
    };
    var DESCRIPTORS$h = descriptors;
    var fails$p = fails$u;
    var createElement$1 = documentCreateElement$1;
    // Thanks to IE8 for its funny defineProperty
    var ie8DomDefine = !DESCRIPTORS$h && !fails$p(function() {
        // eslint-disable-next-line es/no-object-defineproperty -- required for testing
        return Object.defineProperty(createElement$1("div"), "a", {
            get: function() {
                return 7;
            }
        }).a !== 7;
    });
    var DESCRIPTORS$g = descriptors;
    var call$f = functionCall;
    var propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;
    var createPropertyDescriptor$6 = createPropertyDescriptor$7;
    var toIndexedObject$9 = toIndexedObject$a;
    var toPropertyKey$3 = toPropertyKey$4;
    var hasOwn$i = hasOwnProperty_1;
    var IE8_DOM_DEFINE$1 = ie8DomDefine;
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;
    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
    objectGetOwnPropertyDescriptor.f = DESCRIPTORS$g ? $getOwnPropertyDescriptor$2 : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject$9(O);
        P = toPropertyKey$3(P);
        if (IE8_DOM_DEFINE$1) try {
            return $getOwnPropertyDescriptor$2(O, P);
        } catch (error) {}
        if (hasOwn$i(O, P)) return createPropertyDescriptor$6(!call$f(propertyIsEnumerableModule$2.f, O, P), O[P]);
    };
    var fails$o = fails$u;
    var isCallable$g = isCallable$m;
    var replacement = /#|\.prototype\./;
    var isForced$2 = function(feature, detection) {
        var value = data[normalize(feature)];
        return value === POLYFILL ? true : value === NATIVE ? false : isCallable$g(detection) ? fails$o(detection) : !!detection;
    };
    var normalize = isForced$2.normalize = function(string) {
        return String(string).replace(replacement, ".").toLowerCase();
    };
    var data = isForced$2.data = {};
    var NATIVE = isForced$2.NATIVE = "N";
    var POLYFILL = isForced$2.POLYFILL = "P";
    var isForced_1 = isForced$2;
    var uncurryThis$k = functionUncurryThisClause;
    var aCallable$c = aCallable$e;
    var NATIVE_BIND$1 = functionBindNative;
    var bind$i = uncurryThis$k(uncurryThis$k.bind);
    // optional / simple context binding
    var functionBindContext = function(fn, that) {
        aCallable$c(fn);
        return that === undefined ? fn : NATIVE_BIND$1 ? bind$i(fn, that) : function() {
            return fn.apply(that, arguments);
        };
    };
    var objectDefineProperty = {};
    var DESCRIPTORS$f = descriptors;
    var fails$n = fails$u;
    // V8 ~ Chrome 36-
    // https://bugs.chromium.org/p/v8/issues/detail?id=3334
    var v8PrototypeDefineBug = DESCRIPTORS$f && fails$n(function() {
        // eslint-disable-next-line es/no-object-defineproperty -- required for testing
        return Object.defineProperty(function() {}, "prototype", {
            value: 42,
            writable: false
        }).prototype !== 42;
    });
    var isObject$d = isObject$h;
    var $String$3 = String;
    var $TypeError$c = TypeError;
    // `Assert: Type(argument) is Object`
    var anObject$d = function(argument) {
        if (isObject$d(argument)) return argument;
        throw new $TypeError$c($String$3(argument) + " is not an object");
    };
    var DESCRIPTORS$e = descriptors;
    var IE8_DOM_DEFINE = ie8DomDefine;
    var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
    var anObject$c = anObject$d;
    var toPropertyKey$2 = toPropertyKey$4;
    var $TypeError$b = TypeError;
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    var $defineProperty$1 = Object.defineProperty;
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
    var ENUMERABLE = "enumerable";
    var CONFIGURABLE$1 = "configurable";
    var WRITABLE = "writable";
    // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    objectDefineProperty.f = DESCRIPTORS$e ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
        anObject$c(O);
        P = toPropertyKey$2(P);
        anObject$c(Attributes);
        if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
            var current = $getOwnPropertyDescriptor$1(O, P);
            if (current && current[WRITABLE]) {
                O[P] = Attributes.value;
                Attributes = {
                    configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
                    enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
                    writable: false
                };
            }
        }
        return $defineProperty$1(O, P, Attributes);
    } : $defineProperty$1 : function defineProperty(O, P, Attributes) {
        anObject$c(O);
        P = toPropertyKey$2(P);
        anObject$c(Attributes);
        if (IE8_DOM_DEFINE) try {
            return $defineProperty$1(O, P, Attributes);
        } catch (error) {}
        if ("get" in Attributes || "set" in Attributes) throw new $TypeError$b("Accessors not supported");
        if ("value" in Attributes) O[P] = Attributes.value;
        return O;
    };
    var DESCRIPTORS$d = descriptors;
    var definePropertyModule$4 = objectDefineProperty;
    var createPropertyDescriptor$5 = createPropertyDescriptor$7;
    var createNonEnumerableProperty$9 = DESCRIPTORS$d ? function(object, key, value) {
        return definePropertyModule$4.f(object, key, createPropertyDescriptor$5(1, value));
    } : function(object, key, value) {
        object[key] = value;
        return object;
    };
    var global$h = global$p;
    var apply$5 = functionApply;
    var uncurryThis$j = functionUncurryThisClause;
    var isCallable$f = isCallable$m;
    var getOwnPropertyDescriptor$6 = objectGetOwnPropertyDescriptor.f;
    var isForced$1 = isForced_1;
    var path$m = path$o;
    var bind$h = functionBindContext;
    var createNonEnumerableProperty$8 = createNonEnumerableProperty$9;
    var hasOwn$h = hasOwnProperty_1;
    var wrapConstructor = function(NativeConstructor) {
        var Wrapper = function(a, b, c) {
            if (this instanceof Wrapper) {
                switch(arguments.length){
                    case 0:
                        return new NativeConstructor();
                    case 1:
                        return new NativeConstructor(a);
                    case 2:
                        return new NativeConstructor(a, b);
                }
                return new NativeConstructor(a, b, c);
            }
            return apply$5(NativeConstructor, this, arguments);
        };
        Wrapper.prototype = NativeConstructor.prototype;
        return Wrapper;
    };
    /*
    options.target         - name of the target object
    options.global         - target is the global object
    options.stat           - export as static methods of target
    options.proto          - export as prototype methods of target
    options.real           - real prototype method for the `pure` version
    options.forced         - export even if the native feature is available
    options.bind           - bind methods to the target, required for the `pure` version
    options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
    options.unsafe         - use the simple assignment of property instead of delete + defineProperty
    options.sham           - add a flag to not completely full polyfills
    options.enumerable     - export as enumerable property
    options.dontCallGetSet - prevent calling a getter on target
    options.name           - the .name of the function if it does not match the key
  */ var _export = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var PROTO = options.proto;
        var nativeSource = GLOBAL ? global$h : STATIC ? global$h[TARGET] : (global$h[TARGET] || {}).prototype;
        var target = GLOBAL ? path$m : path$m[TARGET] || createNonEnumerableProperty$8(path$m, TARGET, {})[TARGET];
        var targetPrototype = target.prototype;
        var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
        var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
        for(key in source){
            FORCED = isForced$1(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
            // contains in native
            USE_NATIVE = !FORCED && nativeSource && hasOwn$h(nativeSource, key);
            targetProperty = target[key];
            if (USE_NATIVE) {
                if (options.dontCallGetSet) {
                    descriptor = getOwnPropertyDescriptor$6(nativeSource, key);
                    nativeProperty = descriptor && descriptor.value;
                } else nativeProperty = nativeSource[key];
            }
            // export native or implementation
            sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
            if (USE_NATIVE && typeof targetProperty == typeof sourceProperty) continue;
            // bind methods to global for calling from export context
            if (options.bind && USE_NATIVE) resultProperty = bind$h(sourceProperty, global$h);
            else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);
            else if (PROTO && isCallable$f(sourceProperty)) resultProperty = uncurryThis$j(sourceProperty);
            else resultProperty = sourceProperty;
            // add a flag to not completely full polyfills
            if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) createNonEnumerableProperty$8(resultProperty, "sham", true);
            createNonEnumerableProperty$8(target, key, resultProperty);
            if (PROTO) {
                VIRTUAL_PROTOTYPE = TARGET + "Prototype";
                if (!hasOwn$h(path$m, VIRTUAL_PROTOTYPE)) createNonEnumerableProperty$8(path$m, VIRTUAL_PROTOTYPE, {});
                // export virtual prototype methods
                createNonEnumerableProperty$8(path$m[VIRTUAL_PROTOTYPE], key, sourceProperty);
                // export real prototype methods
                if (options.real && targetPrototype && (FORCED || !targetPrototype[key])) createNonEnumerableProperty$8(targetPrototype, key, sourceProperty);
            }
        }
    };
    var $$P = _export;
    var DESCRIPTORS$c = descriptors;
    var defineProperty$d = objectDefineProperty.f;
    // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    $$P({
        target: "Object",
        stat: true,
        forced: Object.defineProperty !== defineProperty$d,
        sham: !DESCRIPTORS$c
    }, {
        defineProperty: defineProperty$d
    });
    var path$l = path$o;
    var Object$4 = path$l.Object;
    var defineProperty$c = defineProperty$f.exports = function defineProperty(it, key, desc) {
        return Object$4.defineProperty(it, key, desc);
    };
    if (Object$4.defineProperty.sham) defineProperty$c.sham = true;
    var definePropertyExports = defineProperty$f.exports;
    var parent$18 = definePropertyExports;
    var defineProperty$b = parent$18;
    var parent$17 = defineProperty$b;
    var defineProperty$a = parent$17;
    var parent$16 = defineProperty$a;
    var defineProperty$9 = parent$16;
    var defineProperty$8 = defineProperty$9;
    var _Object$defineProperty$1 = /*@__PURE__*/ getDefaultExportFromCjs(defineProperty$8);
    var classof$e = classofRaw$2;
    // `IsArray` abstract operation
    // https://tc39.es/ecma262/#sec-isarray
    // eslint-disable-next-line es/no-array-isarray -- safe
    var isArray$e = Array.isArray || function isArray(argument) {
        return classof$e(argument) === "Array";
    };
    var ceil = Math.ceil;
    var floor$1 = Math.floor;
    // `Math.trunc` method
    // https://tc39.es/ecma262/#sec-math.trunc
    // eslint-disable-next-line es/no-math-trunc -- safe
    var mathTrunc = Math.trunc || function trunc(x) {
        var n = +x;
        return (n > 0 ? floor$1 : ceil)(n);
    };
    var trunc = mathTrunc;
    // `ToIntegerOrInfinity` abstract operation
    // https://tc39.es/ecma262/#sec-tointegerorinfinity
    var toIntegerOrInfinity$4 = function(argument) {
        var number = +argument;
        // eslint-disable-next-line no-self-compare -- NaN check
        return number !== number || number === 0 ? 0 : trunc(number);
    };
    var toIntegerOrInfinity$3 = toIntegerOrInfinity$4;
    var min$2 = Math.min;
    // `ToLength` abstract operation
    // https://tc39.es/ecma262/#sec-tolength
    var toLength$1 = function(argument) {
        return argument > 0 ? min$2(toIntegerOrInfinity$3(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
    };
    var toLength = toLength$1;
    // `LengthOfArrayLike` abstract operation
    // https://tc39.es/ecma262/#sec-lengthofarraylike
    var lengthOfArrayLike$d = function(obj) {
        return toLength(obj.length);
    };
    var $TypeError$a = TypeError;
    var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991
    var doesNotExceedSafeInteger$4 = function(it) {
        if (it > MAX_SAFE_INTEGER) throw $TypeError$a("Maximum allowed index exceeded");
        return it;
    };
    var toPropertyKey$1 = toPropertyKey$4;
    var definePropertyModule$3 = objectDefineProperty;
    var createPropertyDescriptor$4 = createPropertyDescriptor$7;
    var createProperty$6 = function(object, key, value) {
        var propertyKey = toPropertyKey$1(key);
        if (propertyKey in object) definePropertyModule$3.f(object, propertyKey, createPropertyDescriptor$4(0, value));
        else object[propertyKey] = value;
    };
    var wellKnownSymbol$l = wellKnownSymbol$n;
    var TO_STRING_TAG$4 = wellKnownSymbol$l("toStringTag");
    var test$2 = {};
    test$2[TO_STRING_TAG$4] = "z";
    var toStringTagSupport = String(test$2) === "[object z]";
    var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
    var isCallable$e = isCallable$m;
    var classofRaw = classofRaw$2;
    var wellKnownSymbol$k = wellKnownSymbol$n;
    var TO_STRING_TAG$3 = wellKnownSymbol$k("toStringTag");
    var $Object$1 = Object;
    // ES3 wrong here
    var CORRECT_ARGUMENTS = classofRaw(function() {
        return arguments;
    }()) === "Arguments";
    // fallback for IE11 Script Access Denied error
    var tryGet = function(it, key) {
        try {
            return it[key];
        } catch (error) {}
    };
    // getting tag from ES6+ `Object.prototype.toString`
    var classof$d = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function(it) {
        var O, tag, result;
        return it === undefined ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object$1(it), TO_STRING_TAG$3)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable$e(O.callee) ? "Arguments" : result;
    };
    var uncurryThis$i = functionUncurryThis;
    var isCallable$d = isCallable$m;
    var store$1 = sharedStore;
    var functionToString = uncurryThis$i(Function.toString);
    // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
    if (!isCallable$d(store$1.inspectSource)) store$1.inspectSource = function(it) {
        return functionToString(it);
    };
    var inspectSource$2 = store$1.inspectSource;
    var uncurryThis$h = functionUncurryThis;
    var fails$m = fails$u;
    var isCallable$c = isCallable$m;
    var classof$c = classof$d;
    var getBuiltIn$d = getBuiltIn$f;
    var inspectSource$1 = inspectSource$2;
    var noop = function() {};
    var empty = [];
    var construct$4 = getBuiltIn$d("Reflect", "construct");
    var constructorRegExp = /^\s*(?:class|function)\b/;
    var exec$1 = uncurryThis$h(constructorRegExp.exec);
    var INCORRECT_TO_STRING = !constructorRegExp.test(noop);
    var isConstructorModern = function isConstructor(argument) {
        if (!isCallable$c(argument)) return false;
        try {
            construct$4(noop, empty, argument);
            return true;
        } catch (error) {
            return false;
        }
    };
    var isConstructorLegacy = function isConstructor(argument) {
        if (!isCallable$c(argument)) return false;
        switch(classof$c(argument)){
            case "AsyncFunction":
            case "GeneratorFunction":
            case "AsyncGeneratorFunction":
                return false;
        }
        try {
            // we can't check .prototype since constructors produced by .bind haven't it
            // `Function#toString` throws on some built-it function in some legacy engines
            // (for example, `DOMQuad` and similar in FF41-)
            return INCORRECT_TO_STRING || !!exec$1(constructorRegExp, inspectSource$1(argument));
        } catch (error) {
            return true;
        }
    };
    isConstructorLegacy.sham = true;
    // `IsConstructor` abstract operation
    // https://tc39.es/ecma262/#sec-isconstructor
    var isConstructor$4 = !construct$4 || fails$m(function() {
        var called;
        return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
            called = true;
        }) || called;
    }) ? isConstructorLegacy : isConstructorModern;
    var isArray$d = isArray$e;
    var isConstructor$3 = isConstructor$4;
    var isObject$c = isObject$h;
    var wellKnownSymbol$j = wellKnownSymbol$n;
    var SPECIES$5 = wellKnownSymbol$j("species");
    var $Array$3 = Array;
    // a part of `ArraySpeciesCreate` abstract operation
    // https://tc39.es/ecma262/#sec-arrayspeciescreate
    var arraySpeciesConstructor$1 = function(originalArray) {
        var C;
        if (isArray$d(originalArray)) {
            C = originalArray.constructor;
            // cross-realm fallback
            if (isConstructor$3(C) && (C === $Array$3 || isArray$d(C.prototype))) C = undefined;
            else if (isObject$c(C)) {
                C = C[SPECIES$5];
                if (C === null) C = undefined;
            }
        }
        return C === undefined ? $Array$3 : C;
    };
    var arraySpeciesConstructor = arraySpeciesConstructor$1;
    // `ArraySpeciesCreate` abstract operation
    // https://tc39.es/ecma262/#sec-arrayspeciescreate
    var arraySpeciesCreate$4 = function(originalArray, length) {
        return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
    };
    var fails$l = fails$u;
    var wellKnownSymbol$i = wellKnownSymbol$n;
    var V8_VERSION$2 = engineV8Version;
    var SPECIES$4 = wellKnownSymbol$i("species");
    var arrayMethodHasSpeciesSupport$5 = function(METHOD_NAME) {
        // We can't use this feature detection in V8 since it causes
        // deoptimization and serious performance degradation
        // https://github.com/zloirock/core-js/issues/677
        return V8_VERSION$2 >= 51 || !fails$l(function() {
            var array = [];
            var constructor = array.constructor = {};
            constructor[SPECIES$4] = function() {
                return {
                    foo: 1
                };
            };
            return array[METHOD_NAME](Boolean).foo !== 1;
        });
    };
    var $$O = _export;
    var fails$k = fails$u;
    var isArray$c = isArray$e;
    var isObject$b = isObject$h;
    var toObject$c = toObject$e;
    var lengthOfArrayLike$c = lengthOfArrayLike$d;
    var doesNotExceedSafeInteger$3 = doesNotExceedSafeInteger$4;
    var createProperty$5 = createProperty$6;
    var arraySpeciesCreate$3 = arraySpeciesCreate$4;
    var arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;
    var wellKnownSymbol$h = wellKnownSymbol$n;
    var V8_VERSION$1 = engineV8Version;
    var IS_CONCAT_SPREADABLE = wellKnownSymbol$h("isConcatSpreadable");
    // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/679
    var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION$1 >= 51 || !fails$k(function() {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
    });
    var isConcatSpreadable = function(O) {
        if (!isObject$b(O)) return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== undefined ? !!spreadable : isArray$c(O);
    };
    var FORCED$6 = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport$4("concat");
    // `Array.prototype.concat` method
    // https://tc39.es/ecma262/#sec-array.prototype.concat
    // with adding support of @@isConcatSpreadable and @@species
    $$O({
        target: "Array",
        proto: true,
        arity: 1,
        forced: FORCED$6
    }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        concat: function concat(arg) {
            var O = toObject$c(this);
            var A = arraySpeciesCreate$3(O, 0);
            var n = 0;
            var i, k, length, len, E;
            for(i = -1, length = arguments.length; i < length; i++){
                E = i === -1 ? O : arguments[i];
                if (isConcatSpreadable(E)) {
                    len = lengthOfArrayLike$c(E);
                    doesNotExceedSafeInteger$3(n + len);
                    for(k = 0; k < len; k++, n++)if (k in E) createProperty$5(A, n, E[k]);
                } else {
                    doesNotExceedSafeInteger$3(n + 1);
                    createProperty$5(A, n++, E);
                }
            }
            A.length = n;
            return A;
        }
    });
    var classof$b = classof$d;
    var $String$2 = String;
    var toString$7 = function(argument) {
        if (classof$b(argument) === "Symbol") throw new TypeError("Cannot convert a Symbol value to a string");
        return $String$2(argument);
    };
    var objectDefineProperties = {};
    var toIntegerOrInfinity$2 = toIntegerOrInfinity$4;
    var max$3 = Math.max;
    var min$1 = Math.min;
    // Helper for a popular repeating case of the spec:
    // Let integer be ? ToInteger(index).
    // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
    var toAbsoluteIndex$4 = function(index, length) {
        var integer = toIntegerOrInfinity$2(index);
        return integer < 0 ? max$3(integer + length, 0) : min$1(integer, length);
    };
    var toIndexedObject$8 = toIndexedObject$a;
    var toAbsoluteIndex$3 = toAbsoluteIndex$4;
    var lengthOfArrayLike$b = lengthOfArrayLike$d;
    // `Array.prototype.{ indexOf, includes }` methods implementation
    var createMethod$3 = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
            var O = toIndexedObject$8($this);
            var length = lengthOfArrayLike$b(O);
            var index = toAbsoluteIndex$3(fromIndex, length);
            var value;
            // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare -- NaN check
            if (IS_INCLUDES && el !== el) while(length > index){
                value = O[index++];
                // eslint-disable-next-line no-self-compare -- NaN check
                if (value !== value) return true;
            // Array#indexOf ignores holes, Array#includes - not
            }
            else for(; length > index; index++){
                if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
            }
            return !IS_INCLUDES && -1;
        };
    };
    var arrayIncludes = {
        // `Array.prototype.includes` method
        // https://tc39.es/ecma262/#sec-array.prototype.includes
        includes: createMethod$3(true),
        // `Array.prototype.indexOf` method
        // https://tc39.es/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod$3(false)
    };
    var hiddenKeys$6 = {};
    var uncurryThis$g = functionUncurryThis;
    var hasOwn$g = hasOwnProperty_1;
    var toIndexedObject$7 = toIndexedObject$a;
    var indexOf = arrayIncludes.indexOf;
    var hiddenKeys$5 = hiddenKeys$6;
    var push$c = uncurryThis$g([].push);
    var objectKeysInternal = function(object, names) {
        var O = toIndexedObject$7(object);
        var i = 0;
        var result = [];
        var key;
        for(key in O)!hasOwn$g(hiddenKeys$5, key) && hasOwn$g(O, key) && push$c(result, key);
        // Don't enum bug & hidden keys
        while(names.length > i)if (hasOwn$g(O, key = names[i++])) ~indexOf(result, key) || push$c(result, key);
        return result;
    };
    // IE8- don't enum bug keys
    var enumBugKeys$3 = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
    ];
    var internalObjectKeys$1 = objectKeysInternal;
    var enumBugKeys$2 = enumBugKeys$3;
    // `Object.keys` method
    // https://tc39.es/ecma262/#sec-object.keys
    // eslint-disable-next-line es/no-object-keys -- safe
    var objectKeys$3 = Object.keys || function keys(O) {
        return internalObjectKeys$1(O, enumBugKeys$2);
    };
    var DESCRIPTORS$b = descriptors;
    var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
    var definePropertyModule$2 = objectDefineProperty;
    var anObject$b = anObject$d;
    var toIndexedObject$6 = toIndexedObject$a;
    var objectKeys$2 = objectKeys$3;
    // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    // eslint-disable-next-line es/no-object-defineproperties -- safe
    objectDefineProperties.f = DESCRIPTORS$b && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject$b(O);
        var props = toIndexedObject$6(Properties);
        var keys = objectKeys$2(Properties);
        var length = keys.length;
        var index = 0;
        var key;
        while(length > index)definePropertyModule$2.f(O, key = keys[index++], props[key]);
        return O;
    };
    var getBuiltIn$c = getBuiltIn$f;
    var html$2 = getBuiltIn$c("document", "documentElement");
    var shared$5 = sharedExports;
    var uid$2 = uid$4;
    var keys$7 = shared$5("keys");
    var sharedKey$4 = function(key) {
        return keys$7[key] || (keys$7[key] = uid$2(key));
    };
    /* global ActiveXObject -- old IE, WSH */ var anObject$a = anObject$d;
    var definePropertiesModule$1 = objectDefineProperties;
    var enumBugKeys$1 = enumBugKeys$3;
    var hiddenKeys$4 = hiddenKeys$6;
    var html$1 = html$2;
    var documentCreateElement = documentCreateElement$1;
    var sharedKey$3 = sharedKey$4;
    var GT = ">";
    var LT = "<";
    var PROTOTYPE$1 = "prototype";
    var SCRIPT = "script";
    var IE_PROTO$1 = sharedKey$3("IE_PROTO");
    var EmptyConstructor = function() {};
    var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
    };
    // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
    var NullProtoObjectViaActiveX = function(activeXDocument) {
        activeXDocument.write(scriptTag(""));
        activeXDocument.close();
        var temp = activeXDocument.parentWindow.Object;
        activeXDocument = null; // avoid memory leak
        return temp;
    };
    // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var NullProtoObjectViaIFrame = function() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = documentCreateElement("iframe");
        var JS = "java" + SCRIPT + ":";
        var iframeDocument;
        iframe.style.display = "none";
        html$1.appendChild(iframe);
        // https://github.com/zloirock/core-js/issues/475
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag("document.F=Object"));
        iframeDocument.close();
        return iframeDocument.F;
    };
    // Check for document.domain and active x support
    // No need to use active x approach when document.domain is not set
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    // avoid IE GC bug
    var activeXDocument;
    var NullProtoObject = function() {
        try {
            activeXDocument = new ActiveXObject("htmlfile");
        } catch (error) {}
        NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) // old IE
         : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument); // WSH
        var length = enumBugKeys$1.length;
        while(length--)delete NullProtoObject[PROTOTYPE$1][enumBugKeys$1[length]];
        return NullProtoObject();
    };
    hiddenKeys$4[IE_PROTO$1] = true;
    // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    // eslint-disable-next-line es/no-object-create -- safe
    var objectCreate = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
            EmptyConstructor[PROTOTYPE$1] = anObject$a(O);
            result = new EmptyConstructor();
            EmptyConstructor[PROTOTYPE$1] = null;
            // add "__proto__" for Object.getPrototypeOf polyfill
            result[IE_PROTO$1] = O;
        } else result = NullProtoObject();
        return Properties === undefined ? result : definePropertiesModule$1.f(result, Properties);
    };
    var objectGetOwnPropertyNames = {};
    var internalObjectKeys = objectKeysInternal;
    var enumBugKeys = enumBugKeys$3;
    var hiddenKeys$3 = enumBugKeys.concat("length", "prototype");
    // `Object.getOwnPropertyNames` method
    // https://tc39.es/ecma262/#sec-object.getownpropertynames
    // eslint-disable-next-line es/no-object-getownpropertynames -- safe
    objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys$3);
    };
    var objectGetOwnPropertyNamesExternal = {};
    var toAbsoluteIndex$2 = toAbsoluteIndex$4;
    var lengthOfArrayLike$a = lengthOfArrayLike$d;
    var createProperty$4 = createProperty$6;
    var $Array$2 = Array;
    var max$2 = Math.max;
    var arraySliceSimple = function(O, start, end) {
        var length = lengthOfArrayLike$a(O);
        var k = toAbsoluteIndex$2(start, length);
        var fin = toAbsoluteIndex$2(end === undefined ? length : end, length);
        var result = $Array$2(max$2(fin - k, 0));
        var n = 0;
        for(; k < fin; k++, n++)createProperty$4(result, n, O[k]);
        result.length = n;
        return result;
    };
    /* eslint-disable es/no-object-getownpropertynames -- safe */ var classof$a = classofRaw$2;
    var toIndexedObject$5 = toIndexedObject$a;
    var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
    var arraySlice$6 = arraySliceSimple;
    var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    var getWindowNames = function(it) {
        try {
            return $getOwnPropertyNames$1(it);
        } catch (error) {
            return arraySlice$6(windowNames);
        }
    };
    // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    objectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames(it) {
        return windowNames && classof$a(it) === "Window" ? getWindowNames(it) : $getOwnPropertyNames$1(toIndexedObject$5(it));
    };
    var objectGetOwnPropertySymbols = {};
    // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
    objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;
    var createNonEnumerableProperty$7 = createNonEnumerableProperty$9;
    var defineBuiltIn$6 = function(target, key, value, options) {
        if (options && options.enumerable) target[key] = value;
        else createNonEnumerableProperty$7(target, key, value);
        return target;
    };
    var defineProperty$7 = objectDefineProperty;
    var defineBuiltInAccessor$3 = function(target, name, descriptor) {
        return defineProperty$7.f(target, name, descriptor);
    };
    var wellKnownSymbolWrapped = {};
    var wellKnownSymbol$g = wellKnownSymbol$n;
    wellKnownSymbolWrapped.f = wellKnownSymbol$g;
    var path$k = path$o;
    var hasOwn$f = hasOwnProperty_1;
    var wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
    var defineProperty$6 = objectDefineProperty.f;
    var wellKnownSymbolDefine = function(NAME) {
        var Symbol1 = path$k.Symbol || (path$k.Symbol = {});
        if (!hasOwn$f(Symbol1, NAME)) defineProperty$6(Symbol1, NAME, {
            value: wrappedWellKnownSymbolModule$1.f(NAME)
        });
    };
    var call$e = functionCall;
    var getBuiltIn$b = getBuiltIn$f;
    var wellKnownSymbol$f = wellKnownSymbol$n;
    var defineBuiltIn$5 = defineBuiltIn$6;
    var symbolDefineToPrimitive = function() {
        var Symbol1 = getBuiltIn$b("Symbol");
        var SymbolPrototype = Symbol1 && Symbol1.prototype;
        var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
        var TO_PRIMITIVE = wellKnownSymbol$f("toPrimitive");
        if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) // `Symbol.prototype[@@toPrimitive]` method
        // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
        // eslint-disable-next-line no-unused-vars -- required for .length
        defineBuiltIn$5(SymbolPrototype, TO_PRIMITIVE, function(hint) {
            return call$e(valueOf, this);
        }, {
            arity: 1
        });
    };
    var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
    var classof$9 = classof$d;
    // `Object.prototype.toString` method implementation
    // https://tc39.es/ecma262/#sec-object.prototype.tostring
    var objectToString = TO_STRING_TAG_SUPPORT$1 ? ({}).toString : function toString() {
        return "[object " + classof$9(this) + "]";
    };
    var TO_STRING_TAG_SUPPORT = toStringTagSupport;
    var defineProperty$5 = objectDefineProperty.f;
    var createNonEnumerableProperty$6 = createNonEnumerableProperty$9;
    var hasOwn$e = hasOwnProperty_1;
    var toString$6 = objectToString;
    var wellKnownSymbol$e = wellKnownSymbol$n;
    var TO_STRING_TAG$2 = wellKnownSymbol$e("toStringTag");
    var setToStringTag$7 = function(it, TAG, STATIC, SET_METHOD) {
        if (it) {
            var target = STATIC ? it : it.prototype;
            if (!hasOwn$e(target, TO_STRING_TAG$2)) defineProperty$5(target, TO_STRING_TAG$2, {
                configurable: true,
                value: TAG
            });
            if (SET_METHOD && !TO_STRING_TAG_SUPPORT) createNonEnumerableProperty$6(target, "toString", toString$6);
        }
    };
    var global$g = global$p;
    var isCallable$b = isCallable$m;
    var WeakMap$1 = global$g.WeakMap;
    var weakMapBasicDetection = isCallable$b(WeakMap$1) && /native code/.test(String(WeakMap$1));
    var NATIVE_WEAK_MAP = weakMapBasicDetection;
    var global$f = global$p;
    var isObject$a = isObject$h;
    var createNonEnumerableProperty$5 = createNonEnumerableProperty$9;
    var hasOwn$d = hasOwnProperty_1;
    var shared$4 = sharedStore;
    var sharedKey$2 = sharedKey$4;
    var hiddenKeys$2 = hiddenKeys$6;
    var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
    var TypeError$3 = global$f.TypeError;
    var WeakMap = global$f.WeakMap;
    var set$4, get, has;
    var enforce = function(it) {
        return has(it) ? get(it) : set$4(it, {});
    };
    var getterFor = function(TYPE) {
        return function(it) {
            var state;
            if (!isObject$a(it) || (state = get(it)).type !== TYPE) throw new TypeError$3("Incompatible receiver, " + TYPE + " required");
            return state;
        };
    };
    if (NATIVE_WEAK_MAP || shared$4.state) {
        var store = shared$4.state || (shared$4.state = new WeakMap());
        /* eslint-disable no-self-assign -- prototype methods protection */ store.get = store.get;
        store.has = store.has;
        store.set = store.set;
        /* eslint-enable no-self-assign -- prototype methods protection */ set$4 = function(it, metadata) {
            if (store.has(it)) throw new TypeError$3(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            store.set(it, metadata);
            return metadata;
        };
        get = function(it) {
            return store.get(it) || {};
        };
        has = function(it) {
            return store.has(it);
        };
    } else {
        var STATE = sharedKey$2("state");
        hiddenKeys$2[STATE] = true;
        set$4 = function(it, metadata) {
            if (hasOwn$d(it, STATE)) throw new TypeError$3(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            createNonEnumerableProperty$5(it, STATE, metadata);
            return metadata;
        };
        get = function(it) {
            return hasOwn$d(it, STATE) ? it[STATE] : {};
        };
        has = function(it) {
            return hasOwn$d(it, STATE);
        };
    }
    var internalState = {
        set: set$4,
        get: get,
        has: has,
        enforce: enforce,
        getterFor: getterFor
    };
    var bind$g = functionBindContext;
    var uncurryThis$f = functionUncurryThis;
    var IndexedObject$2 = indexedObject;
    var toObject$b = toObject$e;
    var lengthOfArrayLike$9 = lengthOfArrayLike$d;
    var arraySpeciesCreate$2 = arraySpeciesCreate$4;
    var push$b = uncurryThis$f([].push);
    // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
    var createMethod$2 = function(TYPE) {
        var IS_MAP = TYPE === 1;
        var IS_FILTER = TYPE === 2;
        var IS_SOME = TYPE === 3;
        var IS_EVERY = TYPE === 4;
        var IS_FIND_INDEX = TYPE === 6;
        var IS_FILTER_REJECT = TYPE === 7;
        var NO_HOLES = TYPE === 5 || IS_FIND_INDEX;
        return function($this, callbackfn, that, specificCreate) {
            var O = toObject$b($this);
            var self1 = IndexedObject$2(O);
            var boundFunction = bind$g(callbackfn, that);
            var length = lengthOfArrayLike$9(self1);
            var index = 0;
            var create = specificCreate || arraySpeciesCreate$2;
            var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
            var value, result;
            for(; length > index; index++)if (NO_HOLES || index in self1) {
                value = self1[index];
                result = boundFunction(value, index, O);
                if (TYPE) {
                    if (IS_MAP) target[index] = result; // map
                    else if (result) switch(TYPE){
                        case 3:
                            return true; // some
                        case 5:
                            return value; // find
                        case 6:
                            return index; // findIndex
                        case 2:
                            push$b(target, value); // filter
                    }
                    else switch(TYPE){
                        case 4:
                            return false; // every
                        case 7:
                            push$b(target, value); // filterReject
                    }
                }
            }
            return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
    };
    var arrayIteration = {
        // `Array.prototype.forEach` method
        // https://tc39.es/ecma262/#sec-array.prototype.foreach
        forEach: createMethod$2(0),
        // `Array.prototype.map` method
        // https://tc39.es/ecma262/#sec-array.prototype.map
        map: createMethod$2(1),
        // `Array.prototype.filter` method
        // https://tc39.es/ecma262/#sec-array.prototype.filter
        filter: createMethod$2(2),
        // `Array.prototype.some` method
        // https://tc39.es/ecma262/#sec-array.prototype.some
        some: createMethod$2(3),
        // `Array.prototype.every` method
        // https://tc39.es/ecma262/#sec-array.prototype.every
        every: createMethod$2(4),
        // `Array.prototype.find` method
        // https://tc39.es/ecma262/#sec-array.prototype.find
        find: createMethod$2(5),
        // `Array.prototype.findIndex` method
        // https://tc39.es/ecma262/#sec-array.prototype.findIndex
        findIndex: createMethod$2(6),
        // `Array.prototype.filterReject` method
        // https://github.com/tc39/proposal-array-filtering
        filterReject: createMethod$2(7)
    };
    var $$N = _export;
    var global$e = global$p;
    var call$d = functionCall;
    var uncurryThis$e = functionUncurryThis;
    var DESCRIPTORS$a = descriptors;
    var NATIVE_SYMBOL$3 = symbolConstructorDetection;
    var fails$j = fails$u;
    var hasOwn$c = hasOwnProperty_1;
    var isPrototypeOf$j = objectIsPrototypeOf;
    var anObject$9 = anObject$d;
    var toIndexedObject$4 = toIndexedObject$a;
    var toPropertyKey = toPropertyKey$4;
    var $toString = toString$7;
    var createPropertyDescriptor$3 = createPropertyDescriptor$7;
    var nativeObjectCreate = objectCreate;
    var objectKeys$1 = objectKeys$3;
    var getOwnPropertyNamesModule$2 = objectGetOwnPropertyNames;
    var getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;
    var getOwnPropertySymbolsModule$3 = objectGetOwnPropertySymbols;
    var getOwnPropertyDescriptorModule$2 = objectGetOwnPropertyDescriptor;
    var definePropertyModule$1 = objectDefineProperty;
    var definePropertiesModule = objectDefineProperties;
    var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
    var defineBuiltIn$4 = defineBuiltIn$6;
    var defineBuiltInAccessor$2 = defineBuiltInAccessor$3;
    var shared$3 = sharedExports;
    var sharedKey$1 = sharedKey$4;
    var hiddenKeys$1 = hiddenKeys$6;
    var uid$1 = uid$4;
    var wellKnownSymbol$d = wellKnownSymbol$n;
    var wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
    var defineWellKnownSymbol$l = wellKnownSymbolDefine;
    var defineSymbolToPrimitive$1 = symbolDefineToPrimitive;
    var setToStringTag$6 = setToStringTag$7;
    var InternalStateModule$5 = internalState;
    var $forEach$1 = arrayIteration.forEach;
    var HIDDEN = sharedKey$1("hidden");
    var SYMBOL = "Symbol";
    var PROTOTYPE = "prototype";
    var setInternalState$5 = InternalStateModule$5.set;
    var getInternalState$2 = InternalStateModule$5.getterFor(SYMBOL);
    var ObjectPrototype$2 = Object[PROTOTYPE];
    var $Symbol = global$e.Symbol;
    var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
    var RangeError = global$e.RangeError;
    var TypeError$2 = global$e.TypeError;
    var QObject = global$e.QObject;
    var nativeGetOwnPropertyDescriptor$1 = getOwnPropertyDescriptorModule$2.f;
    var nativeDefineProperty = definePropertyModule$1.f;
    var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
    var nativePropertyIsEnumerable = propertyIsEnumerableModule$1.f;
    var push$a = uncurryThis$e([].push);
    var AllSymbols = shared$3("symbols");
    var ObjectPrototypeSymbols = shared$3("op-symbols");
    var WellKnownSymbolsStore$1 = shared$3("wks");
    // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
    var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
    // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
    var fallbackDefineProperty = function(O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype$2, P);
        if (ObjectPrototypeDescriptor) delete ObjectPrototype$2[P];
        nativeDefineProperty(O, P, Attributes);
        if (ObjectPrototypeDescriptor && O !== ObjectPrototype$2) nativeDefineProperty(ObjectPrototype$2, P, ObjectPrototypeDescriptor);
    };
    var setSymbolDescriptor = DESCRIPTORS$a && fails$j(function() {
        return nativeObjectCreate(nativeDefineProperty({}, "a", {
            get: function() {
                return nativeDefineProperty(this, "a", {
                    value: 7
                }).a;
            }
        })).a !== 7;
    }) ? fallbackDefineProperty : nativeDefineProperty;
    var wrap = function(tag, description) {
        var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
        setInternalState$5(symbol, {
            type: SYMBOL,
            tag: tag,
            description: description
        });
        if (!DESCRIPTORS$a) symbol.description = description;
        return symbol;
    };
    var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype$2) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject$9(O);
        var key = toPropertyKey(P);
        anObject$9(Attributes);
        if (hasOwn$c(AllSymbols, key)) {
            if (!Attributes.enumerable) {
                if (!hasOwn$c(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor$3(1, {}));
                O[HIDDEN][key] = true;
            } else {
                if (hasOwn$c(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
                Attributes = nativeObjectCreate(Attributes, {
                    enumerable: createPropertyDescriptor$3(0, false)
                });
            }
            return setSymbolDescriptor(O, key, Attributes);
        }
        return nativeDefineProperty(O, key, Attributes);
    };
    var $defineProperties = function defineProperties(O, Properties) {
        anObject$9(O);
        var properties = toIndexedObject$4(Properties);
        var keys = objectKeys$1(properties).concat($getOwnPropertySymbols(properties));
        $forEach$1(keys, function(key) {
            if (!DESCRIPTORS$a || call$d($propertyIsEnumerable, properties, key)) $defineProperty(O, key, properties[key]);
        });
        return O;
    };
    var $create = function create(O, Properties) {
        return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
    };
    var $propertyIsEnumerable = function propertyIsEnumerable(V) {
        var P = toPropertyKey(V);
        var enumerable = call$d(nativePropertyIsEnumerable, this, P);
        if (this === ObjectPrototype$2 && hasOwn$c(AllSymbols, P) && !hasOwn$c(ObjectPrototypeSymbols, P)) return false;
        return enumerable || !hasOwn$c(this, P) || !hasOwn$c(AllSymbols, P) || hasOwn$c(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject$4(O);
        var key = toPropertyKey(P);
        if (it === ObjectPrototype$2 && hasOwn$c(AllSymbols, key) && !hasOwn$c(ObjectPrototypeSymbols, key)) return;
        var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);
        if (descriptor && hasOwn$c(AllSymbols, key) && !(hasOwn$c(it, HIDDEN) && it[HIDDEN][key])) descriptor.enumerable = true;
        return descriptor;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names = nativeGetOwnPropertyNames(toIndexedObject$4(O));
        var result = [];
        $forEach$1(names, function(key) {
            if (!hasOwn$c(AllSymbols, key) && !hasOwn$c(hiddenKeys$1, key)) push$a(result, key);
        });
        return result;
    };
    var $getOwnPropertySymbols = function(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$2;
        var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$4(O));
        var result = [];
        $forEach$1(names, function(key) {
            if (hasOwn$c(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn$c(ObjectPrototype$2, key))) push$a(result, AllSymbols[key]);
        });
        return result;
    };
    // `Symbol` constructor
    // https://tc39.es/ecma262/#sec-symbol-constructor
    if (!NATIVE_SYMBOL$3) {
        $Symbol = function Symbol1() {
            if (isPrototypeOf$j(SymbolPrototype, this)) throw new TypeError$2("Symbol is not a constructor");
            var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
            var tag = uid$1(description);
            var setter = function(value) {
                var $this = this === undefined ? global$e : this;
                if ($this === ObjectPrototype$2) call$d(setter, ObjectPrototypeSymbols, value);
                if (hasOwn$c($this, HIDDEN) && hasOwn$c($this[HIDDEN], tag)) $this[HIDDEN][tag] = false;
                var descriptor = createPropertyDescriptor$3(1, value);
                try {
                    setSymbolDescriptor($this, tag, descriptor);
                } catch (error) {
                    if (!(error instanceof RangeError)) throw error;
                    fallbackDefineProperty($this, tag, descriptor);
                }
            };
            if (DESCRIPTORS$a && USE_SETTER) setSymbolDescriptor(ObjectPrototype$2, tag, {
                configurable: true,
                set: setter
            });
            return wrap(tag, description);
        };
        SymbolPrototype = $Symbol[PROTOTYPE];
        defineBuiltIn$4(SymbolPrototype, "toString", function toString() {
            return getInternalState$2(this).tag;
        });
        defineBuiltIn$4($Symbol, "withoutSetter", function(description) {
            return wrap(uid$1(description), description);
        });
        propertyIsEnumerableModule$1.f = $propertyIsEnumerable;
        definePropertyModule$1.f = $defineProperty;
        definePropertiesModule.f = $defineProperties;
        getOwnPropertyDescriptorModule$2.f = $getOwnPropertyDescriptor;
        getOwnPropertyNamesModule$2.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        getOwnPropertySymbolsModule$3.f = $getOwnPropertySymbols;
        wrappedWellKnownSymbolModule.f = function(name) {
            return wrap(wellKnownSymbol$d(name), name);
        };
        if (DESCRIPTORS$a) // https://github.com/tc39/proposal-Symbol-description
        defineBuiltInAccessor$2(SymbolPrototype, "description", {
            configurable: true,
            get: function description() {
                return getInternalState$2(this).description;
            }
        });
    }
    $$N({
        global: true,
        constructor: true,
        wrap: true,
        forced: !NATIVE_SYMBOL$3,
        sham: !NATIVE_SYMBOL$3
    }, {
        Symbol: $Symbol
    });
    $forEach$1(objectKeys$1(WellKnownSymbolsStore$1), function(name) {
        defineWellKnownSymbol$l(name);
    });
    $$N({
        target: SYMBOL,
        stat: true,
        forced: !NATIVE_SYMBOL$3
    }, {
        useSetter: function() {
            USE_SETTER = true;
        },
        useSimple: function() {
            USE_SETTER = false;
        }
    });
    $$N({
        target: "Object",
        stat: true,
        forced: !NATIVE_SYMBOL$3,
        sham: !DESCRIPTORS$a
    }, {
        // `Object.create` method
        // https://tc39.es/ecma262/#sec-object.create
        create: $create,
        // `Object.defineProperty` method
        // https://tc39.es/ecma262/#sec-object.defineproperty
        defineProperty: $defineProperty,
        // `Object.defineProperties` method
        // https://tc39.es/ecma262/#sec-object.defineproperties
        defineProperties: $defineProperties,
        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });
    $$N({
        target: "Object",
        stat: true,
        forced: !NATIVE_SYMBOL$3
    }, {
        // `Object.getOwnPropertyNames` method
        // https://tc39.es/ecma262/#sec-object.getownpropertynames
        getOwnPropertyNames: $getOwnPropertyNames
    });
    // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
    defineSymbolToPrimitive$1();
    // `Symbol.prototype[@@toStringTag]` property
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
    setToStringTag$6($Symbol, SYMBOL);
    hiddenKeys$1[HIDDEN] = true;
    var NATIVE_SYMBOL$2 = symbolConstructorDetection;
    /* eslint-disable es/no-symbol -- safe */ var symbolRegistryDetection = NATIVE_SYMBOL$2 && !!Symbol["for"] && !!Symbol.keyFor;
    var $$M = _export;
    var getBuiltIn$a = getBuiltIn$f;
    var hasOwn$b = hasOwnProperty_1;
    var toString$5 = toString$7;
    var shared$2 = sharedExports;
    var NATIVE_SYMBOL_REGISTRY$1 = symbolRegistryDetection;
    var StringToSymbolRegistry = shared$2("string-to-symbol-registry");
    var SymbolToStringRegistry$1 = shared$2("symbol-to-string-registry");
    // `Symbol.for` method
    // https://tc39.es/ecma262/#sec-symbol.for
    $$M({
        target: "Symbol",
        stat: true,
        forced: !NATIVE_SYMBOL_REGISTRY$1
    }, {
        "for": function(key) {
            var string = toString$5(key);
            if (hasOwn$b(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
            var symbol = getBuiltIn$a("Symbol")(string);
            StringToSymbolRegistry[string] = symbol;
            SymbolToStringRegistry$1[symbol] = string;
            return symbol;
        }
    });
    var $$L = _export;
    var hasOwn$a = hasOwnProperty_1;
    var isSymbol$2 = isSymbol$5;
    var tryToString$4 = tryToString$6;
    var shared$1 = sharedExports;
    var NATIVE_SYMBOL_REGISTRY = symbolRegistryDetection;
    var SymbolToStringRegistry = shared$1("symbol-to-string-registry");
    // `Symbol.keyFor` method
    // https://tc39.es/ecma262/#sec-symbol.keyfor
    $$L({
        target: "Symbol",
        stat: true,
        forced: !NATIVE_SYMBOL_REGISTRY
    }, {
        keyFor: function keyFor(sym) {
            if (!isSymbol$2(sym)) throw new TypeError(tryToString$4(sym) + " is not a symbol");
            if (hasOwn$a(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
        }
    });
    var uncurryThis$d = functionUncurryThis;
    var arraySlice$5 = uncurryThis$d([].slice);
    var uncurryThis$c = functionUncurryThis;
    var isArray$b = isArray$e;
    var isCallable$a = isCallable$m;
    var classof$8 = classofRaw$2;
    var toString$4 = toString$7;
    var push$9 = uncurryThis$c([].push);
    var getJsonReplacerFunction = function(replacer) {
        if (isCallable$a(replacer)) return replacer;
        if (!isArray$b(replacer)) return;
        var rawLength = replacer.length;
        var keys = [];
        for(var i = 0; i < rawLength; i++){
            var element = replacer[i];
            if (typeof element == "string") push$9(keys, element);
            else if (typeof element == "number" || classof$8(element) === "Number" || classof$8(element) === "String") push$9(keys, toString$4(element));
        }
        var keysLength = keys.length;
        var root = true;
        return function(key, value) {
            if (root) {
                root = false;
                return value;
            }
            if (isArray$b(this)) return value;
            for(var j = 0; j < keysLength; j++)if (keys[j] === key) return value;
        };
    };
    var $$K = _export;
    var getBuiltIn$9 = getBuiltIn$f;
    var apply$4 = functionApply;
    var call$c = functionCall;
    var uncurryThis$b = functionUncurryThis;
    var fails$i = fails$u;
    var isCallable$9 = isCallable$m;
    var isSymbol$1 = isSymbol$5;
    var arraySlice$4 = arraySlice$5;
    var getReplacerFunction = getJsonReplacerFunction;
    var NATIVE_SYMBOL$1 = symbolConstructorDetection;
    var $String$1 = String;
    var $stringify = getBuiltIn$9("JSON", "stringify");
    var exec = uncurryThis$b(/./.exec);
    var charAt$2 = uncurryThis$b("".charAt);
    var charCodeAt$1 = uncurryThis$b("".charCodeAt);
    var replace$1 = uncurryThis$b("".replace);
    var numberToString = uncurryThis$b(1.0.toString);
    var tester = /[\uD800-\uDFFF]/g;
    var low = /^[\uD800-\uDBFF]$/;
    var hi = /^[\uDC00-\uDFFF]$/;
    var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL$1 || fails$i(function() {
        var symbol = getBuiltIn$9("Symbol")("stringify detection");
        // MS Edge converts symbol values to JSON as {}
        return $stringify([
            symbol
        ]) !== "[null]" || $stringify({
            a: symbol
        }) !== "{}" || $stringify(Object(symbol)) !== "{}";
    });
    // https://github.com/tc39/proposal-well-formed-stringify
    var ILL_FORMED_UNICODE = fails$i(function() {
        return $stringify("\uDF06\uD834") !== '"\udf06\ud834"' || $stringify("\uDEAD") !== '"\udead"';
    });
    var stringifyWithSymbolsFix = function(it, replacer) {
        var args = arraySlice$4(arguments);
        var $replacer = getReplacerFunction(replacer);
        if (!isCallable$9($replacer) && (it === undefined || isSymbol$1(it))) return; // IE8 returns string on undefined
        args[1] = function(key, value) {
            // some old implementations (like WebKit) could pass numbers as keys
            if (isCallable$9($replacer)) value = call$c($replacer, this, $String$1(key), value);
            if (!isSymbol$1(value)) return value;
        };
        return apply$4($stringify, null, args);
    };
    var fixIllFormed = function(match, offset, string) {
        var prev = charAt$2(string, offset - 1);
        var next = charAt$2(string, offset + 1);
        if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) return "\\u" + numberToString(charCodeAt$1(match, 0), 16);
        return match;
    };
    if ($stringify) // `JSON.stringify` method
    // https://tc39.es/ecma262/#sec-json.stringify
    $$K({
        target: "JSON",
        stat: true,
        arity: 3,
        forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE
    }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        stringify: function stringify(it, replacer, space) {
            var args = arraySlice$4(arguments);
            var result = apply$4(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
            return ILL_FORMED_UNICODE && typeof result == "string" ? replace$1(result, tester, fixIllFormed) : result;
        }
    });
    var $$J = _export;
    var NATIVE_SYMBOL = symbolConstructorDetection;
    var fails$h = fails$u;
    var getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;
    var toObject$a = toObject$e;
    // V8 ~ Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
    // https://bugs.chromium.org/p/v8/issues/detail?id=3443
    var FORCED$5 = !NATIVE_SYMBOL || fails$h(function() {
        getOwnPropertySymbolsModule$2.f(1);
    });
    // `Object.getOwnPropertySymbols` method
    // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
    $$J({
        target: "Object",
        stat: true,
        forced: FORCED$5
    }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
            var $getOwnPropertySymbols = getOwnPropertySymbolsModule$2.f;
            return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject$a(it)) : [];
        }
    });
    var defineWellKnownSymbol$k = wellKnownSymbolDefine;
    // `Symbol.asyncIterator` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.asynciterator
    defineWellKnownSymbol$k("asyncIterator");
    var defineWellKnownSymbol$j = wellKnownSymbolDefine;
    // `Symbol.hasInstance` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.hasinstance
    defineWellKnownSymbol$j("hasInstance");
    var defineWellKnownSymbol$i = wellKnownSymbolDefine;
    // `Symbol.isConcatSpreadable` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.isconcatspreadable
    defineWellKnownSymbol$i("isConcatSpreadable");
    var defineWellKnownSymbol$h = wellKnownSymbolDefine;
    // `Symbol.iterator` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.iterator
    defineWellKnownSymbol$h("iterator");
    var defineWellKnownSymbol$g = wellKnownSymbolDefine;
    // `Symbol.match` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.match
    defineWellKnownSymbol$g("match");
    var defineWellKnownSymbol$f = wellKnownSymbolDefine;
    // `Symbol.matchAll` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.matchall
    defineWellKnownSymbol$f("matchAll");
    var defineWellKnownSymbol$e = wellKnownSymbolDefine;
    // `Symbol.replace` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.replace
    defineWellKnownSymbol$e("replace");
    var defineWellKnownSymbol$d = wellKnownSymbolDefine;
    // `Symbol.search` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.search
    defineWellKnownSymbol$d("search");
    var defineWellKnownSymbol$c = wellKnownSymbolDefine;
    // `Symbol.species` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.species
    defineWellKnownSymbol$c("species");
    var defineWellKnownSymbol$b = wellKnownSymbolDefine;
    // `Symbol.split` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.split
    defineWellKnownSymbol$b("split");
    var defineWellKnownSymbol$a = wellKnownSymbolDefine;
    var defineSymbolToPrimitive = symbolDefineToPrimitive;
    // `Symbol.toPrimitive` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.toprimitive
    defineWellKnownSymbol$a("toPrimitive");
    // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
    defineSymbolToPrimitive();
    var getBuiltIn$8 = getBuiltIn$f;
    var defineWellKnownSymbol$9 = wellKnownSymbolDefine;
    var setToStringTag$5 = setToStringTag$7;
    // `Symbol.toStringTag` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.tostringtag
    defineWellKnownSymbol$9("toStringTag");
    // `Symbol.prototype[@@toStringTag]` property
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
    setToStringTag$5(getBuiltIn$8("Symbol"), "Symbol");
    var defineWellKnownSymbol$8 = wellKnownSymbolDefine;
    // `Symbol.unscopables` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.unscopables
    defineWellKnownSymbol$8("unscopables");
    var global$d = global$p;
    var setToStringTag$4 = setToStringTag$7;
    // JSON[@@toStringTag] property
    // https://tc39.es/ecma262/#sec-json-@@tostringtag
    setToStringTag$4(global$d.JSON, "JSON", true);
    var path$j = path$o;
    var symbol$5 = path$j.Symbol;
    var iterators = {};
    var DESCRIPTORS$9 = descriptors;
    var hasOwn$9 = hasOwnProperty_1;
    var FunctionPrototype$2 = Function.prototype;
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var getDescriptor = DESCRIPTORS$9 && Object.getOwnPropertyDescriptor;
    var EXISTS = hasOwn$9(FunctionPrototype$2, "name");
    // additional protection from minified / mangled / dropped function names
    var PROPER = EXISTS && (function something() {}).name === "something";
    var CONFIGURABLE = EXISTS && (!DESCRIPTORS$9 || DESCRIPTORS$9 && getDescriptor(FunctionPrototype$2, "name").configurable);
    var functionName = {
        EXISTS: EXISTS,
        PROPER: PROPER,
        CONFIGURABLE: CONFIGURABLE
    };
    var fails$g = fails$u;
    var correctPrototypeGetter = !fails$g(function() {
        function F() {}
        F.prototype.constructor = null;
        // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
        return Object.getPrototypeOf(new F()) !== F.prototype;
    });
    var hasOwn$8 = hasOwnProperty_1;
    var isCallable$8 = isCallable$m;
    var toObject$9 = toObject$e;
    var sharedKey = sharedKey$4;
    var CORRECT_PROTOTYPE_GETTER$1 = correctPrototypeGetter;
    var IE_PROTO = sharedKey("IE_PROTO");
    var $Object = Object;
    var ObjectPrototype$1 = $Object.prototype;
    // `Object.getPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.getprototypeof
    // eslint-disable-next-line es/no-object-getprototypeof -- safe
    var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER$1 ? $Object.getPrototypeOf : function(O) {
        var object = toObject$9(O);
        if (hasOwn$8(object, IE_PROTO)) return object[IE_PROTO];
        var constructor = object.constructor;
        if (isCallable$8(constructor) && object instanceof constructor) return constructor.prototype;
        return object instanceof $Object ? ObjectPrototype$1 : null;
    };
    var fails$f = fails$u;
    var isCallable$7 = isCallable$m;
    var isObject$9 = isObject$h;
    var create$b = objectCreate;
    var getPrototypeOf$7 = objectGetPrototypeOf;
    var defineBuiltIn$3 = defineBuiltIn$6;
    var wellKnownSymbol$c = wellKnownSymbol$n;
    var ITERATOR$4 = wellKnownSymbol$c("iterator");
    var BUGGY_SAFARI_ITERATORS$1 = false;
    // `%IteratorPrototype%` object
    // https://tc39.es/ecma262/#sec-%iteratorprototype%-object
    var IteratorPrototype$1, PrototypeOfArrayIteratorPrototype, arrayIterator;
    /* eslint-disable es/no-array-prototype-keys -- safe */ if ([].keys) {
        arrayIterator = [].keys();
        // Safari 8 has buggy iterators w/o `next`
        if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
        else {
            PrototypeOfArrayIteratorPrototype = getPrototypeOf$7(getPrototypeOf$7(arrayIterator));
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$1 = PrototypeOfArrayIteratorPrototype;
        }
    }
    var NEW_ITERATOR_PROTOTYPE = !isObject$9(IteratorPrototype$1) || fails$f(function() {
        var test = {};
        // FF44- legacy iterators case
        return IteratorPrototype$1[ITERATOR$4].call(test) !== test;
    });
    if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$1 = {};
    else IteratorPrototype$1 = create$b(IteratorPrototype$1);
    // `%IteratorPrototype%[@@iterator]()` method
    // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
    if (!isCallable$7(IteratorPrototype$1[ITERATOR$4])) defineBuiltIn$3(IteratorPrototype$1, ITERATOR$4, function() {
        return this;
    });
    var iteratorsCore = {
        IteratorPrototype: IteratorPrototype$1,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
    };
    var IteratorPrototype = iteratorsCore.IteratorPrototype;
    var create$a = objectCreate;
    var createPropertyDescriptor$2 = createPropertyDescriptor$7;
    var setToStringTag$3 = setToStringTag$7;
    var Iterators$5 = iterators;
    var returnThis$1 = function() {
        return this;
    };
    var iteratorCreateConstructor = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
        var TO_STRING_TAG = NAME + " Iterator";
        IteratorConstructor.prototype = create$a(IteratorPrototype, {
            next: createPropertyDescriptor$2(+!ENUMERABLE_NEXT, next)
        });
        setToStringTag$3(IteratorConstructor, TO_STRING_TAG, false, true);
        Iterators$5[TO_STRING_TAG] = returnThis$1;
        return IteratorConstructor;
    };
    var uncurryThis$a = functionUncurryThis;
    var aCallable$b = aCallable$e;
    var functionUncurryThisAccessor = function(object, key, method) {
        try {
            // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
            return uncurryThis$a(aCallable$b(Object.getOwnPropertyDescriptor(object, key)[method]));
        } catch (error) {}
    };
    var isCallable$6 = isCallable$m;
    var $String = String;
    var $TypeError$9 = TypeError;
    var aPossiblePrototype$1 = function(argument) {
        if (typeof argument == "object" || isCallable$6(argument)) return argument;
        throw new $TypeError$9("Can't set " + $String(argument) + " as a prototype");
    };
    /* eslint-disable no-proto -- safe */ var uncurryThisAccessor = functionUncurryThisAccessor;
    var anObject$8 = anObject$d;
    var aPossiblePrototype = aPossiblePrototype$1;
    // `Object.setPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.setprototypeof
    // Works with __proto__ only. Old v8 can't work with null proto objects.
    // eslint-disable-next-line es/no-object-setprototypeof -- safe
    var objectSetPrototypeOf = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;
        try {
            setter = uncurryThisAccessor(Object.prototype, "__proto__", "set");
            setter(test, []);
            CORRECT_SETTER = test instanceof Array;
        } catch (error) {}
        return function setPrototypeOf(O, proto) {
            anObject$8(O);
            aPossiblePrototype(proto);
            if (CORRECT_SETTER) setter(O, proto);
            else O.__proto__ = proto;
            return O;
        };
    }() : undefined);
    var $$I = _export;
    var call$b = functionCall;
    var FunctionName = functionName;
    var createIteratorConstructor = iteratorCreateConstructor;
    var getPrototypeOf$6 = objectGetPrototypeOf;
    var setToStringTag$2 = setToStringTag$7;
    var defineBuiltIn$2 = defineBuiltIn$6;
    var wellKnownSymbol$b = wellKnownSymbol$n;
    var Iterators$4 = iterators;
    var IteratorsCore = iteratorsCore;
    var PROPER_FUNCTION_NAME = FunctionName.PROPER;
    FunctionName.CONFIGURABLE;
    IteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR$3 = wellKnownSymbol$b("iterator");
    var KEYS = "keys";
    var VALUES = "values";
    var ENTRIES = "entries";
    var returnThis = function() {
        return this;
    };
    var iteratorDefine = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);
        var getIterationMethod = function(KIND) {
            if (KIND === DEFAULT && defaultIterator) return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS && KIND && KIND in IterablePrototype) return IterablePrototype[KIND];
            switch(KIND){
                case KEYS:
                    return function keys() {
                        return new IteratorConstructor(this, KIND);
                    };
                case VALUES:
                    return function values() {
                        return new IteratorConstructor(this, KIND);
                    };
                case ENTRIES:
                    return function entries() {
                        return new IteratorConstructor(this, KIND);
                    };
            }
            return function() {
                return new IteratorConstructor(this);
            };
        };
        var TO_STRING_TAG = NAME + " Iterator";
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR$3] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME === "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY;
        // fix native
        if (anyNativeIterator) {
            CurrentIteratorPrototype = getPrototypeOf$6(anyNativeIterator.call(new Iterable()));
            if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                // Set @@toStringTag to native iterators
                setToStringTag$2(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                Iterators$4[TO_STRING_TAG] = returnThis;
            }
        }
        // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
        if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
                return call$b(nativeIterator, this);
            };
        }
        // export additional methods
        if (DEFAULT) {
            methods = {
                values: getIterationMethod(VALUES),
                keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                entries: getIterationMethod(ENTRIES)
            };
            if (FORCED) {
                for(KEY in methods)if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) defineBuiltIn$2(IterablePrototype, KEY, methods[KEY]);
            } else $$I({
                target: NAME,
                proto: true,
                forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
            }, methods);
        }
        // define iterator
        if (FORCED && IterablePrototype[ITERATOR$3] !== defaultIterator) defineBuiltIn$2(IterablePrototype, ITERATOR$3, defaultIterator, {
            name: DEFAULT
        });
        Iterators$4[NAME] = defaultIterator;
        return methods;
    };
    // `CreateIterResultObject` abstract operation
    // https://tc39.es/ecma262/#sec-createiterresultobject
    var createIterResultObject$3 = function(value, done) {
        return {
            value: value,
            done: done
        };
    };
    var toIndexedObject$3 = toIndexedObject$a;
    var Iterators$3 = iterators;
    var InternalStateModule$4 = internalState;
    objectDefineProperty.f;
    var defineIterator$2 = iteratorDefine;
    var createIterResultObject$2 = createIterResultObject$3;
    var ARRAY_ITERATOR = "Array Iterator";
    var setInternalState$4 = InternalStateModule$4.set;
    var getInternalState$1 = InternalStateModule$4.getterFor(ARRAY_ITERATOR);
    // `Array.prototype.entries` method
    // https://tc39.es/ecma262/#sec-array.prototype.entries
    // `Array.prototype.keys` method
    // https://tc39.es/ecma262/#sec-array.prototype.keys
    // `Array.prototype.values` method
    // https://tc39.es/ecma262/#sec-array.prototype.values
    // `Array.prototype[@@iterator]` method
    // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
    // `CreateArrayIterator` internal method
    // https://tc39.es/ecma262/#sec-createarrayiterator
    defineIterator$2(Array, "Array", function(iterated, kind) {
        setInternalState$4(this, {
            type: ARRAY_ITERATOR,
            target: toIndexedObject$3(iterated),
            index: 0,
            kind: kind // kind
        });
    // `%ArrayIteratorPrototype%.next` method
    // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
    }, function() {
        var state = getInternalState$1(this);
        var target = state.target;
        var index = state.index++;
        if (!target || index >= target.length) {
            state.target = undefined;
            return createIterResultObject$2(undefined, true);
        }
        switch(state.kind){
            case "keys":
                return createIterResultObject$2(index, false);
            case "values":
                return createIterResultObject$2(target[index], false);
        }
        return createIterResultObject$2([
            index,
            target[index]
        ], false);
    }, "values");
    // argumentsList[@@iterator] is %ArrayProto_values%
    // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
    // https://tc39.es/ecma262/#sec-createmappedargumentsobject
    Iterators$3.Arguments = Iterators$3.Array;
    // iterable DOM collections
    // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
    var domIterables = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    };
    var DOMIterables$4 = domIterables;
    var global$c = global$p;
    var classof$7 = classof$d;
    var createNonEnumerableProperty$4 = createNonEnumerableProperty$9;
    var Iterators$2 = iterators;
    var wellKnownSymbol$a = wellKnownSymbol$n;
    var TO_STRING_TAG$1 = wellKnownSymbol$a("toStringTag");
    for(var COLLECTION_NAME in DOMIterables$4){
        var Collection = global$c[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype;
        if (CollectionPrototype && classof$7(CollectionPrototype) !== TO_STRING_TAG$1) createNonEnumerableProperty$4(CollectionPrototype, TO_STRING_TAG$1, COLLECTION_NAME);
        Iterators$2[COLLECTION_NAME] = Iterators$2.Array;
    }
    var parent$15 = symbol$5;
    var symbol$4 = parent$15;
    var wellKnownSymbol$9 = wellKnownSymbol$n;
    var defineProperty$4 = objectDefineProperty.f;
    var METADATA$1 = wellKnownSymbol$9("metadata");
    var FunctionPrototype$1 = Function.prototype;
    // Function.prototype[@@metadata]
    // https://github.com/tc39/proposal-decorator-metadata
    if (FunctionPrototype$1[METADATA$1] === undefined) defineProperty$4(FunctionPrototype$1, METADATA$1, {
        value: null
    });
    var defineWellKnownSymbol$7 = wellKnownSymbolDefine;
    // `Symbol.asyncDispose` well-known symbol
    // https://github.com/tc39/proposal-async-explicit-resource-management
    defineWellKnownSymbol$7("asyncDispose");
    var defineWellKnownSymbol$6 = wellKnownSymbolDefine;
    // `Symbol.dispose` well-known symbol
    // https://github.com/tc39/proposal-explicit-resource-management
    defineWellKnownSymbol$6("dispose");
    var defineWellKnownSymbol$5 = wellKnownSymbolDefine;
    // `Symbol.metadata` well-known symbol
    // https://github.com/tc39/proposal-decorators
    defineWellKnownSymbol$5("metadata");
    var parent$14 = symbol$4;
    var symbol$3 = parent$14;
    var getBuiltIn$7 = getBuiltIn$f;
    var uncurryThis$9 = functionUncurryThis;
    var Symbol$2 = getBuiltIn$7("Symbol");
    var keyFor = Symbol$2.keyFor;
    var thisSymbolValue$1 = uncurryThis$9(Symbol$2.prototype.valueOf);
    // `Symbol.isRegisteredSymbol` method
    // https://tc39.es/proposal-symbol-predicates/#sec-symbol-isregisteredsymbol
    var symbolIsRegistered = Symbol$2.isRegisteredSymbol || function isRegisteredSymbol(value) {
        try {
            return keyFor(thisSymbolValue$1(value)) !== undefined;
        } catch (error) {
            return false;
        }
    };
    var $$H = _export;
    var isRegisteredSymbol$1 = symbolIsRegistered;
    // `Symbol.isRegisteredSymbol` method
    // https://tc39.es/proposal-symbol-predicates/#sec-symbol-isregisteredsymbol
    $$H({
        target: "Symbol",
        stat: true
    }, {
        isRegisteredSymbol: isRegisteredSymbol$1
    });
    var shared = sharedExports;
    var getBuiltIn$6 = getBuiltIn$f;
    var uncurryThis$8 = functionUncurryThis;
    var isSymbol = isSymbol$5;
    var wellKnownSymbol$8 = wellKnownSymbol$n;
    var Symbol$1 = getBuiltIn$6("Symbol");
    var $isWellKnownSymbol = Symbol$1.isWellKnownSymbol;
    var getOwnPropertyNames = getBuiltIn$6("Object", "getOwnPropertyNames");
    var thisSymbolValue = uncurryThis$8(Symbol$1.prototype.valueOf);
    var WellKnownSymbolsStore = shared("wks");
    for(var i = 0, symbolKeys = getOwnPropertyNames(Symbol$1), symbolKeysLength = symbolKeys.length; i < symbolKeysLength; i++)// some old engines throws on access to some keys like `arguments` or `caller`
    try {
        var symbolKey = symbolKeys[i];
        if (isSymbol(Symbol$1[symbolKey])) wellKnownSymbol$8(symbolKey);
    } catch (error) {}
    // `Symbol.isWellKnownSymbol` method
    // https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknownsymbol
    // We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected
    var symbolIsWellKnown = function isWellKnownSymbol(value) {
        if ($isWellKnownSymbol && $isWellKnownSymbol(value)) return true;
        try {
            var symbol = thisSymbolValue(value);
            for(var j = 0, keys = getOwnPropertyNames(WellKnownSymbolsStore), keysLength = keys.length; j < keysLength; j++){
                // eslint-disable-next-line eqeqeq -- polyfilled symbols case
                if (WellKnownSymbolsStore[keys[j]] == symbol) return true;
            }
        } catch (error) {}
        return false;
    };
    var $$G = _export;
    var isWellKnownSymbol$1 = symbolIsWellKnown;
    // `Symbol.isWellKnownSymbol` method
    // https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknownsymbol
    // We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected
    $$G({
        target: "Symbol",
        stat: true,
        forced: true
    }, {
        isWellKnownSymbol: isWellKnownSymbol$1
    });
    var defineWellKnownSymbol$4 = wellKnownSymbolDefine;
    // `Symbol.matcher` well-known symbol
    // https://github.com/tc39/proposal-pattern-matching
    defineWellKnownSymbol$4("matcher");
    var defineWellKnownSymbol$3 = wellKnownSymbolDefine;
    // `Symbol.observable` well-known symbol
    // https://github.com/tc39/proposal-observable
    defineWellKnownSymbol$3("observable");
    var $$F = _export;
    var isRegisteredSymbol = symbolIsRegistered;
    // `Symbol.isRegistered` method
    // obsolete version of https://tc39.es/proposal-symbol-predicates/#sec-symbol-isregisteredsymbol
    $$F({
        target: "Symbol",
        stat: true,
        name: "isRegisteredSymbol"
    }, {
        isRegistered: isRegisteredSymbol
    });
    var $$E = _export;
    var isWellKnownSymbol = symbolIsWellKnown;
    // `Symbol.isWellKnown` method
    // obsolete version of https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknownsymbol
    // We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected
    $$E({
        target: "Symbol",
        stat: true,
        name: "isWellKnownSymbol",
        forced: true
    }, {
        isWellKnown: isWellKnownSymbol
    });
    // TODO: Remove from `core-js@4`
    var defineWellKnownSymbol$2 = wellKnownSymbolDefine;
    // `Symbol.metadataKey` well-known symbol
    // https://github.com/tc39/proposal-decorator-metadata
    defineWellKnownSymbol$2("metadataKey");
    // TODO: remove from `core-js@4`
    var defineWellKnownSymbol$1 = wellKnownSymbolDefine;
    // `Symbol.patternMatch` well-known symbol
    // https://github.com/tc39/proposal-pattern-matching
    defineWellKnownSymbol$1("patternMatch");
    // TODO: remove from `core-js@4`
    var defineWellKnownSymbol = wellKnownSymbolDefine;
    defineWellKnownSymbol("replaceAll");
    var parent$13 = symbol$3;
    // TODO: Remove from `core-js@4`
    var symbol$2 = parent$13;
    var symbol$1 = symbol$2;
    var _Symbol$1 = /*@__PURE__*/ getDefaultExportFromCjs(symbol$1);
    var uncurryThis$7 = functionUncurryThis;
    var toIntegerOrInfinity$1 = toIntegerOrInfinity$4;
    var toString$3 = toString$7;
    var requireObjectCoercible = requireObjectCoercible$3;
    var charAt$1 = uncurryThis$7("".charAt);
    var charCodeAt = uncurryThis$7("".charCodeAt);
    var stringSlice = uncurryThis$7("".slice);
    var createMethod$1 = function(CONVERT_TO_STRING) {
        return function($this, pos) {
            var S = toString$3(requireObjectCoercible($this));
            var position = toIntegerOrInfinity$1(pos);
            var size = S.length;
            var first, second;
            if (position < 0 || position >= size) return CONVERT_TO_STRING ? "" : undefined;
            first = charCodeAt(S, position);
            return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? charAt$1(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
        };
    };
    var stringMultibyte = {
        // `String.prototype.codePointAt` method
        // https://tc39.es/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod$1(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod$1(true)
    };
    var charAt = stringMultibyte.charAt;
    var toString$2 = toString$7;
    var InternalStateModule$3 = internalState;
    var defineIterator$1 = iteratorDefine;
    var createIterResultObject$1 = createIterResultObject$3;
    var STRING_ITERATOR = "String Iterator";
    var setInternalState$3 = InternalStateModule$3.set;
    var getInternalState = InternalStateModule$3.getterFor(STRING_ITERATOR);
    // `String.prototype[@@iterator]` method
    // https://tc39.es/ecma262/#sec-string.prototype-@@iterator
    defineIterator$1(String, "String", function(iterated) {
        setInternalState$3(this, {
            type: STRING_ITERATOR,
            string: toString$2(iterated),
            index: 0
        });
    // `%StringIteratorPrototype%.next` method
    // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
    }, function next() {
        var state = getInternalState(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return createIterResultObject$1(undefined, true);
        point = charAt(string, index);
        state.index += point.length;
        return createIterResultObject$1(point, false);
    });
    var WrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
    var iterator$5 = WrappedWellKnownSymbolModule$1.f("iterator");
    var parent$12 = iterator$5;
    var iterator$4 = parent$12;
    var parent$11 = iterator$4;
    var iterator$3 = parent$11;
    var parent$10 = iterator$3;
    var iterator$2 = parent$10;
    var iterator$1 = iterator$2;
    var _Symbol$iterator$1 = /*@__PURE__*/ getDefaultExportFromCjs(iterator$1);
    function _typeof$1(o) {
        "@babel/helpers - typeof";
        return _typeof$1 = "function" == typeof _Symbol$1 && "symbol" == typeof _Symbol$iterator$1 ? function(o) {
            return typeof o;
        } : function(o) {
            return o && "function" == typeof _Symbol$1 && o.constructor === _Symbol$1 && o !== _Symbol$1.prototype ? "symbol" : typeof o;
        }, _typeof$1(o);
    }
    var WrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
    var toPrimitive$4 = WrappedWellKnownSymbolModule.f("toPrimitive");
    var parent$$ = toPrimitive$4;
    var toPrimitive$3 = parent$$;
    var parent$_ = toPrimitive$3;
    var toPrimitive$2 = parent$_;
    var parent$Z = toPrimitive$2;
    var toPrimitive$1 = parent$Z;
    var toPrimitive = toPrimitive$1;
    var _Symbol$toPrimitive = /*@__PURE__*/ getDefaultExportFromCjs(toPrimitive);
    function _toPrimitive(input, hint) {
        if (_typeof$1(input) !== "object" || input === null) return input;
        var prim = input[_Symbol$toPrimitive];
        if (prim !== undefined) {
            var res = prim.call(input, hint || "default");
            if (_typeof$1(res) !== "object") return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
    }
    function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return _typeof$1(key) === "symbol" ? key : String(key);
    }
    function _defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            _Object$defineProperty$1(target, _toPropertyKey(descriptor.key), descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        _Object$defineProperty$1(Constructor, "prototype", {
            writable: false
        });
        return Constructor;
    }
    function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) _Object$defineProperty$1(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        else obj[key] = value;
        return obj;
    }
    var uncurryThis$6 = functionUncurryThis;
    var aCallable$a = aCallable$e;
    var isObject$8 = isObject$h;
    var hasOwn$7 = hasOwnProperty_1;
    var arraySlice$3 = arraySlice$5;
    var NATIVE_BIND = functionBindNative;
    var $Function = Function;
    var concat$6 = uncurryThis$6([].concat);
    var join = uncurryThis$6([].join);
    var factories = {};
    var construct$3 = function(C, argsLength, args) {
        if (!hasOwn$7(factories, argsLength)) {
            var list = [];
            var i = 0;
            for(; i < argsLength; i++)list[i] = "a[" + i + "]";
            factories[argsLength] = $Function("C,a", "return new C(" + join(list, ",") + ")");
        }
        return factories[argsLength](C, args);
    };
    // `Function.prototype.bind` method implementation
    // https://tc39.es/ecma262/#sec-function.prototype.bind
    // eslint-disable-next-line es/no-function-prototype-bind -- detection
    var functionBind = NATIVE_BIND ? $Function.bind : function bind(that /* , ...args */ ) {
        var F = aCallable$a(this);
        var Prototype = F.prototype;
        var partArgs = arraySlice$3(arguments, 1);
        var boundFunction = function bound() {
            var args = concat$6(partArgs, arraySlice$3(arguments));
            return this instanceof boundFunction ? construct$3(F, args.length, args) : F.apply(that, args);
        };
        if (isObject$8(Prototype)) boundFunction.prototype = Prototype;
        return boundFunction;
    };
    // TODO: Remove from `core-js@4`
    var $$D = _export;
    var bind$f = functionBind;
    // `Function.prototype.bind` method
    // https://tc39.es/ecma262/#sec-function.prototype.bind
    // eslint-disable-next-line es/no-function-prototype-bind -- detection
    $$D({
        target: "Function",
        proto: true,
        forced: Function.bind !== bind$f
    }, {
        bind: bind$f
    });
    var global$b = global$p;
    var path$i = path$o;
    var getBuiltInPrototypeMethod$g = function(CONSTRUCTOR, METHOD) {
        var Namespace = path$i[CONSTRUCTOR + "Prototype"];
        var pureMethod = Namespace && Namespace[METHOD];
        if (pureMethod) return pureMethod;
        var NativeConstructor = global$b[CONSTRUCTOR];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        return NativePrototype && NativePrototype[METHOD];
    };
    var getBuiltInPrototypeMethod$f = getBuiltInPrototypeMethod$g;
    var bind$e = getBuiltInPrototypeMethod$f("Function", "bind");
    var isPrototypeOf$i = objectIsPrototypeOf;
    var method$f = bind$e;
    var FunctionPrototype = Function.prototype;
    var bind$d = function(it) {
        var own = it.bind;
        return it === FunctionPrototype || isPrototypeOf$i(FunctionPrototype, it) && own === FunctionPrototype.bind ? method$f : own;
    };
    var parent$Y = bind$d;
    var bind$c = parent$Y;
    var bind$b = bind$c;
    var _bindInstanceProperty$1 = /*@__PURE__*/ getDefaultExportFromCjs(bind$b);
    var aCallable$9 = aCallable$e;
    var toObject$8 = toObject$e;
    var IndexedObject$1 = indexedObject;
    var lengthOfArrayLike$8 = lengthOfArrayLike$d;
    var $TypeError$8 = TypeError;
    // `Array.prototype.{ reduce, reduceRight }` methods implementation
    var createMethod = function(IS_RIGHT) {
        return function(that, callbackfn, argumentsLength, memo) {
            aCallable$9(callbackfn);
            var O = toObject$8(that);
            var self1 = IndexedObject$1(O);
            var length = lengthOfArrayLike$8(O);
            var index = IS_RIGHT ? length - 1 : 0;
            var i = IS_RIGHT ? -1 : 1;
            if (argumentsLength < 2) while(true){
                if (index in self1) {
                    memo = self1[index];
                    index += i;
                    break;
                }
                index += i;
                if (IS_RIGHT ? index < 0 : length <= index) throw new $TypeError$8("Reduce of empty array with no initial value");
            }
            for(; IS_RIGHT ? index >= 0 : length > index; index += i)if (index in self1) memo = callbackfn(memo, self1[index], index, O);
            return memo;
        };
    };
    var arrayReduce = {
        // `Array.prototype.reduce` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduce
        left: createMethod(false),
        // `Array.prototype.reduceRight` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduceright
        right: createMethod(true)
    };
    var fails$e = fails$u;
    var arrayMethodIsStrict$4 = function(METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails$e(function() {
            // eslint-disable-next-line no-useless-call -- required for testing
            method.call(null, argument || function() {
                return 1;
            }, 1);
        });
    };
    var global$a = global$p;
    var classof$6 = classofRaw$2;
    var engineIsNode = classof$6(global$a.process) === "process";
    var $$C = _export;
    var $reduce = arrayReduce.left;
    var arrayMethodIsStrict$3 = arrayMethodIsStrict$4;
    var CHROME_VERSION = engineV8Version;
    var IS_NODE$4 = engineIsNode;
    // Chrome 80-82 has a critical bug
    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
    var CHROME_BUG = !IS_NODE$4 && CHROME_VERSION > 79 && CHROME_VERSION < 83;
    var FORCED$4 = CHROME_BUG || !arrayMethodIsStrict$3("reduce");
    // `Array.prototype.reduce` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduce
    $$C({
        target: "Array",
        proto: true,
        forced: FORCED$4
    }, {
        reduce: function reduce(callbackfn /* , initialValue */ ) {
            var length = arguments.length;
            return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
        }
    });
    var getBuiltInPrototypeMethod$e = getBuiltInPrototypeMethod$g;
    var reduce$3 = getBuiltInPrototypeMethod$e("Array", "reduce");
    var isPrototypeOf$h = objectIsPrototypeOf;
    var method$e = reduce$3;
    var ArrayPrototype$f = Array.prototype;
    var reduce$2 = function(it) {
        var own = it.reduce;
        return it === ArrayPrototype$f || isPrototypeOf$h(ArrayPrototype$f, it) && own === ArrayPrototype$f.reduce ? method$e : own;
    };
    var parent$X = reduce$2;
    var reduce$1 = parent$X;
    var reduce = reduce$1;
    var _reduceInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(reduce);
    var $$B = _export;
    var $filter = arrayIteration.filter;
    var arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;
    var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$3("filter");
    // `Array.prototype.filter` method
    // https://tc39.es/ecma262/#sec-array.prototype.filter
    // with adding support of @@species
    $$B({
        target: "Array",
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$3
    }, {
        filter: function filter(callbackfn /* , thisArg */ ) {
            return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var getBuiltInPrototypeMethod$d = getBuiltInPrototypeMethod$g;
    var filter$3 = getBuiltInPrototypeMethod$d("Array", "filter");
    var isPrototypeOf$g = objectIsPrototypeOf;
    var method$d = filter$3;
    var ArrayPrototype$e = Array.prototype;
    var filter$2 = function(it) {
        var own = it.filter;
        return it === ArrayPrototype$e || isPrototypeOf$g(ArrayPrototype$e, it) && own === ArrayPrototype$e.filter ? method$d : own;
    };
    var parent$W = filter$2;
    var filter$1 = parent$W;
    var filter = filter$1;
    var _filterInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(filter);
    var $$A = _export;
    var $map = arrayIteration.map;
    var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;
    var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$2("map");
    // `Array.prototype.map` method
    // https://tc39.es/ecma262/#sec-array.prototype.map
    // with adding support of @@species
    $$A({
        target: "Array",
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$2
    }, {
        map: function map(callbackfn /* , thisArg */ ) {
            return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var getBuiltInPrototypeMethod$c = getBuiltInPrototypeMethod$g;
    var map$6 = getBuiltInPrototypeMethod$c("Array", "map");
    var isPrototypeOf$f = objectIsPrototypeOf;
    var method$c = map$6;
    var ArrayPrototype$d = Array.prototype;
    var map$5 = function(it) {
        var own = it.map;
        return it === ArrayPrototype$d || isPrototypeOf$f(ArrayPrototype$d, it) && own === ArrayPrototype$d.map ? method$c : own;
    };
    var parent$V = map$5;
    var map$4 = parent$V;
    var map$3 = map$4;
    var _mapInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(map$3);
    var isArray$a = isArray$e;
    var lengthOfArrayLike$7 = lengthOfArrayLike$d;
    var doesNotExceedSafeInteger$2 = doesNotExceedSafeInteger$4;
    var bind$a = functionBindContext;
    // `FlattenIntoArray` abstract operation
    // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
    var flattenIntoArray$1 = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? bind$a(mapper, thisArg) : false;
        var element, elementLen;
        while(sourceIndex < sourceLen){
            if (sourceIndex in source) {
                element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
                if (depth > 0 && isArray$a(element)) {
                    elementLen = lengthOfArrayLike$7(element);
                    targetIndex = flattenIntoArray$1(target, original, element, elementLen, targetIndex, depth - 1) - 1;
                } else {
                    doesNotExceedSafeInteger$2(targetIndex + 1);
                    target[targetIndex] = element;
                }
                targetIndex++;
            }
            sourceIndex++;
        }
        return targetIndex;
    };
    var flattenIntoArray_1 = flattenIntoArray$1;
    var $$z = _export;
    var flattenIntoArray = flattenIntoArray_1;
    var aCallable$8 = aCallable$e;
    var toObject$7 = toObject$e;
    var lengthOfArrayLike$6 = lengthOfArrayLike$d;
    var arraySpeciesCreate$1 = arraySpeciesCreate$4;
    // `Array.prototype.flatMap` method
    // https://tc39.es/ecma262/#sec-array.prototype.flatmap
    $$z({
        target: "Array",
        proto: true
    }, {
        flatMap: function flatMap(callbackfn /* , thisArg */ ) {
            var O = toObject$7(this);
            var sourceLen = lengthOfArrayLike$6(O);
            var A;
            aCallable$8(callbackfn);
            A = arraySpeciesCreate$1(O, 0);
            A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
            return A;
        }
    });
    var getBuiltInPrototypeMethod$b = getBuiltInPrototypeMethod$g;
    var flatMap$3 = getBuiltInPrototypeMethod$b("Array", "flatMap");
    var isPrototypeOf$e = objectIsPrototypeOf;
    var method$b = flatMap$3;
    var ArrayPrototype$c = Array.prototype;
    var flatMap$2 = function(it) {
        var own = it.flatMap;
        return it === ArrayPrototype$c || isPrototypeOf$e(ArrayPrototype$c, it) && own === ArrayPrototype$c.flatMap ? method$b : own;
    };
    var parent$U = flatMap$2;
    var flatMap$1 = parent$U;
    var flatMap = flatMap$1;
    var _flatMapInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(flatMap);
    /**
   * Create new data pipe.
   *
   * @param from - The source data set or data view.
   * @remarks
   * Example usage:
   * ```typescript
   * interface AppItem {
   *   whoami: string;
   *   appData: unknown;
   *   visData: VisItem;
   * }
   * interface VisItem {
   *   id: number;
   *   label: string;
   *   color: string;
   *   x: number;
   *   y: number;
   * }
   *
   * const ds1 = new DataSet<AppItem, "whoami">([], { fieldId: "whoami" });
   * const ds2 = new DataSet<VisItem, "id">();
   *
   * const pipe = createNewDataPipeFrom(ds1)
   *   .filter((item): boolean => item.enabled === true)
   *   .map<VisItem, "id">((item): VisItem => item.visData)
   *   .to(ds2);
   *
   * pipe.start();
   * ```
   * @returns A factory whose methods can be used to configure the pipe.
   */ function createNewDataPipeFrom(from) {
        return new DataPipeUnderConstruction(from);
    }
    /**
   * Internal implementation of the pipe. This should be accessible only through
   * `createNewDataPipeFrom` from the outside.
   *
   * @typeParam SI - Source item type.
   * @typeParam SP - Source item type's id property name.
   * @typeParam TI - Target item type.
   * @typeParam TP - Target item type's id property name.
   */ var SimpleDataPipe = /*#__PURE__*/ function() {
        /**
     * Create a new data pipe.
     *
     * @param _source - The data set or data view that will be observed.
     * @param _transformers - An array of transforming functions to be used to
     * filter or transform the items in the pipe.
     * @param _target - The data set or data view that will receive the items.
     */ function SimpleDataPipe(_source, _transformers, _target) {
            var _context, _context2, _context3;
            _classCallCheck(this, SimpleDataPipe);
            /**
       * Bound listeners for use with `DataInterface['on' | 'off']`.
       */ _defineProperty(this, "_listeners", {
                add: _bindInstanceProperty$1(_context = this._add).call(_context, this),
                remove: _bindInstanceProperty$1(_context2 = this._remove).call(_context2, this),
                update: _bindInstanceProperty$1(_context3 = this._update).call(_context3, this)
            });
            this._source = _source;
            this._transformers = _transformers;
            this._target = _target;
        }
        /** @inheritDoc */ _createClass(SimpleDataPipe, [
            {
                key: "all",
                value: function all() {
                    this._target.update(this._transformItems(this._source.get()));
                    return this;
                }
            },
            {
                key: "start",
                value: function start() {
                    this._source.on("add", this._listeners.add);
                    this._source.on("remove", this._listeners.remove);
                    this._source.on("update", this._listeners.update);
                    return this;
                }
            },
            {
                key: "stop",
                value: function stop() {
                    this._source.off("add", this._listeners.add);
                    this._source.off("remove", this._listeners.remove);
                    this._source.off("update", this._listeners.update);
                    return this;
                }
            },
            {
                key: "_transformItems",
                value: function _transformItems(items) {
                    var _context4;
                    return _reduceInstanceProperty(_context4 = this._transformers).call(_context4, function(items, transform) {
                        return transform(items);
                    }, items);
                }
            },
            {
                key: "_add",
                value: function _add(_name, payload) {
                    if (payload == null) return;
                    this._target.add(this._transformItems(this._source.get(payload.items)));
                }
            },
            {
                key: "_update",
                value: function _update(_name, payload) {
                    if (payload == null) return;
                    this._target.update(this._transformItems(this._source.get(payload.items)));
                }
            },
            {
                key: "_remove",
                value: function _remove(_name, payload) {
                    if (payload == null) return;
                    this._target.remove(this._transformItems(payload.oldData));
                }
            }
        ]);
        return SimpleDataPipe;
    }();
    /**
   * Internal implementation of the pipe factory. This should be accessible
   * only through `createNewDataPipeFrom` from the outside.
   *
   * @typeParam TI - Target item type.
   * @typeParam TP - Target item type's id property name.
   */ var DataPipeUnderConstruction = /*#__PURE__*/ function() {
        /**
     * Create a new data pipe factory. This is an internal constructor that
     * should never be called from outside of this file.
     *
     * @param _source - The source data set or data view for this pipe.
     */ function DataPipeUnderConstruction(_source) {
            _classCallCheck(this, DataPipeUnderConstruction);
            /**
       * Array transformers used to transform items within the pipe. This is typed
       * as any for the sake of simplicity.
       */ _defineProperty(this, "_transformers", []);
            this._source = _source;
        }
        /**
     * Filter the items.
     *
     * @param callback - A filtering function that returns true if given item
     * should be piped and false if not.
     * @returns This factory for further configuration.
     */ _createClass(DataPipeUnderConstruction, [
            {
                key: "filter",
                value: function filter(callback) {
                    this._transformers.push(function(input) {
                        return _filterInstanceProperty(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "map",
                value: function map(callback) {
                    this._transformers.push(function(input) {
                        return _mapInstanceProperty(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "flatMap",
                value: function flatMap(callback) {
                    this._transformers.push(function(input) {
                        return _flatMapInstanceProperty(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "to",
                value: function to(target) {
                    return new SimpleDataPipe(this._source, this._transformers, target);
                }
            }
        ]);
        return DataPipeUnderConstruction;
    }();
    var call$a = functionCall;
    var anObject$7 = anObject$d;
    var getMethod$1 = getMethod$3;
    var iteratorClose$2 = function(iterator, kind, value) {
        var innerResult, innerError;
        anObject$7(iterator);
        try {
            innerResult = getMethod$1(iterator, "return");
            if (!innerResult) {
                if (kind === "throw") throw value;
                return value;
            }
            innerResult = call$a(innerResult, iterator);
        } catch (error) {
            innerError = true;
            innerResult = error;
        }
        if (kind === "throw") throw value;
        if (innerError) throw innerResult;
        anObject$7(innerResult);
        return value;
    };
    var anObject$6 = anObject$d;
    var iteratorClose$1 = iteratorClose$2;
    // call something on iterator step with safe closing on error
    var callWithSafeIterationClosing$1 = function(iterator, fn, value, ENTRIES) {
        try {
            return ENTRIES ? fn(anObject$6(value)[0], value[1]) : fn(value);
        } catch (error) {
            iteratorClose$1(iterator, "throw", error);
        }
    };
    var wellKnownSymbol$7 = wellKnownSymbol$n;
    var Iterators$1 = iterators;
    var ITERATOR$2 = wellKnownSymbol$7("iterator");
    var ArrayPrototype$b = Array.prototype;
    // check on default Array iterator
    var isArrayIteratorMethod$2 = function(it) {
        return it !== undefined && (Iterators$1.Array === it || ArrayPrototype$b[ITERATOR$2] === it);
    };
    var classof$5 = classof$d;
    var getMethod = getMethod$3;
    var isNullOrUndefined$3 = isNullOrUndefined$6;
    var Iterators = iterators;
    var wellKnownSymbol$6 = wellKnownSymbol$n;
    var ITERATOR$1 = wellKnownSymbol$6("iterator");
    var getIteratorMethod$9 = function(it) {
        if (!isNullOrUndefined$3(it)) return getMethod(it, ITERATOR$1) || getMethod(it, "@@iterator") || Iterators[classof$5(it)];
    };
    var call$9 = functionCall;
    var aCallable$7 = aCallable$e;
    var anObject$5 = anObject$d;
    var tryToString$3 = tryToString$6;
    var getIteratorMethod$8 = getIteratorMethod$9;
    var $TypeError$7 = TypeError;
    var getIterator$8 = function(argument, usingIterator) {
        var iteratorMethod = arguments.length < 2 ? getIteratorMethod$8(argument) : usingIterator;
        if (aCallable$7(iteratorMethod)) return anObject$5(call$9(iteratorMethod, argument));
        throw new $TypeError$7(tryToString$3(argument) + " is not iterable");
    };
    var bind$9 = functionBindContext;
    var call$8 = functionCall;
    var toObject$6 = toObject$e;
    var callWithSafeIterationClosing = callWithSafeIterationClosing$1;
    var isArrayIteratorMethod$1 = isArrayIteratorMethod$2;
    var isConstructor$2 = isConstructor$4;
    var lengthOfArrayLike$5 = lengthOfArrayLike$d;
    var createProperty$3 = createProperty$6;
    var getIterator$7 = getIterator$8;
    var getIteratorMethod$7 = getIteratorMethod$9;
    var $Array$1 = Array;
    // `Array.from` method implementation
    // https://tc39.es/ecma262/#sec-array.from
    var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */ ) {
        var O = toObject$6(arrayLike);
        var IS_CONSTRUCTOR = isConstructor$2(this);
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        if (mapping) mapfn = bind$9(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
        var iteratorMethod = getIteratorMethod$7(O);
        var index = 0;
        var length, result, step, iterator, next, value;
        // if the target is not iterable or it's an array with the default iterator - use a simple case
        if (iteratorMethod && !(this === $Array$1 && isArrayIteratorMethod$1(iteratorMethod))) {
            iterator = getIterator$7(O, iteratorMethod);
            next = iterator.next;
            result = IS_CONSTRUCTOR ? new this() : [];
            for(; !(step = call$8(next, iterator)).done; index++){
                value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [
                    step.value,
                    index
                ], true) : step.value;
                createProperty$3(result, index, value);
            }
        } else {
            length = lengthOfArrayLike$5(O);
            result = IS_CONSTRUCTOR ? new this(length) : $Array$1(length);
            for(; length > index; index++){
                value = mapping ? mapfn(O[index], index) : O[index];
                createProperty$3(result, index, value);
            }
        }
        result.length = index;
        return result;
    };
    var wellKnownSymbol$5 = wellKnownSymbol$n;
    var ITERATOR = wellKnownSymbol$5("iterator");
    var SAFE_CLOSING = false;
    try {
        var called = 0;
        var iteratorWithReturn = {
            next: function() {
                return {
                    done: !!called++
                };
            },
            "return": function() {
                SAFE_CLOSING = true;
            }
        };
        iteratorWithReturn[ITERATOR] = function() {
            return this;
        };
        // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
        Array.from(iteratorWithReturn, function() {
            throw 2;
        });
    } catch (error) {}
    var checkCorrectnessOfIteration$2 = function(exec, SKIP_CLOSING) {
        try {
            if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
        } catch (error) {
            return false;
        } // workaround of old WebKit + `eval` bug
        var ITERATION_SUPPORT = false;
        try {
            var object = {};
            object[ITERATOR] = function() {
                return {
                    next: function() {
                        return {
                            done: ITERATION_SUPPORT = true
                        };
                    }
                };
            };
            exec(object);
        } catch (error) {}
        return ITERATION_SUPPORT;
    };
    var $$y = _export;
    var from$6 = arrayFrom;
    var checkCorrectnessOfIteration$1 = checkCorrectnessOfIteration$2;
    var INCORRECT_ITERATION = !checkCorrectnessOfIteration$1(function(iterable) {
        // eslint-disable-next-line es/no-array-from -- required for testing
        Array.from(iterable);
    });
    // `Array.from` method
    // https://tc39.es/ecma262/#sec-array.from
    $$y({
        target: "Array",
        stat: true,
        forced: INCORRECT_ITERATION
    }, {
        from: from$6
    });
    var path$h = path$o;
    var from$5 = path$h.Array.from;
    var parent$T = from$5;
    var from$4 = parent$T;
    var from$3 = from$4;
    var _Array$from$1 = /*@__PURE__*/ getDefaultExportFromCjs(from$3);
    var getIteratorMethod$6 = getIteratorMethod$9;
    var getIteratorMethod_1 = getIteratorMethod$6;
    var parent$S = getIteratorMethod_1;
    var getIteratorMethod$5 = parent$S;
    var parent$R = getIteratorMethod$5;
    var getIteratorMethod$4 = parent$R;
    var parent$Q = getIteratorMethod$4;
    var getIteratorMethod$3 = parent$Q;
    var getIteratorMethod$2 = getIteratorMethod$3;
    var _getIteratorMethod$1 = /*@__PURE__*/ getDefaultExportFromCjs(getIteratorMethod$2);
    var getIteratorMethod$1 = getIteratorMethod$2;
    var _getIteratorMethod = /*@__PURE__*/ getDefaultExportFromCjs(getIteratorMethod$1);
    var $$x = _export;
    var isArray$9 = isArray$e;
    // `Array.isArray` method
    // https://tc39.es/ecma262/#sec-array.isarray
    $$x({
        target: "Array",
        stat: true
    }, {
        isArray: isArray$9
    });
    var path$g = path$o;
    var isArray$8 = path$g.Array.isArray;
    var parent$P = isArray$8;
    var isArray$7 = parent$P;
    var parent$O = isArray$7;
    var isArray$6 = parent$O;
    var parent$N = isArray$6;
    var isArray$5 = parent$N;
    var isArray$4 = isArray$5;
    var _Array$isArray$1 = /*@__PURE__*/ getDefaultExportFromCjs(isArray$4);
    function _arrayWithHoles(arr) {
        if (_Array$isArray$1(arr)) return arr;
    }
    var DESCRIPTORS$8 = descriptors;
    var isArray$3 = isArray$e;
    var $TypeError$6 = TypeError;
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var getOwnPropertyDescriptor$5 = Object.getOwnPropertyDescriptor;
    // Safari < 13 does not throw an error in this case
    var SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS$8 && !function() {
        // makes no sense without proper strict mode support
        if (this !== undefined) return true;
        try {
            // eslint-disable-next-line es/no-object-defineproperty -- safe
            Object.defineProperty([], "length", {
                writable: false
            }).length = 1;
        } catch (error) {
            return error instanceof TypeError;
        }
    }();
    var arraySetLength = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function(O, length) {
        if (isArray$3(O) && !getOwnPropertyDescriptor$5(O, "length").writable) throw new $TypeError$6("Cannot set read only .length");
        return O.length = length;
    } : function(O, length) {
        return O.length = length;
    };
    var $$w = _export;
    var toObject$5 = toObject$e;
    var lengthOfArrayLike$4 = lengthOfArrayLike$d;
    var setArrayLength$1 = arraySetLength;
    var doesNotExceedSafeInteger$1 = doesNotExceedSafeInteger$4;
    var fails$d = fails$u;
    var INCORRECT_TO_LENGTH = fails$d(function() {
        return [].push.call({
            length: 0x100000000
        }, 1) !== 4294967297;
    });
    // V8 and Safari <= 15.4, FF < 23 throws InternalError
    // https://bugs.chromium.org/p/v8/issues/detail?id=12681
    var properErrorOnNonWritableLength = function() {
        try {
            // eslint-disable-next-line es/no-object-defineproperty -- safe
            Object.defineProperty([], "length", {
                writable: false
            }).push();
        } catch (error) {
            return error instanceof TypeError;
        }
    };
    var FORCED$3 = INCORRECT_TO_LENGTH || !properErrorOnNonWritableLength();
    // `Array.prototype.push` method
    // https://tc39.es/ecma262/#sec-array.prototype.push
    $$w({
        target: "Array",
        proto: true,
        arity: 1,
        forced: FORCED$3
    }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        push: function push(item) {
            var O = toObject$5(this);
            var len = lengthOfArrayLike$4(O);
            var argCount = arguments.length;
            doesNotExceedSafeInteger$1(len + argCount);
            for(var i = 0; i < argCount; i++){
                O[len] = arguments[i];
                len++;
            }
            setArrayLength$1(O, len);
            return len;
        }
    });
    var getBuiltInPrototypeMethod$a = getBuiltInPrototypeMethod$g;
    var push$8 = getBuiltInPrototypeMethod$a("Array", "push");
    var isPrototypeOf$d = objectIsPrototypeOf;
    var method$a = push$8;
    var ArrayPrototype$a = Array.prototype;
    var push$7 = function(it) {
        var own = it.push;
        return it === ArrayPrototype$a || isPrototypeOf$d(ArrayPrototype$a, it) && own === ArrayPrototype$a.push ? method$a : own;
    };
    var parent$M = push$7;
    var push$6 = parent$M;
    var parent$L = push$6;
    var push$5 = parent$L;
    var parent$K = push$5;
    var push$4 = parent$K;
    var push$3 = push$4;
    var _pushInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(push$3);
    function _iterableToArrayLimit(r, l) {
        var t = null == r ? null : "undefined" != typeof _Symbol$1 && _getIteratorMethod$1(r) || r["@@iterator"];
        if (null != t) {
            var e, n, i, u, a = [], f = !0, o = !1;
            try {
                if (i = (t = t.call(r)).next, 0 === l) {
                    if (Object(t) !== t) return;
                    f = !1;
                } else for(; !(f = (e = i.call(t)).done) && (_pushInstanceProperty(a).call(a, e.value), a.length !== l); f = !0);
            } catch (r) {
                o = !0, n = r;
            } finally{
                try {
                    if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
                } finally{
                    if (o) throw n;
                }
            }
            return a;
        }
    }
    var $$v = _export;
    var isArray$2 = isArray$e;
    var isConstructor$1 = isConstructor$4;
    var isObject$7 = isObject$h;
    var toAbsoluteIndex$1 = toAbsoluteIndex$4;
    var lengthOfArrayLike$3 = lengthOfArrayLike$d;
    var toIndexedObject$2 = toIndexedObject$a;
    var createProperty$2 = createProperty$6;
    var wellKnownSymbol$4 = wellKnownSymbol$n;
    var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;
    var nativeSlice = arraySlice$5;
    var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1("slice");
    var SPECIES$3 = wellKnownSymbol$4("species");
    var $Array = Array;
    var max$1 = Math.max;
    // `Array.prototype.slice` method
    // https://tc39.es/ecma262/#sec-array.prototype.slice
    // fallback for not array-like ES3 strings and DOM objects
    $$v({
        target: "Array",
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$1
    }, {
        slice: function slice(start, end) {
            var O = toIndexedObject$2(this);
            var length = lengthOfArrayLike$3(O);
            var k = toAbsoluteIndex$1(start, length);
            var fin = toAbsoluteIndex$1(end === undefined ? length : end, length);
            // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
            var Constructor, result, n;
            if (isArray$2(O)) {
                Constructor = O.constructor;
                // cross-realm fallback
                if (isConstructor$1(Constructor) && (Constructor === $Array || isArray$2(Constructor.prototype))) Constructor = undefined;
                else if (isObject$7(Constructor)) {
                    Constructor = Constructor[SPECIES$3];
                    if (Constructor === null) Constructor = undefined;
                }
                if (Constructor === $Array || Constructor === undefined) return nativeSlice(O, k, fin);
            }
            result = new (Constructor === undefined ? $Array : Constructor)(max$1(fin - k, 0));
            for(n = 0; k < fin; k++, n++)if (k in O) createProperty$2(result, n, O[k]);
            result.length = n;
            return result;
        }
    });
    var getBuiltInPrototypeMethod$9 = getBuiltInPrototypeMethod$g;
    var slice$6 = getBuiltInPrototypeMethod$9("Array", "slice");
    var isPrototypeOf$c = objectIsPrototypeOf;
    var method$9 = slice$6;
    var ArrayPrototype$9 = Array.prototype;
    var slice$5 = function(it) {
        var own = it.slice;
        return it === ArrayPrototype$9 || isPrototypeOf$c(ArrayPrototype$9, it) && own === ArrayPrototype$9.slice ? method$9 : own;
    };
    var parent$J = slice$5;
    var slice$4 = parent$J;
    var parent$I = slice$4;
    var slice$3 = parent$I;
    var parent$H = slice$3;
    var slice$2 = parent$H;
    var slice$1 = slice$2;
    var _sliceInstanceProperty$1 = /*@__PURE__*/ getDefaultExportFromCjs(slice$1);
    var parent$G = from$4;
    var from$2 = parent$G;
    var parent$F = from$2;
    var from$1 = parent$F;
    var from = from$1;
    var _Array$from = /*@__PURE__*/ getDefaultExportFromCjs(from);
    function _arrayLikeToArray$4(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    function _unsupportedIterableToArray$4(o, minLen) {
        var _context;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
        var n = _sliceInstanceProperty$1(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return _Array$from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);
    }
    function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest();
    }
    function _arrayWithoutHoles(arr) {
        if (_Array$isArray$1(arr)) return _arrayLikeToArray$4(arr);
    }
    function _iterableToArray(iter) {
        if (typeof _Symbol$1 !== "undefined" && _getIteratorMethod$1(iter) != null || iter["@@iterator"] != null) return _Array$from(iter);
    }
    function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableSpread();
    }
    var symbol = symbol$4;
    var _Symbol = /*@__PURE__*/ getDefaultExportFromCjs(symbol);
    var getBuiltInPrototypeMethod$8 = getBuiltInPrototypeMethod$g;
    var concat$5 = getBuiltInPrototypeMethod$8("Array", "concat");
    var isPrototypeOf$b = objectIsPrototypeOf;
    var method$8 = concat$5;
    var ArrayPrototype$8 = Array.prototype;
    var concat$4 = function(it) {
        var own = it.concat;
        return it === ArrayPrototype$8 || isPrototypeOf$b(ArrayPrototype$8, it) && own === ArrayPrototype$8.concat ? method$8 : own;
    };
    var parent$E = concat$4;
    var concat$3 = parent$E;
    var concat$2 = concat$3;
    var _concatInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(concat$2);
    var slice = slice$4;
    var _sliceInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(slice);
    var getBuiltIn$5 = getBuiltIn$f;
    var uncurryThis$5 = functionUncurryThis;
    var getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;
    var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
    var anObject$4 = anObject$d;
    var concat$1 = uncurryThis$5([].concat);
    // all object keys, includes non-enumerable and symbols
    var ownKeys$7 = getBuiltIn$5("Reflect", "ownKeys") || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule$1.f(anObject$4(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;
        return getOwnPropertySymbols ? concat$1(keys, getOwnPropertySymbols(it)) : keys;
    };
    var $$u = _export;
    var ownKeys$6 = ownKeys$7;
    // `Reflect.ownKeys` method
    // https://tc39.es/ecma262/#sec-reflect.ownkeys
    $$u({
        target: "Reflect",
        stat: true
    }, {
        ownKeys: ownKeys$6
    });
    var path$f = path$o;
    var ownKeys$5 = path$f.Reflect.ownKeys;
    var parent$D = ownKeys$5;
    var ownKeys$4 = parent$D;
    var ownKeys$3 = ownKeys$4;
    var _Reflect$ownKeys = /*@__PURE__*/ getDefaultExportFromCjs(ownKeys$3);
    var isArray$1 = isArray$7;
    var _Array$isArray = /*@__PURE__*/ getDefaultExportFromCjs(isArray$1);
    var $$t = _export;
    var toObject$4 = toObject$e;
    var nativeKeys = objectKeys$3;
    var fails$c = fails$u;
    var FAILS_ON_PRIMITIVES$2 = fails$c(function() {
        nativeKeys(1);
    });
    // `Object.keys` method
    // https://tc39.es/ecma262/#sec-object.keys
    $$t({
        target: "Object",
        stat: true,
        forced: FAILS_ON_PRIMITIVES$2
    }, {
        keys: function keys(it) {
            return nativeKeys(toObject$4(it));
        }
    });
    var path$e = path$o;
    var keys$6 = path$e.Object.keys;
    var parent$C = keys$6;
    var keys$5 = parent$C;
    var keys$4 = keys$5;
    var _Object$keys = /*@__PURE__*/ getDefaultExportFromCjs(keys$4);
    var $forEach = arrayIteration.forEach;
    var arrayMethodIsStrict$2 = arrayMethodIsStrict$4;
    var STRICT_METHOD$2 = arrayMethodIsStrict$2("forEach");
    // `Array.prototype.forEach` method implementation
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    var arrayForEach = !STRICT_METHOD$2 ? function forEach(callbackfn /* , thisArg */ ) {
        return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    // eslint-disable-next-line es/no-array-prototype-foreach -- safe
    } : [].forEach;
    var $$s = _export;
    var forEach$8 = arrayForEach;
    // `Array.prototype.forEach` method
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    // eslint-disable-next-line es/no-array-prototype-foreach -- safe
    $$s({
        target: "Array",
        proto: true,
        forced: [].forEach !== forEach$8
    }, {
        forEach: forEach$8
    });
    var getBuiltInPrototypeMethod$7 = getBuiltInPrototypeMethod$g;
    var forEach$7 = getBuiltInPrototypeMethod$7("Array", "forEach");
    var parent$B = forEach$7;
    var forEach$6 = parent$B;
    var classof$4 = classof$d;
    var hasOwn$6 = hasOwnProperty_1;
    var isPrototypeOf$a = objectIsPrototypeOf;
    var method$7 = forEach$6;
    var ArrayPrototype$7 = Array.prototype;
    var DOMIterables$3 = {
        DOMTokenList: true,
        NodeList: true
    };
    var forEach$5 = function(it) {
        var own = it.forEach;
        return it === ArrayPrototype$7 || isPrototypeOf$a(ArrayPrototype$7, it) && own === ArrayPrototype$7.forEach || hasOwn$6(DOMIterables$3, classof$4(it)) ? method$7 : own;
    };
    var forEach$4 = forEach$5;
    var _forEachInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(forEach$4);
    var $$r = _export;
    var uncurryThis$4 = functionUncurryThis;
    var isArray = isArray$e;
    var nativeReverse = uncurryThis$4([].reverse);
    var test$1 = [
        1,
        2
    ];
    // `Array.prototype.reverse` method
    // https://tc39.es/ecma262/#sec-array.prototype.reverse
    // fix for Safari 12.0 bug
    // https://bugs.webkit.org/show_bug.cgi?id=188794
    $$r({
        target: "Array",
        proto: true,
        forced: String(test$1) === String(test$1.reverse())
    }, {
        reverse: function reverse() {
            // eslint-disable-next-line no-self-assign -- dirty hack
            if (isArray(this)) this.length = this.length;
            return nativeReverse(this);
        }
    });
    var getBuiltInPrototypeMethod$6 = getBuiltInPrototypeMethod$g;
    var reverse$6 = getBuiltInPrototypeMethod$6("Array", "reverse");
    var isPrototypeOf$9 = objectIsPrototypeOf;
    var method$6 = reverse$6;
    var ArrayPrototype$6 = Array.prototype;
    var reverse$5 = function(it) {
        var own = it.reverse;
        return it === ArrayPrototype$6 || isPrototypeOf$9(ArrayPrototype$6, it) && own === ArrayPrototype$6.reverse ? method$6 : own;
    };
    var parent$A = reverse$5;
    var reverse$4 = parent$A;
    var reverse$3 = reverse$4;
    var _reverseInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(reverse$3);
    var tryToString$2 = tryToString$6;
    var $TypeError$5 = TypeError;
    var deletePropertyOrThrow$2 = function(O, P) {
        if (!delete O[P]) throw new $TypeError$5("Cannot delete property " + tryToString$2(P) + " of " + tryToString$2(O));
    };
    var $$q = _export;
    var toObject$3 = toObject$e;
    var toAbsoluteIndex = toAbsoluteIndex$4;
    var toIntegerOrInfinity = toIntegerOrInfinity$4;
    var lengthOfArrayLike$2 = lengthOfArrayLike$d;
    var setArrayLength = arraySetLength;
    var doesNotExceedSafeInteger = doesNotExceedSafeInteger$4;
    var arraySpeciesCreate = arraySpeciesCreate$4;
    var createProperty$1 = createProperty$6;
    var deletePropertyOrThrow$1 = deletePropertyOrThrow$2;
    var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
    var max = Math.max;
    var min = Math.min;
    // `Array.prototype.splice` method
    // https://tc39.es/ecma262/#sec-array.prototype.splice
    // with adding support of @@species
    $$q({
        target: "Array",
        proto: true,
        forced: !HAS_SPECIES_SUPPORT
    }, {
        splice: function splice(start, deleteCount /* , ...items */ ) {
            var O = toObject$3(this);
            var len = lengthOfArrayLike$2(O);
            var actualStart = toAbsoluteIndex(start, len);
            var argumentsLength = arguments.length;
            var insertCount, actualDeleteCount, A, k, from, to;
            if (argumentsLength === 0) insertCount = actualDeleteCount = 0;
            else if (argumentsLength === 1) {
                insertCount = 0;
                actualDeleteCount = len - actualStart;
            } else {
                insertCount = argumentsLength - 2;
                actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
            }
            doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);
            A = arraySpeciesCreate(O, actualDeleteCount);
            for(k = 0; k < actualDeleteCount; k++){
                from = actualStart + k;
                if (from in O) createProperty$1(A, k, O[from]);
            }
            A.length = actualDeleteCount;
            if (insertCount < actualDeleteCount) {
                for(k = actualStart; k < len - actualDeleteCount; k++){
                    from = k + actualDeleteCount;
                    to = k + insertCount;
                    if (from in O) O[to] = O[from];
                    else deletePropertyOrThrow$1(O, to);
                }
                for(k = len; k > len - actualDeleteCount + insertCount; k--)deletePropertyOrThrow$1(O, k - 1);
            } else if (insertCount > actualDeleteCount) for(k = len - actualDeleteCount; k > actualStart; k--){
                from = k + actualDeleteCount - 1;
                to = k + insertCount - 1;
                if (from in O) O[to] = O[from];
                else deletePropertyOrThrow$1(O, to);
            }
            for(k = 0; k < insertCount; k++)O[k + actualStart] = arguments[k + 2];
            setArrayLength(O, len - actualDeleteCount + insertCount);
            return A;
        }
    });
    var getBuiltInPrototypeMethod$5 = getBuiltInPrototypeMethod$g;
    var splice$3 = getBuiltInPrototypeMethod$5("Array", "splice");
    var isPrototypeOf$8 = objectIsPrototypeOf;
    var method$5 = splice$3;
    var ArrayPrototype$5 = Array.prototype;
    var splice$2 = function(it) {
        var own = it.splice;
        return it === ArrayPrototype$5 || isPrototypeOf$8(ArrayPrototype$5, it) && own === ArrayPrototype$5.splice ? method$5 : own;
    };
    var parent$z = splice$2;
    var splice$1 = parent$z;
    var splice = splice$1;
    var _spliceInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(splice);
    var DESCRIPTORS$7 = descriptors;
    var uncurryThis$3 = functionUncurryThis;
    var call$7 = functionCall;
    var fails$b = fails$u;
    var objectKeys = objectKeys$3;
    var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
    var propertyIsEnumerableModule = objectPropertyIsEnumerable;
    var toObject$2 = toObject$e;
    var IndexedObject = indexedObject;
    // eslint-disable-next-line es/no-object-assign -- safe
    var $assign = Object.assign;
    // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    var defineProperty$3 = Object.defineProperty;
    var concat = uncurryThis$3([].concat);
    // `Object.assign` method
    // https://tc39.es/ecma262/#sec-object.assign
    var objectAssign = !$assign || fails$b(function() {
        // should have correct order of operations (Edge bug)
        if (DESCRIPTORS$7 && $assign({
            b: 1
        }, $assign(defineProperty$3({}, "a", {
            enumerable: true,
            get: function() {
                defineProperty$3(this, "b", {
                    value: 3,
                    enumerable: false
                });
            }
        }), {
            b: 2
        })).b !== 1) return true;
        // should work with symbols and should have deterministic property order (V8 bug)
        var A = {};
        var B = {};
        // eslint-disable-next-line es/no-symbol -- safe
        var symbol = Symbol("assign detection");
        var alphabet = "abcdefghijklmnopqrst";
        A[symbol] = 7;
        alphabet.split("").forEach(function(chr) {
            B[chr] = chr;
        });
        return $assign({}, A)[symbol] !== 7 || objectKeys($assign({}, B)).join("") !== alphabet;
    }) ? function assign(target, source) {
        var T = toObject$2(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        var propertyIsEnumerable = propertyIsEnumerableModule.f;
        while(argumentsLength > index){
            var S = IndexedObject(arguments[index++]);
            var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
            var length = keys.length;
            var j = 0;
            var key;
            while(length > j){
                key = keys[j++];
                if (!DESCRIPTORS$7 || call$7(propertyIsEnumerable, S, key)) T[key] = S[key];
            }
        }
        return T;
    } : $assign;
    var $$p = _export;
    var assign$5 = objectAssign;
    // `Object.assign` method
    // https://tc39.es/ecma262/#sec-object.assign
    // eslint-disable-next-line es/no-object-assign -- required for testing
    $$p({
        target: "Object",
        stat: true,
        arity: 2,
        forced: Object.assign !== assign$5
    }, {
        assign: assign$5
    });
    var path$d = path$o;
    var assign$4 = path$d.Object.assign;
    var parent$y = assign$4;
    var assign$3 = parent$y;
    var assign$2 = assign$3;
    var _Object$assign = /*@__PURE__*/ getDefaultExportFromCjs(assign$2);
    var $$o = _export;
    var fails$a = fails$u;
    var toObject$1 = toObject$e;
    var nativeGetPrototypeOf = objectGetPrototypeOf;
    var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;
    var FAILS_ON_PRIMITIVES$1 = fails$a(function() {
        nativeGetPrototypeOf(1);
    });
    // `Object.getPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.getprototypeof
    $$o({
        target: "Object",
        stat: true,
        forced: FAILS_ON_PRIMITIVES$1,
        sham: !CORRECT_PROTOTYPE_GETTER
    }, {
        getPrototypeOf: function getPrototypeOf(it) {
            return nativeGetPrototypeOf(toObject$1(it));
        }
    });
    var path$c = path$o;
    var getPrototypeOf$5 = path$c.Object.getPrototypeOf;
    var parent$x = getPrototypeOf$5;
    var getPrototypeOf$4 = parent$x;
    // TODO: Remove from `core-js@4`
    var $$n = _export;
    var DESCRIPTORS$6 = descriptors;
    var create$9 = objectCreate;
    // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    $$n({
        target: "Object",
        stat: true,
        sham: !DESCRIPTORS$6
    }, {
        create: create$9
    });
    var path$b = path$o;
    var Object$3 = path$b.Object;
    var create$8 = function create(P, D) {
        return Object$3.create(P, D);
    };
    var parent$w = create$8;
    var create$7 = parent$w;
    var create$6 = create$7;
    var _Object$create$1 = /*@__PURE__*/ getDefaultExportFromCjs(create$6);
    var path$a = path$o;
    var apply$3 = functionApply;
    // eslint-disable-next-line es/no-json -- safe
    if (!path$a.JSON) path$a.JSON = {
        stringify: JSON.stringify
    };
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    var stringify$2 = function stringify(it, replacer, space) {
        return apply$3(path$a.JSON.stringify, null, arguments);
    };
    var parent$v = stringify$2;
    var stringify$1 = parent$v;
    var stringify = stringify$1;
    var _JSON$stringify = /*@__PURE__*/ getDefaultExportFromCjs(stringify);
    /* global Bun -- Deno case */ var engineIsBun = typeof Bun == "function" && Bun && typeof Bun.version == "string";
    var $TypeError$4 = TypeError;
    var validateArgumentsLength$2 = function(passed, required) {
        if (passed < required) throw new $TypeError$4("Not enough arguments");
        return passed;
    };
    var global$9 = global$p;
    var apply$2 = functionApply;
    var isCallable$5 = isCallable$m;
    var ENGINE_IS_BUN = engineIsBun;
    var USER_AGENT = engineUserAgent;
    var arraySlice$2 = arraySlice$5;
    var validateArgumentsLength$1 = validateArgumentsLength$2;
    var Function$2 = global$9.Function;
    // dirty IE9- and Bun 0.3.0- checks
    var WRAP = /MSIE .\./.test(USER_AGENT) || ENGINE_IS_BUN && function() {
        var version = global$9.Bun.version.split(".");
        return version.length < 3 || version[0] === "0" && (version[1] < 3 || version[1] === "3" && version[2] === "0");
    }();
    // IE9- / Bun 0.3.0- setTimeout / setInterval / setImmediate additional parameters fix
    // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
    // https://github.com/oven-sh/bun/issues/1633
    var schedulersFix$2 = function(scheduler, hasTimeArg) {
        var firstParamIndex = hasTimeArg ? 2 : 1;
        return WRAP ? function(handler, timeout /* , ...arguments */ ) {
            var boundArgs = validateArgumentsLength$1(arguments.length, 1) > firstParamIndex;
            var fn = isCallable$5(handler) ? handler : Function$2(handler);
            var params = boundArgs ? arraySlice$2(arguments, firstParamIndex) : [];
            var callback = boundArgs ? function() {
                apply$2(fn, this, params);
            } : fn;
            return hasTimeArg ? scheduler(callback, timeout) : scheduler(callback);
        } : scheduler;
    };
    var $$m = _export;
    var global$8 = global$p;
    var schedulersFix$1 = schedulersFix$2;
    var setInterval = schedulersFix$1(global$8.setInterval, true);
    // Bun / IE9- setInterval additional parameters fix
    // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
    $$m({
        global: true,
        bind: true,
        forced: global$8.setInterval !== setInterval
    }, {
        setInterval: setInterval
    });
    var $$l = _export;
    var global$7 = global$p;
    var schedulersFix = schedulersFix$2;
    var setTimeout$3 = schedulersFix(global$7.setTimeout, true);
    // Bun / IE9- setTimeout additional parameters fix
    // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
    $$l({
        global: true,
        bind: true,
        forced: global$7.setTimeout !== setTimeout$3
    }, {
        setTimeout: setTimeout$3
    });
    var path$9 = path$o;
    var setTimeout$2 = path$9.setTimeout;
    var setTimeout$1 = setTimeout$2;
    var _setTimeout = /*@__PURE__*/ getDefaultExportFromCjs(setTimeout$1);
    var componentEmitter = {
        exports: {}
    };
    (function(module) {
        function Emitter(object) {
            if (object) return mixin(object);
            this._callbacks = new Map();
        }
        function mixin(object) {
            Object.assign(object, Emitter.prototype);
            object._callbacks = new Map();
            return object;
        }
        Emitter.prototype.on = function(event, listener) {
            const callbacks = this._callbacks.get(event) ?? [];
            callbacks.push(listener);
            this._callbacks.set(event, callbacks);
            return this;
        };
        Emitter.prototype.once = function(event, listener) {
            const on = (...arguments_)=>{
                this.off(event, on);
                listener.apply(this, arguments_);
            };
            on.fn = listener;
            this.on(event, on);
            return this;
        };
        Emitter.prototype.off = function(event, listener) {
            if (event === undefined && listener === undefined) {
                this._callbacks.clear();
                return this;
            }
            if (listener === undefined) {
                this._callbacks.delete(event);
                return this;
            }
            const callbacks = this._callbacks.get(event);
            if (callbacks) {
                for (const [index, callback] of callbacks.entries())if (callback === listener || callback.fn === listener) {
                    callbacks.splice(index, 1);
                    break;
                }
                if (callbacks.length === 0) this._callbacks.delete(event);
                else this._callbacks.set(event, callbacks);
            }
            return this;
        };
        Emitter.prototype.emit = function(event, ...arguments_) {
            const callbacks = this._callbacks.get(event);
            if (callbacks) {
                // Create a copy of the callbacks array to avoid issues if it's modified during iteration
                const callbacksCopy = [
                    ...callbacks
                ];
                for (const callback of callbacksCopy)callback.apply(this, arguments_);
            }
            return this;
        };
        Emitter.prototype.listeners = function(event) {
            return this._callbacks.get(event) ?? [];
        };
        Emitter.prototype.listenerCount = function(event) {
            if (event) return this.listeners(event).length;
            let totalCount = 0;
            for (const callbacks of this._callbacks.values())totalCount += callbacks.length;
            return totalCount;
        };
        Emitter.prototype.hasListeners = function(event) {
            return this.listenerCount(event) > 0;
        };
        // Aliases
        Emitter.prototype.addEventListener = Emitter.prototype.on;
        Emitter.prototype.removeListener = Emitter.prototype.off;
        Emitter.prototype.removeEventListener = Emitter.prototype.off;
        Emitter.prototype.removeAllListeners = Emitter.prototype.off;
        module.exports = Emitter;
    })(componentEmitter);
    var componentEmitterExports = componentEmitter.exports;
    var Emitter = /*@__PURE__*/ getDefaultExportFromCjs(componentEmitterExports);
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
   * http://naver.github.io/egjs
   *
   * Forked By Naver egjs
   * Copyright (c) hammerjs
   * Licensed under the MIT license */ function _extends() {
        _extends = Object.assign || function(target) {
            for(var i = 1; i < arguments.length; i++){
                var source = arguments[i];
                for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
            }
            return target;
        };
        return _extends.apply(this, arguments);
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }
    function _assertThisInitialized$1(self1) {
        if (self1 === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self1;
    }
    /**
   * @private
   * extend object.
   * means that properties in dest will be overwritten by the ones in src.
   * @param {Object} target
   * @param {...Object} objects_to_assign
   * @returns {Object} target
   */ var assign;
    if (typeof Object.assign !== "function") assign = function assign(target) {
        if (target === undefined || target === null) throw new TypeError("Cannot convert undefined or null to object");
        var output = Object(target);
        for(var index = 1; index < arguments.length; index++){
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for(var nextKey in source)if (source.hasOwnProperty(nextKey)) output[nextKey] = source[nextKey];
            }
        }
        return output;
    };
    else assign = Object.assign;
    var assign$1 = assign;
    var VENDOR_PREFIXES = [
        "",
        "webkit",
        "Moz",
        "MS",
        "ms",
        "o"
    ];
    var TEST_ELEMENT = typeof document === "undefined" ? {
        style: {}
    } : document.createElement("div");
    var TYPE_FUNCTION = "function";
    var round = Math.round, abs = Math.abs;
    var now = Date.now;
    /**
   * @private
   * get the prefixed property
   * @param {Object} obj
   * @param {String} property
   * @returns {String|Undefined} prefixed
   */ function prefixed(obj, property) {
        var prefix;
        var prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);
        var i = 0;
        while(i < VENDOR_PREFIXES.length){
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;
            if (prop in obj) return prop;
            i++;
        }
        return undefined;
    }
    /* eslint-disable no-new-func, no-nested-ternary */ var win;
    if (typeof window === "undefined") // window is undefined in node.js
    win = {};
    else win = window;
    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, "touchAction");
    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
    function getTouchActionProps() {
        if (!NATIVE_TOUCH_ACTION) return false;
        var touchMap = {};
        var cssSupports = win.CSS && win.CSS.supports;
        [
            "auto",
            "manipulation",
            "pan-y",
            "pan-x",
            "pan-x pan-y",
            "none"
        ].forEach(function(val) {
            // If css.supports is not supported but there is native touch-action assume it supports
            // all values. This is the case for IE 10 and 11.
            return touchMap[val] = cssSupports ? win.CSS.supports("touch-action", val) : true;
        });
        return touchMap;
    }
    var TOUCH_ACTION_COMPUTE = "compute";
    var TOUCH_ACTION_AUTO = "auto";
    var TOUCH_ACTION_MANIPULATION = "manipulation"; // not implemented
    var TOUCH_ACTION_NONE = "none";
    var TOUCH_ACTION_PAN_X = "pan-x";
    var TOUCH_ACTION_PAN_Y = "pan-y";
    var TOUCH_ACTION_MAP = getTouchActionProps();
    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
    var SUPPORT_TOUCH = "ontouchstart" in win;
    var SUPPORT_POINTER_EVENTS = prefixed(win, "PointerEvent") !== undefined;
    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
    var INPUT_TYPE_TOUCH = "touch";
    var INPUT_TYPE_PEN = "pen";
    var INPUT_TYPE_MOUSE = "mouse";
    var INPUT_TYPE_KINECT = "kinect";
    var COMPUTE_INTERVAL = 25;
    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;
    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;
    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
    var PROPS_XY = [
        "x",
        "y"
    ];
    var PROPS_CLIENT_XY = [
        "clientX",
        "clientY"
    ];
    /**
   * @private
   * walk objects and arrays
   * @param {Object} obj
   * @param {Function} iterator
   * @param {Object} context
   */ function each(obj, iterator, context) {
        var i;
        if (!obj) return;
        if (obj.forEach) obj.forEach(iterator, context);
        else if (obj.length !== undefined) {
            i = 0;
            while(i < obj.length){
                iterator.call(context, obj[i], i, obj);
                i++;
            }
        } else for(i in obj)obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
    }
    /**
   * @private
   * let a boolean value also be a function that must return a boolean
   * this first item in args will be used as the context
   * @param {Boolean|Function} val
   * @param {Array} [args]
   * @returns {Boolean}
   */ function boolOrFn(val, args) {
        if (typeof val === TYPE_FUNCTION) return val.apply(args ? args[0] || undefined : undefined, args);
        return val;
    }
    /**
   * @private
   * small indexOf wrapper
   * @param {String} str
   * @param {String} find
   * @returns {Boolean} found
   */ function inStr(str, find) {
        return str.indexOf(find) > -1;
    }
    /**
   * @private
   * when the touchActions are collected they are not a valid value, so we need to clean things up. *
   * @param {String} actions
   * @returns {*}
   */ function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) return TOUCH_ACTION_NONE;
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning
        if (hasPanX && hasPanY) return TOUCH_ACTION_NONE;
         // pan-x OR pan-y
        if (hasPanX || hasPanY) return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
         // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) return TOUCH_ACTION_MANIPULATION;
        return TOUCH_ACTION_AUTO;
    }
    /**
   * @private
   * Touch Action
   * sets the touchAction property or uses the js alternative
   * @param {Manager} manager
   * @param {String} value
   * @constructor
   */ var TouchAction = /*#__PURE__*/ function() {
        function TouchAction(manager, value) {
            this.manager = manager;
            this.set(value);
        }
        /**
     * @private
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */ var _proto = TouchAction.prototype;
        _proto.set = function set(value) {
            // find out the touch-action by the event handlers
            if (value === TOUCH_ACTION_COMPUTE) value = this.compute();
            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            this.actions = value.toLowerCase().trim();
        };
        /**
     * @private
     * just re-set the touchAction value
     */ _proto.update = function update() {
            this.set(this.manager.options.touchAction);
        };
        /**
     * @private
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */ _proto.compute = function compute() {
            var actions = [];
            each(this.manager.recognizers, function(recognizer) {
                if (boolOrFn(recognizer.options.enable, [
                    recognizer
                ])) actions = actions.concat(recognizer.getTouchAction());
            });
            return cleanTouchActions(actions.join(" "));
        };
        /**
     * @private
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */ _proto.preventDefaults = function preventDefaults(input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection; // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
                srcEvent.preventDefault();
                return;
            }
            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
            if (hasNone) {
                // do not prevent defaults if this is a tap gesture
                var isTapPointer = input.pointers.length === 1;
                var isTapMovement = input.distance < 2;
                var isTapTouchTime = input.deltaTime < 250;
                if (isTapPointer && isTapMovement && isTapTouchTime) return;
            }
            if (hasPanX && hasPanY) // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) return this.preventSrc(srcEvent);
        };
        /**
     * @private
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */ _proto.preventSrc = function preventSrc(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
        };
        return TouchAction;
    }();
    /**
   * @private
   * find if a node is in the given parent
   * @method hasParent
   * @param {HTMLElement} node
   * @param {HTMLElement} parent
   * @return {Boolean} found
   */ function hasParent(node, parent) {
        while(node){
            if (node === parent) return true;
            node = node.parentNode;
        }
        return false;
    }
    /**
   * @private
   * get the center of all the pointers
   * @param {Array} pointers
   * @return {Object} center contains `x` and `y` properties
   */ function getCenter(pointers) {
        var pointersLength = pointers.length; // no need to loop when only one touch
        if (pointersLength === 1) return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
        var x = 0;
        var y = 0;
        var i = 0;
        while(i < pointersLength){
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }
        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }
    /**
   * @private
   * create a simple clone from the input used for storage of firstInput and firstMultiple
   * @param {Object} input
   * @returns {Object} clonedInputData
   */ function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while(i < input.pointers.length){
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }
        return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }
    /**
   * @private
   * calculate the absolute distance between two points
   * @param {Object} p1 {x, y}
   * @param {Object} p2 {x, y}
   * @param {Array} [props] containing x and y keys
   * @return {Number} distance
   */ function getDistance(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]];
        var y = p2[props[1]] - p1[props[1]];
        return Math.sqrt(x * x + y * y);
    }
    /**
   * @private
   * calculate the angle between two coordinates
   * @param {Object} p1
   * @param {Object} p2
   * @param {Array} [props] containing x and y keys
   * @return {Number} angle
   */ function getAngle(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]];
        var y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }
    /**
   * @private
   * get the direction between two points
   * @param {Number} x
   * @param {Number} y
   * @return {Number} direction
   */ function getDirection(x, y) {
        if (x === y) return DIRECTION_NONE;
        if (abs(x) >= abs(y)) return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }
    function computeDeltaXY(session, input) {
        var center = input.center; // let { offsetDelta:offset = {}, prevDelta = {}, prevInput = {} } = session;
        // jscs throwing error on defalut destructured values and without defaults tests fail
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};
        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };
            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }
        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }
    /**
   * @private
   * calculate the velocity between two points. unit is in px per ms.
   * @param {Number} deltaTime
   * @param {Number} x
   * @param {Number} y
   * @return {Object} velocity `x` and `y`
   */ function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }
    /**
   * @private
   * calculate the scale factor between two pointersets
   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
   * @param {Array} start array of pointers
   * @param {Array} end array of pointers
   * @return {Number} scale
   */ function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }
    /**
   * @private
   * calculate the rotation degrees between two pointersets
   * @param {Array} start array of pointers
   * @param {Array} end array of pointers
   * @return {Number} rotation
   */ function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }
    /**
   * @private
   * velocity is calculated every x ms
   * @param {Object} session
   * @param {Object} input
   */ function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input;
        var deltaTime = input.timeStamp - last.timeStamp;
        var velocity;
        var velocityX;
        var velocityY;
        var direction;
        if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;
            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);
            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }
        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }
    /**
  * @private
   * extend the data with some usable properties like scale, rotate, velocity etc
   * @param {Object} manager
   * @param {Object} input
   */ function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length; // store the first input to calculate the distance and direction
        if (!session.firstInput) session.firstInput = simpleCloneInputData(input);
         // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) session.firstMultiple = simpleCloneInputData(input);
        else if (pointersLength === 1) session.firstMultiple = false;
        var firstInput = session.firstInput, firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;
        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);
        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);
        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
        computeIntervalInputData(session, input); // find the correct target
        var target = manager.element;
        var srcEvent = input.srcEvent;
        var srcEventTarget;
        if (srcEvent.composedPath) srcEventTarget = srcEvent.composedPath()[0];
        else if (srcEvent.path) srcEventTarget = srcEvent.path[0];
        else srcEventTarget = srcEvent.target;
        if (hasParent(srcEventTarget, target)) target = srcEventTarget;
        input.target = target;
    }
    /**
   * @private
   * handle input events
   * @param {Manager} manager
   * @param {String} eventType
   * @param {Object} input
   */ function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;
        if (isFirst) manager.session = {};
         // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType; // compute scale, rotation etc
        computeInputData(manager, input); // emit secret event
        manager.emit("hammer.input", input);
        manager.recognize(input);
        manager.session.prevInput = input;
    }
    /**
   * @private
   * split string on whitespace
   * @param {String} str
   * @returns {Array} words
   */ function splitStr(str) {
        return str.trim().split(/\s+/g);
    }
    /**
   * @private
   * addEventListener with multiple events at once
   * @param {EventTarget} target
   * @param {String} types
   * @param {Function} handler
   */ function addEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.addEventListener(type, handler, false);
        });
    }
    /**
   * @private
   * removeEventListener with multiple events at once
   * @param {EventTarget} target
   * @param {String} types
   * @param {Function} handler
   */ function removeEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.removeEventListener(type, handler, false);
        });
    }
    /**
   * @private
   * get the window object of an element
   * @param {HTMLElement} element
   * @returns {DocumentView|Window}
   */ function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return doc.defaultView || doc.parentWindow || window;
    }
    /**
   * @private
   * create new input type manager
   * @param {Manager} manager
   * @param {Function} callback
   * @returns {Input}
   * @constructor
   */ var Input = /*#__PURE__*/ function() {
        function Input(manager, callback) {
            var self1 = this;
            this.manager = manager;
            this.callback = callback;
            this.element = manager.element;
            this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,
            // so when disabled the input events are completely bypassed.
            this.domHandler = function(ev) {
                if (boolOrFn(manager.options.enable, [
                    manager
                ])) self1.handler(ev);
            };
            this.init();
        }
        /**
     * @private
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */ var _proto = Input.prototype;
        _proto.handler = function handler() {};
        /**
     * @private
     * bind the events
     */ _proto.init = function init() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        };
        /**
     * @private
     * unbind the events
     */ _proto.destroy = function destroy() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        };
        return Input;
    }();
    /**
   * @private
   * find if a array contains the object using indexOf or a simple polyFill
   * @param {Array} src
   * @param {String} find
   * @param {String} [findByKey]
   * @return {Boolean|Number} false when not found, or the index
   */ function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) return src.indexOf(find);
        else {
            var i = 0;
            while(i < src.length){
                if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) // do not use === here, test fails
                return i;
                i++;
            }
            return -1;
        }
    }
    var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
    }; // in IE10 the pointer types is defined as an enum
    var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
    };
    var POINTER_ELEMENT_EVENTS = "pointerdown";
    var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel"; // IE10 has prefixed support, and case-sensitive
    if (win.MSPointerEvent && !win.PointerEvent) {
        POINTER_ELEMENT_EVENTS = "MSPointerDown";
        POINTER_WINDOW_EVENTS = "MSPointerMove MSPointerUp MSPointerCancel";
    }
    /**
   * @private
   * Pointer events input
   * @constructor
   * @extends Input
   */ var PointerEventInput = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(PointerEventInput, _Input);
        function PointerEventInput() {
            var _this;
            var proto = PointerEventInput.prototype;
            proto.evEl = POINTER_ELEMENT_EVENTS;
            proto.evWin = POINTER_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.store = _this.manager.session.pointerEvents = [];
            return _this;
        }
        /**
     * @private
     * handle mouse events
     * @param {Object} ev
     */ var _proto = PointerEventInput.prototype;
        _proto.handler = function handler(ev) {
            var store = this.store;
            var removePointer = false;
            var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
            var isTouch = pointerType === INPUT_TYPE_TOUCH; // get index of the event in the store
            var storeIndex = inArray(store, ev.pointerId, "pointerId"); // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                if (storeIndex < 0) {
                    store.push(ev);
                    storeIndex = store.length - 1;
                }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) removePointer = true;
             // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) return;
             // update the event in the store
            store[storeIndex] = ev;
            this.callback(this.manager, eventType, {
                pointers: store,
                changedPointers: [
                    ev
                ],
                pointerType: pointerType,
                srcEvent: ev
            });
            if (removePointer) // remove from the store
            store.splice(storeIndex, 1);
        };
        return PointerEventInput;
    }(Input);
    /**
   * @private
   * convert array-like objects to real arrays
   * @param {Object} obj
   * @returns {Array}
   */ function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }
    /**
   * @private
   * unique array with objects based on a key (like 'id') or just by the array's value
   * @param {Array} src [{id:1},{id:2},{id:1}]
   * @param {String} [key]
   * @param {Boolean} [sort=False]
   * @returns {Array} [{id:1},{id:2}]
   */ function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;
        while(i < src.length){
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) results.push(src[i]);
            values[i] = val;
            i++;
        }
        if (sort) {
            if (!key) results = results.sort();
            else results = results.sort(function(a, b) {
                return a[key] > b[key];
            });
        }
        return results;
    }
    var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var TOUCH_TARGET_EVENTS = "touchstart touchmove touchend touchcancel";
    /**
   * @private
   * Multi-user touch events input
   * @constructor
   * @extends Input
   */ var TouchInput = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(TouchInput, _Input);
        function TouchInput() {
            var _this;
            TouchInput.prototype.evTarget = TOUCH_TARGET_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.targetIds = {}; // this.evTarget = TOUCH_TARGET_EVENTS;
            return _this;
        }
        var _proto = TouchInput.prototype;
        _proto.handler = function handler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) return;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        };
        return TouchInput;
    }(Input);
    function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds; // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [
                allTouches,
                allTouches
            ];
        }
        var i;
        var targetTouches;
        var changedTouches = toArray(ev.changedTouches);
        var changedTargetTouches = [];
        var target = this.target; // get target touches from touches
        targetTouches = allTouches.filter(function(touch) {
            return hasParent(touch.target, target);
        }); // collect touches
        if (type === INPUT_START) {
            i = 0;
            while(i < targetTouches.length){
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        } // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while(i < changedTouches.length){
            if (targetIds[changedTouches[i].identifier]) changedTargetTouches.push(changedTouches[i]);
             // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) delete targetIds[changedTouches[i].identifier];
            i++;
        }
        if (!changedTargetTouches.length) return;
        return [
            uniqueArray(targetTouches.concat(changedTargetTouches), "identifier", true),
            changedTargetTouches
        ];
    }
    var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
    };
    var MOUSE_ELEMENT_EVENTS = "mousedown";
    var MOUSE_WINDOW_EVENTS = "mousemove mouseup";
    /**
   * @private
   * Mouse events input
   * @constructor
   * @extends Input
   */ var MouseInput = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(MouseInput, _Input);
        function MouseInput() {
            var _this;
            var proto = MouseInput.prototype;
            proto.evEl = MOUSE_ELEMENT_EVENTS;
            proto.evWin = MOUSE_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.pressed = false; // mousedown state
            return _this;
        }
        /**
     * @private
     * handle mouse events
     * @param {Object} ev
     */ var _proto = MouseInput.prototype;
        _proto.handler = function handler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down
            if (eventType & INPUT_START && ev.button === 0) this.pressed = true;
            if (eventType & INPUT_MOVE && ev.which !== 1) eventType = INPUT_END;
             // mouse must be down
            if (!this.pressed) return;
            if (eventType & INPUT_END) this.pressed = false;
            this.callback(this.manager, eventType, {
                pointers: [
                    ev
                ],
                changedPointers: [
                    ev
                ],
                pointerType: INPUT_TYPE_MOUSE,
                srcEvent: ev
            });
        };
        return MouseInput;
    }(Input);
    /**
   * @private
   * Combined touch and mouse input
   *
   * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
   * This because touch devices also emit mouse events while doing a touch.
   *
   * @constructor
   * @extends Input
   */ var DEDUP_TIMEOUT = 2500;
    var DEDUP_DISTANCE = 25;
    function setLastTouch(eventData) {
        var _eventData$changedPoi = eventData.changedPointers, touch = _eventData$changedPoi[0];
        if (touch.identifier === this.primaryTouch) {
            var lastTouch = {
                x: touch.clientX,
                y: touch.clientY
            };
            var lts = this.lastTouches;
            this.lastTouches.push(lastTouch);
            var removeLastTouch = function removeLastTouch() {
                var i = lts.indexOf(lastTouch);
                if (i > -1) lts.splice(i, 1);
            };
            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
        }
    }
    function recordTouches(eventType, eventData) {
        if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) setLastTouch.call(this, eventData);
    }
    function isSyntheticEvent(eventData) {
        var x = eventData.srcEvent.clientX;
        var y = eventData.srcEvent.clientY;
        for(var i = 0; i < this.lastTouches.length; i++){
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x);
            var dy = Math.abs(y - t.y);
            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) return true;
        }
        return false;
    }
    var TouchMouseInput = /*#__PURE__*/ function() {
        var TouchMouseInput = /*#__PURE__*/ function(_Input) {
            _inheritsLoose(TouchMouseInput, _Input);
            function TouchMouseInput(_manager, callback) {
                var _this;
                _this = _Input.call(this, _manager, callback) || this;
                _this.handler = function(manager, inputEvent, inputData) {
                    var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;
                    var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;
                    if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) return;
                     // when we're in a touch event, record touches to  de-dupe synthetic mouse event
                    if (isTouch) recordTouches.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputEvent, inputData);
                    else if (isMouse && isSyntheticEvent.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputData)) return;
                    _this.callback(manager, inputEvent, inputData);
                };
                _this.touch = new TouchInput(_this.manager, _this.handler);
                _this.mouse = new MouseInput(_this.manager, _this.handler);
                _this.primaryTouch = null;
                _this.lastTouches = [];
                return _this;
            }
            /**
       * @private
       * handle mouse and touch events
       * @param {Hammer} manager
       * @param {String} inputEvent
       * @param {Object} inputData
       */ var _proto = TouchMouseInput.prototype;
            /**
       * @private
       * remove the event listeners
       */ _proto.destroy = function destroy() {
                this.touch.destroy();
                this.mouse.destroy();
            };
            return TouchMouseInput;
        }(Input);
        return TouchMouseInput;
    }();
    /**
   * @private
   * create new input type manager
   * called by the Manager constructor
   * @param {Hammer} manager
   * @returns {Input}
   */ function createInputInstance(manager) {
        var Type; // let inputClass = manager.options.inputClass;
        var inputClass = manager.options.inputClass;
        if (inputClass) Type = inputClass;
        else if (SUPPORT_POINTER_EVENTS) Type = PointerEventInput;
        else if (SUPPORT_ONLY_TOUCH) Type = TouchInput;
        else if (!SUPPORT_TOUCH) Type = MouseInput;
        else Type = TouchMouseInput;
        return new Type(manager, inputHandler);
    }
    /**
   * @private
   * if the argument is an array, we want to execute the fn on each entry
   * if it aint an array we don't want to do a thing.
   * this is used by all the methods that accept a single and array argument.
   * @param {*|Array} arg
   * @param {String} fn
   * @param {Object} [context]
   * @returns {Boolean}
   */ function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }
    var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;
    /**
   * @private
   * get a unique id
   * @returns {number} uniqueId
   */ var _uniqueId = 1;
    function uniqueId() {
        return _uniqueId++;
    }
    /**
   * @private
   * get a recognizer by name if it is bound to a manager
   * @param {Recognizer|String} otherRecognizer
   * @param {Recognizer} recognizer
   * @returns {Recognizer}
   */ function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) return manager.get(otherRecognizer);
        return otherRecognizer;
    }
    /**
   * @private
   * get a usable string, used as event postfix
   * @param {constant} state
   * @returns {String} state
   */ function stateStr(state) {
        if (state & STATE_CANCELLED) return "cancel";
        else if (state & STATE_ENDED) return "end";
        else if (state & STATE_CHANGED) return "move";
        else if (state & STATE_BEGAN) return "start";
        return "";
    }
    /**
   * @private
   * Recognizer flow explained; *
   * All recognizers have the initial state of POSSIBLE when a input session starts.
   * The definition of a input session is from the first input until the last input, with all it's movement in it. *
   * Example session for mouse-input: mousedown -> mousemove -> mouseup
   *
   * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
   * which determines with state it should be.
   *
   * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
   * POSSIBLE to give it another change on the next cycle.
   *
   *               Possible
   *                  |
   *            +-----+---------------+
   *            |                     |
   *      +-----+-----+               |
   *      |           |               |
   *   Failed      Cancelled          |
   *                          +-------+------+
   *                          |              |
   *                      Recognized       Began
   *                                         |
   *                                      Changed
   *                                         |
   *                                  Ended/Recognized
   */ /**
   * @private
   * Recognizer
   * Every recognizer needs to extend from this class.
   * @constructor
   * @param {Object} options
   */ var Recognizer = /*#__PURE__*/ function() {
        function Recognizer(options) {
            if (options === void 0) options = {};
            this.options = _extends({
                enable: true
            }, options);
            this.id = uniqueId();
            this.manager = null; // default is enable true
            this.state = STATE_POSSIBLE;
            this.simultaneous = {};
            this.requireFail = [];
        }
        /**
     * @private
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */ var _proto = Recognizer.prototype;
        _proto.set = function set(options) {
            assign$1(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
        };
        /**
     * @private
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ _proto.recognizeWith = function recognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "recognizeWith", this)) return this;
            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
                simultaneous[otherRecognizer.id] = otherRecognizer;
                otherRecognizer.recognizeWith(this);
            }
            return this;
        };
        /**
     * @private
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "dropRecognizeWith", this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
        };
        /**
     * @private
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ _proto.requireFailure = function requireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "requireFailure", this)) return this;
            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
                requireFail.push(otherRecognizer);
                otherRecognizer.requireFailure(this);
            }
            return this;
        };
        /**
     * @private
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "dropRequireFailure", this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) this.requireFail.splice(index, 1);
            return this;
        };
        /**
     * @private
     * has require failures boolean
     * @returns {boolean}
     */ _proto.hasRequireFailures = function hasRequireFailures() {
            return this.requireFail.length > 0;
        };
        /**
     * @private
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */ _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
        };
        /**
     * @private
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */ _proto.emit = function emit(input) {
            var self1 = this;
            var state = this.state;
            function emit(event) {
                self1.manager.emit(event, input);
            } // 'panstart' and 'panmove'
            if (state < STATE_ENDED) emit(self1.options.event + stateStr(state));
            emit(self1.options.event); // simple 'eventName' events
            if (input.additionalEvent) // additional event(panleft, panright, pinchin, pinchout...)
            emit(input.additionalEvent);
             // panend and pancancel
            if (state >= STATE_ENDED) emit(self1.options.event + stateStr(state));
        };
        /**
     * @private
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */ _proto.tryEmit = function tryEmit(input) {
            if (this.canEmit()) return this.emit(input);
             // it's failing anyway
            this.state = STATE_FAILED;
        };
        /**
     * @private
     * can we emit?
     * @returns {boolean}
     */ _proto.canEmit = function canEmit() {
            var i = 0;
            while(i < this.requireFail.length){
                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) return false;
                i++;
            }
            return true;
        };
        /**
     * @private
     * update the recognizer
     * @param {Object} inputData
     */ _proto.recognize = function recognize(inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign$1({}, inputData); // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [
                this,
                inputDataClone
            ])) {
                this.reset();
                this.state = STATE_FAILED;
                return;
            } // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) this.state = STATE_POSSIBLE;
            this.state = this.process(inputDataClone); // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) this.tryEmit(inputDataClone);
        };
        /**
     * @private
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {constant} STATE
     */ /* jshint ignore:start */ _proto.process = function process(inputData) {};
        /* jshint ignore:end */ /**
     * @private
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */ _proto.getTouchAction = function getTouchAction() {};
        /**
     * @private
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */ _proto.reset = function reset() {};
        return Recognizer;
    }();
    /**
   * @private
   * A tap is recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
   * between the given interval and position. The delay option can be used to recognize multi-taps without firing
   * a single tap.
   *
   * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
   * multi-taps being recognized.
   * @constructor
   * @extends Recognizer
   */ var TapRecognizer = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(TapRecognizer, _Recognizer);
        function TapRecognizer(options) {
            var _this;
            if (options === void 0) options = {};
            _this = _Recognizer.call(this, _extends({
                event: "tap",
                pointers: 1,
                taps: 1,
                interval: 300,
                // max time between the multi-tap taps
                time: 250,
                // max time of the pointer to be down (like finger on the screen)
                threshold: 9,
                // a minimal movement is ok, but keep it low
                posThreshold: 10
            }, options)) || this; // previous time and center,
            // used for tap counting
            _this.pTime = false;
            _this.pCenter = false;
            _this._timer = null;
            _this._input = null;
            _this.count = 0;
            return _this;
        }
        var _proto = TapRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_MANIPULATION
            ];
        };
        _proto.process = function process(input) {
            var _this2 = this;
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;
            this.reset();
            if (input.eventType & INPUT_START && this.count === 0) return this.failTimeout();
             // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
                if (input.eventType !== INPUT_END) return this.failTimeout();
                var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
                this.pTime = input.timeStamp;
                this.pCenter = input.center;
                if (!validMultiTap || !validInterval) this.count = 1;
                else this.count += 1;
                this._input = input; // if tap count matches we have recognized it,
                // else it has began recognizing...
                var tapCount = this.count % options.taps;
                if (tapCount === 0) {
                    // no failing requirements, immediately trigger the tap event
                    // or wait as long as the multitap interval to trigger
                    if (!this.hasRequireFailures()) return STATE_RECOGNIZED;
                    else {
                        this._timer = setTimeout(function() {
                            _this2.state = STATE_RECOGNIZED;
                            _this2.tryEmit();
                        }, options.interval);
                        return STATE_BEGAN;
                    }
                }
            }
            return STATE_FAILED;
        };
        _proto.failTimeout = function failTimeout() {
            var _this3 = this;
            this._timer = setTimeout(function() {
                _this3.state = STATE_FAILED;
            }, this.options.interval);
            return STATE_FAILED;
        };
        _proto.reset = function reset() {
            clearTimeout(this._timer);
        };
        _proto.emit = function emit() {
            if (this.state === STATE_RECOGNIZED) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        };
        return TapRecognizer;
    }(Recognizer);
    /**
   * @private
   * This recognizer is just used as a base for the simple attribute recognizers.
   * @constructor
   * @extends Recognizer
   */ var AttrRecognizer = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(AttrRecognizer, _Recognizer);
        function AttrRecognizer(options) {
            if (options === void 0) options = {};
            return _Recognizer.call(this, _extends({
                pointers: 1
            }, options)) || this;
        }
        /**
     * @private
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */ var _proto = AttrRecognizer.prototype;
        _proto.attrTest = function attrTest(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
        };
        /**
     * @private
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */ _proto.process = function process(input) {
            var state = this.state;
            var eventType = input.eventType;
            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) return state | STATE_CANCELLED;
            else if (isRecognized || isValid) {
                if (eventType & INPUT_END) return state | STATE_ENDED;
                else if (!(state & STATE_BEGAN)) return STATE_BEGAN;
                return state | STATE_CHANGED;
            }
            return STATE_FAILED;
        };
        return AttrRecognizer;
    }(Recognizer);
    /**
   * @private
   * direction cons to string
   * @param {constant} direction
   * @returns {String}
   */ function directionStr(direction) {
        if (direction === DIRECTION_DOWN) return "down";
        else if (direction === DIRECTION_UP) return "up";
        else if (direction === DIRECTION_LEFT) return "left";
        else if (direction === DIRECTION_RIGHT) return "right";
        return "";
    }
    /**
   * @private
   * Pan
   * Recognized when the pointer is down and moved in the allowed direction.
   * @constructor
   * @extends AttrRecognizer
   */ var PanRecognizer = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(PanRecognizer, _AttrRecognizer);
        function PanRecognizer(options) {
            var _this;
            if (options === void 0) options = {};
            _this = _AttrRecognizer.call(this, _extends({
                event: "pan",
                threshold: 10,
                pointers: 1,
                direction: DIRECTION_ALL
            }, options)) || this;
            _this.pX = null;
            _this.pY = null;
            return _this;
        }
        var _proto = PanRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) actions.push(TOUCH_ACTION_PAN_Y);
            if (direction & DIRECTION_VERTICAL) actions.push(TOUCH_ACTION_PAN_X);
            return actions;
        };
        _proto.directionTest = function directionTest(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY; // lock to axis?
            if (!(direction & options.direction)) {
                if (options.direction & DIRECTION_HORIZONTAL) {
                    direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                    hasMoved = x !== this.pX;
                    distance = Math.abs(input.deltaX);
                } else {
                    direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                    hasMoved = y !== this.pY;
                    distance = Math.abs(input.deltaY);
                }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
        };
        _proto.attrTest = function attrTest(input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
        };
        _proto.emit = function emit(input) {
            this.pX = input.deltaX;
            this.pY = input.deltaY;
            var direction = directionStr(input.direction);
            if (direction) input.additionalEvent = this.options.event + direction;
            _AttrRecognizer.prototype.emit.call(this, input);
        };
        return PanRecognizer;
    }(AttrRecognizer);
    /**
   * @private
   * Swipe
   * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
   * @constructor
   * @extends AttrRecognizer
   */ var SwipeRecognizer = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(SwipeRecognizer, _AttrRecognizer);
        function SwipeRecognizer(options) {
            if (options === void 0) options = {};
            return _AttrRecognizer.call(this, _extends({
                event: "swipe",
                threshold: 10,
                velocity: 0.3,
                direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
                pointers: 1
            }, options)) || this;
        }
        var _proto = SwipeRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return PanRecognizer.prototype.getTouchAction.call(this);
        };
        _proto.attrTest = function attrTest(input) {
            var direction = this.options.direction;
            var velocity;
            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) velocity = input.overallVelocity;
            else if (direction & DIRECTION_HORIZONTAL) velocity = input.overallVelocityX;
            else if (direction & DIRECTION_VERTICAL) velocity = input.overallVelocityY;
            return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        };
        _proto.emit = function emit(input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) this.manager.emit(this.options.event + direction, input);
            this.manager.emit(this.options.event, input);
        };
        return SwipeRecognizer;
    }(AttrRecognizer);
    /**
   * @private
   * Pinch
   * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
   * @constructor
   * @extends AttrRecognizer
   */ var PinchRecognizer = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(PinchRecognizer, _AttrRecognizer);
        function PinchRecognizer(options) {
            if (options === void 0) options = {};
            return _AttrRecognizer.call(this, _extends({
                event: "pinch",
                threshold: 0,
                pointers: 2
            }, options)) || this;
        }
        var _proto = PinchRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_NONE
            ];
        };
        _proto.attrTest = function attrTest(input) {
            return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        };
        _proto.emit = function emit(input) {
            if (input.scale !== 1) {
                var inOut = input.scale < 1 ? "in" : "out";
                input.additionalEvent = this.options.event + inOut;
            }
            _AttrRecognizer.prototype.emit.call(this, input);
        };
        return PinchRecognizer;
    }(AttrRecognizer);
    /**
   * @private
   * Rotate
   * Recognized when two or more pointer are moving in a circular motion.
   * @constructor
   * @extends AttrRecognizer
   */ var RotateRecognizer = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(RotateRecognizer, _AttrRecognizer);
        function RotateRecognizer(options) {
            if (options === void 0) options = {};
            return _AttrRecognizer.call(this, _extends({
                event: "rotate",
                threshold: 0,
                pointers: 2
            }, options)) || this;
        }
        var _proto = RotateRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_NONE
            ];
        };
        _proto.attrTest = function attrTest(input) {
            return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        };
        return RotateRecognizer;
    }(AttrRecognizer);
    /**
   * @private
   * Press
   * Recognized when the pointer is down for x ms without any movement.
   * @constructor
   * @extends Recognizer
   */ var PressRecognizer = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(PressRecognizer, _Recognizer);
        function PressRecognizer(options) {
            var _this;
            if (options === void 0) options = {};
            _this = _Recognizer.call(this, _extends({
                event: "press",
                pointers: 1,
                time: 251,
                // minimal time of the pointer to be pressed
                threshold: 9
            }, options)) || this;
            _this._timer = null;
            _this._input = null;
            return _this;
        }
        var _proto = PressRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_AUTO
            ];
        };
        _proto.process = function process(input) {
            var _this2 = this;
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;
            this._input = input; // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) this.reset();
            else if (input.eventType & INPUT_START) {
                this.reset();
                this._timer = setTimeout(function() {
                    _this2.state = STATE_RECOGNIZED;
                    _this2.tryEmit();
                }, options.time);
            } else if (input.eventType & INPUT_END) return STATE_RECOGNIZED;
            return STATE_FAILED;
        };
        _proto.reset = function reset() {
            clearTimeout(this._timer);
        };
        _proto.emit = function emit(input) {
            if (this.state !== STATE_RECOGNIZED) return;
            if (input && input.eventType & INPUT_END) this.manager.emit(this.options.event + "up", input);
            else {
                this._input.timeStamp = now();
                this.manager.emit(this.options.event, this._input);
            }
        };
        return PressRecognizer;
    }(Recognizer);
    var defaults = {
        /**
     * @private
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */ domEvents: false,
        /**
     * @private
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */ touchAction: TOUCH_ACTION_COMPUTE,
        /**
     * @private
     * @type {Boolean}
     * @default true
     */ enable: true,
        /**
     * @private
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */ inputTarget: null,
        /**
     * @private
     * force an input class
     * @type {Null|Function}
     * @default null
     */ inputClass: null,
        /**
     * @private
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */ cssProps: {
            /**
       * @private
       * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
       * @type {String}
       * @default 'none'
       */ userSelect: "none",
            /**
       * @private
       * Disable the Windows Phone grippers when pressing an element.
       * @type {String}
       * @default 'none'
       */ touchSelect: "none",
            /**
       * @private
       * Disables the default callout shown when you touch and hold a touch target.
       * On iOS, when you touch and hold a touch target such as a link, Safari displays
       * a callout containing information about the link. This property allows you to disable that callout.
       * @type {String}
       * @default 'none'
       */ touchCallout: "none",
            /**
       * @private
       * Specifies whether zooming is enabled. Used by IE10>
       * @type {String}
       * @default 'none'
       */ contentZooming: "none",
            /**
       * @private
       * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
       * @type {String}
       * @default 'none'
       */ userDrag: "none",
            /**
       * @private
       * Overrides the highlight color shown when the user taps a link or a JavaScript
       * clickable element in iOS. This property obeys the alpha value, if specified.
       * @type {String}
       * @default 'rgba(0,0,0,0)'
       */ tapHighlightColor: "rgba(0,0,0,0)"
        }
    };
    /**
   * @private
   * Default recognizer setup when calling `Hammer()`
   * When creating a new Manager these will be skipped.
   * This is separated with other defaults because of tree-shaking.
   * @type {Array}
   */ var preset = [
        [
            RotateRecognizer,
            {
                enable: false
            }
        ],
        [
            PinchRecognizer,
            {
                enable: false
            },
            [
                "rotate"
            ]
        ],
        [
            SwipeRecognizer,
            {
                direction: DIRECTION_HORIZONTAL
            }
        ],
        [
            PanRecognizer,
            {
                direction: DIRECTION_HORIZONTAL
            },
            [
                "swipe"
            ]
        ],
        [
            TapRecognizer
        ],
        [
            TapRecognizer,
            {
                event: "doubletap",
                taps: 2
            },
            [
                "tap"
            ]
        ],
        [
            PressRecognizer
        ]
    ];
    var STOP = 1;
    var FORCED_STOP = 2;
    /**
   * @private
   * add/remove the css properties as defined in manager.options.cssProps
   * @param {Manager} manager
   * @param {Boolean} add
   */ function toggleCssProps(manager, add) {
        var element = manager.element;
        if (!element.style) return;
        var prop;
        each(manager.options.cssProps, function(value, name) {
            prop = prefixed(element.style, name);
            if (add) {
                manager.oldCssProps[prop] = element.style[prop];
                element.style[prop] = value;
            } else element.style[prop] = manager.oldCssProps[prop] || "";
        });
        if (!add) manager.oldCssProps = {};
    }
    /**
   * @private
   * trigger dom event
   * @param {String} event
   * @param {Object} data
   */ function triggerDomEvent(event, data) {
        var gestureEvent = document.createEvent("Event");
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
    }
    /**
  * @private
   * Manager
   * @param {HTMLElement} element
   * @param {Object} [options]
   * @constructor
   */ var Manager = /*#__PURE__*/ function() {
        function Manager(element, options) {
            var _this = this;
            this.options = assign$1({}, defaults, options || {});
            this.options.inputTarget = this.options.inputTarget || element;
            this.handlers = {};
            this.session = {};
            this.recognizers = [];
            this.oldCssProps = {};
            this.element = element;
            this.input = createInputInstance(this);
            this.touchAction = new TouchAction(this, this.options.touchAction);
            toggleCssProps(this, true);
            each(this.options.recognizers, function(item) {
                var recognizer = _this.add(new item[0](item[1]));
                item[2] && recognizer.recognizeWith(item[2]);
                item[3] && recognizer.requireFailure(item[3]);
            }, this);
        }
        /**
     * @private
     * set options
     * @param {Object} options
     * @returns {Manager}
     */ var _proto = Manager.prototype;
        _proto.set = function set(options) {
            assign$1(this.options, options); // Options that need a little more setup
            if (options.touchAction) this.touchAction.update();
            if (options.inputTarget) {
                // Clean up existing event listeners and reinitialize
                this.input.destroy();
                this.input.target = options.inputTarget;
                this.input.init();
            }
            return this;
        };
        /**
     * @private
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */ _proto.stop = function stop(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
        };
        /**
     * @private
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */ _proto.recognize = function recognize(inputData) {
            var session = this.session;
            if (session.stopped) return;
             // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);
            var recognizer;
            var recognizers = this.recognizers; // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
                session.curRecognizer = null;
                curRecognizer = null;
            }
            var i = 0;
            while(i < recognizers.length){
                recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.
                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                //      that is being recognized.
                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                //      this can be setup with the `recognizeWith()` method on the recognizer.
                if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer === curRecognizer || // 2
                recognizer.canRecognizeWith(curRecognizer))) // 3
                recognizer.recognize(inputData);
                else recognizer.reset();
                 // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                // current active recognizer. but only if we don't already have an active recognizer
                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                    session.curRecognizer = recognizer;
                    curRecognizer = recognizer;
                }
                i++;
            }
        };
        /**
     * @private
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */ _proto.get = function get(recognizer) {
            if (recognizer instanceof Recognizer) return recognizer;
            var recognizers = this.recognizers;
            for(var i = 0; i < recognizers.length; i++){
                if (recognizers[i].options.event === recognizer) return recognizers[i];
            }
            return null;
        };
        /**
     * @private add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */ _proto.add = function add(recognizer) {
            if (invokeArrayArg(recognizer, "add", this)) return this;
             // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) this.remove(existing);
            this.recognizers.push(recognizer);
            recognizer.manager = this;
            this.touchAction.update();
            return recognizer;
        };
        /**
     * @private
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */ _proto.remove = function remove(recognizer) {
            if (invokeArrayArg(recognizer, "remove", this)) return this;
            var targetRecognizer = this.get(recognizer); // let's make sure this recognizer exists
            if (recognizer) {
                var recognizers = this.recognizers;
                var index = inArray(recognizers, targetRecognizer);
                if (index !== -1) {
                    recognizers.splice(index, 1);
                    this.touchAction.update();
                }
            }
            return this;
        };
        /**
     * @private
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */ _proto.on = function on(events, handler) {
            if (events === undefined || handler === undefined) return this;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(handler);
            });
            return this;
        };
        /**
     * @private unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */ _proto.off = function off(events, handler) {
            if (events === undefined) return this;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                if (!handler) delete handlers[event];
                else handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            });
            return this;
        };
        /**
     * @private emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */ _proto.emit = function emit(event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) triggerDomEvent(event, data);
             // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) return;
            data.type = event;
            data.preventDefault = function() {
                data.srcEvent.preventDefault();
            };
            var i = 0;
            while(i < handlers.length){
                handlers[i](data);
                i++;
            }
        };
        /**
     * @private
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */ _proto.destroy = function destroy() {
            this.element && toggleCssProps(this, false);
            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
        };
        return Manager;
    }();
    var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var SINGLE_TOUCH_TARGET_EVENTS = "touchstart";
    var SINGLE_TOUCH_WINDOW_EVENTS = "touchstart touchmove touchend touchcancel";
    /**
   * @private
   * Touch events input
   * @constructor
   * @extends Input
   */ var SingleTouchInput = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(SingleTouchInput, _Input);
        function SingleTouchInput() {
            var _this;
            var proto = SingleTouchInput.prototype;
            proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
            proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.started = false;
            return _this;
        }
        var _proto = SingleTouchInput.prototype;
        _proto.handler = function handler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?
            if (type === INPUT_START) this.started = true;
            if (!this.started) return;
            var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) this.started = false;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        };
        return SingleTouchInput;
    }(Input);
    function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);
        if (type & (INPUT_END | INPUT_CANCEL)) all = uniqueArray(all.concat(changed), "identifier", true);
        return [
            all,
            changed
        ];
    }
    /**
   * @private
   * wrap a method with a deprecation warning and stack trace
   * @param {Function} method
   * @param {String} name
   * @param {String} message
   * @returns {Function} A new function wrapping the supplied method.
   */ function deprecate(method, name, message) {
        var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message + " AT \n";
        return function() {
            var e = new Error("get-stack-trace");
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
            var log = window.console && (window.console.warn || window.console.log);
            if (log) log.call(window.console, deprecationMessage, stack);
            return method.apply(this, arguments);
        };
    }
    /**
   * @private
   * extend object.
   * means that properties in dest will be overwritten by the ones in src.
   * @param {Object} dest
   * @param {Object} src
   * @param {Boolean} [merge=false]
   * @returns {Object} dest
   */ var extend = deprecate(function(dest, src, merge) {
        var keys = Object.keys(src);
        var i = 0;
        while(i < keys.length){
            if (!merge || merge && dest[keys[i]] === undefined) dest[keys[i]] = src[keys[i]];
            i++;
        }
        return dest;
    }, "extend", "Use `assign`.");
    /**
   * @private
   * merge the values from src in the dest.
   * means that properties that exist in dest will not be overwritten by src
   * @param {Object} dest
   * @param {Object} src
   * @returns {Object} dest
   */ var merge$1 = deprecate(function(dest, src) {
        return extend(dest, src, true);
    }, "merge", "Use `assign`.");
    /**
   * @private
   * simple class inheritance
   * @param {Function} child
   * @param {Function} base
   * @param {Object} [properties]
   */ function inherit(child, base, properties) {
        var baseP = base.prototype;
        var childP;
        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;
        if (properties) assign$1(childP, properties);
    }
    /**
   * @private
   * simple function bind
   * @param {Function} fn
   * @param {Object} context
   * @returns {Function}
   */ function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }
    /**
   * @private
   * Simple way to create a manager with a default set of recognizers.
   * @param {HTMLElement} element
   * @param {Object} [options]
   * @constructor
   */ var Hammer = /*#__PURE__*/ function() {
        var Hammer = /**
      * @private
      * @const {string}
      */ function Hammer(element, options) {
            if (options === void 0) options = {};
            return new Manager(element, _extends({
                recognizers: preset.concat()
            }, options));
        };
        Hammer.VERSION = "2.0.17-rc";
        Hammer.DIRECTION_ALL = DIRECTION_ALL;
        Hammer.DIRECTION_DOWN = DIRECTION_DOWN;
        Hammer.DIRECTION_LEFT = DIRECTION_LEFT;
        Hammer.DIRECTION_RIGHT = DIRECTION_RIGHT;
        Hammer.DIRECTION_UP = DIRECTION_UP;
        Hammer.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;
        Hammer.DIRECTION_VERTICAL = DIRECTION_VERTICAL;
        Hammer.DIRECTION_NONE = DIRECTION_NONE;
        Hammer.DIRECTION_DOWN = DIRECTION_DOWN;
        Hammer.INPUT_START = INPUT_START;
        Hammer.INPUT_MOVE = INPUT_MOVE;
        Hammer.INPUT_END = INPUT_END;
        Hammer.INPUT_CANCEL = INPUT_CANCEL;
        Hammer.STATE_POSSIBLE = STATE_POSSIBLE;
        Hammer.STATE_BEGAN = STATE_BEGAN;
        Hammer.STATE_CHANGED = STATE_CHANGED;
        Hammer.STATE_ENDED = STATE_ENDED;
        Hammer.STATE_RECOGNIZED = STATE_RECOGNIZED;
        Hammer.STATE_CANCELLED = STATE_CANCELLED;
        Hammer.STATE_FAILED = STATE_FAILED;
        Hammer.Manager = Manager;
        Hammer.Input = Input;
        Hammer.TouchAction = TouchAction;
        Hammer.TouchInput = TouchInput;
        Hammer.MouseInput = MouseInput;
        Hammer.PointerEventInput = PointerEventInput;
        Hammer.TouchMouseInput = TouchMouseInput;
        Hammer.SingleTouchInput = SingleTouchInput;
        Hammer.Recognizer = Recognizer;
        Hammer.AttrRecognizer = AttrRecognizer;
        Hammer.Tap = TapRecognizer;
        Hammer.Pan = PanRecognizer;
        Hammer.Swipe = SwipeRecognizer;
        Hammer.Pinch = PinchRecognizer;
        Hammer.Rotate = RotateRecognizer;
        Hammer.Press = PressRecognizer;
        Hammer.on = addEventListeners;
        Hammer.off = removeEventListeners;
        Hammer.each = each;
        Hammer.merge = merge$1;
        Hammer.extend = extend;
        Hammer.bindFn = bindFn;
        Hammer.assign = assign$1;
        Hammer.inherit = inherit;
        Hammer.bindFn = bindFn;
        Hammer.prefixed = prefixed;
        Hammer.toArray = toArray;
        Hammer.inArray = inArray;
        Hammer.uniqueArray = uniqueArray;
        Hammer.splitStr = splitStr;
        Hammer.boolOrFn = boolOrFn;
        Hammer.hasParent = hasParent;
        Hammer.addEventListeners = addEventListeners;
        Hammer.removeEventListeners = removeEventListeners;
        Hammer.defaults = assign$1({}, defaults, {
            preset: preset
        });
        return Hammer;
    }();
    var RealHammer = Hammer;
    function _createForOfIteratorHelper$3(o, allowArrayLike) {
        var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
        if (!it) {
            if (_Array$isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {};
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = it.call(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$3(o, minLen) {
        var _context15;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
        var n = _sliceInstanceProperty(_context15 = Object.prototype.toString.call(o)).call(_context15, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return _Array$from$1(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
    }
    function _arrayLikeToArray$3(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    /**
   * Use this symbol to delete properies in deepObjectAssign.
   */ var DELETE = _Symbol("DELETE");
    /**
   * Pure version of deepObjectAssign, it doesn't modify any of it's arguments.
   *
   * @param base - The base object that fullfils the whole interface T.
   * @param updates - Updates that may change or delete props.
   * @returns A brand new instance with all the supplied objects deeply merged.
   */ function pureDeepObjectAssign(base) {
        var _context;
        for(var _len = arguments.length, updates = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)updates[_key - 1] = arguments[_key];
        return deepObjectAssign.apply(void 0, _concatInstanceProperty(_context = [
            {},
            base
        ]).call(_context, updates));
    }
    /**
   * Deep version of object assign with additional deleting by the DELETE symbol.
   *
   * @param values - Objects to be deeply merged.
   * @returns The first object from values.
   */ function deepObjectAssign() {
        var merged = deepObjectAssignNonentry.apply(void 0, arguments);
        stripDelete(merged);
        return merged;
    }
    /**
   * Deep version of object assign with additional deleting by the DELETE symbol.
   *
   * @remarks
   * This doesn't strip the DELETE symbols so they may end up in the final object.
   * @param values - Objects to be deeply merged.
   * @returns The first object from values.
   */ function deepObjectAssignNonentry() {
        for(var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)values[_key2] = arguments[_key2];
        if (values.length < 2) return values[0];
        else if (values.length > 2) {
            var _context2;
            return deepObjectAssignNonentry.apply(void 0, _concatInstanceProperty(_context2 = [
                deepObjectAssign(values[0], values[1])
            ]).call(_context2, _toConsumableArray(_sliceInstanceProperty(values).call(values, 2))));
        }
        var a = values[0];
        var b = values[1];
        if (a instanceof Date && b instanceof Date) {
            a.setTime(b.getTime());
            return a;
        }
        var _iterator = _createForOfIteratorHelper$3(_Reflect$ownKeys(b)), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var prop = _step.value;
                if (!Object.prototype.propertyIsEnumerable.call(b, prop)) ;
                else if (b[prop] === DELETE) delete a[prop];
                else if (a[prop] !== null && b[prop] !== null && typeof a[prop] === "object" && typeof b[prop] === "object" && !_Array$isArray(a[prop]) && !_Array$isArray(b[prop])) a[prop] = deepObjectAssignNonentry(a[prop], b[prop]);
                else a[prop] = clone(b[prop]);
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        return a;
    }
    /**
   * Deep clone given object or array. In case of primitive simply return.
   *
   * @param a - Anything.
   * @returns Deep cloned object/array or unchanged a.
   */ function clone(a) {
        if (_Array$isArray(a)) return _mapInstanceProperty(a).call(a, function(value) {
            return clone(value);
        });
        else if (typeof a === "object" && a !== null) {
            if (a instanceof Date) return new Date(a.getTime());
            return deepObjectAssignNonentry({}, a);
        } else return a;
    }
    /**
   * Strip DELETE from given object.
   *
   * @param a - Object which may contain DELETE but won't after this is executed.
   */ function stripDelete(a) {
        for(var _i = 0, _Object$keys$1 = _Object$keys(a); _i < _Object$keys$1.length; _i++){
            var prop = _Object$keys$1[_i];
            if (a[prop] === DELETE) delete a[prop];
            else if (typeof a[prop] === "object" && a[prop] !== null) stripDelete(a[prop]);
        }
    }
    /**
   * Setup a mock hammer.js object, for unit testing.
   *
   * Inspiration: https://github.com/uber/deck.gl/pull/658
   *
   * @returns {{on: noop, off: noop, destroy: noop, emit: noop, get: get}}
   */ function hammerMock() {
        var noop = function noop() {};
        return {
            on: noop,
            off: noop,
            destroy: noop,
            emit: noop,
            get () {
                return {
                    set: noop
                };
            }
        };
    }
    var Hammer$1 = typeof window !== "undefined" ? window.Hammer || RealHammer : function() {
        // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.
        return hammerMock();
    };
    /**
   * Turn an element into an clickToUse element.
   * When not active, the element has a transparent overlay. When the overlay is
   * clicked, the mode is changed to active.
   * When active, the element is displayed with a blue border around it, and
   * the interactive contents of the element can be used. When clicked outside
   * the element, the elements mode is changed to inactive.
   *
   * @param {Element} container
   * @class Activator
   */ function Activator$1(container) {
        var _this = this, _context3;
        this._cleanupQueue = [];
        this.active = false;
        this._dom = {
            container,
            overlay: document.createElement("div")
        };
        this._dom.overlay.classList.add("vis-overlay");
        this._dom.container.appendChild(this._dom.overlay);
        this._cleanupQueue.push(function() {
            _this._dom.overlay.parentNode.removeChild(_this._dom.overlay);
        });
        var hammer = Hammer$1(this._dom.overlay);
        hammer.on("tap", _bindInstanceProperty$1(_context3 = this._onTapOverlay).call(_context3, this));
        this._cleanupQueue.push(function() {
            hammer.destroy();
        // FIXME: cleaning up hammer instances doesn't work (Timeline not removed
        // from memory)
        });
        // block all touch events (except tap)
        var events = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        _forEachInstanceProperty(events).call(events, function(event) {
            hammer.on(event, function(event) {
                event.srcEvent.stopPropagation();
            });
        });
        // attach a click event to the window, in order to deactivate when clicking outside the timeline
        if (document && document.body) {
            this._onClick = function(event) {
                if (!_hasParent(event.target, container)) _this.deactivate();
            };
            document.body.addEventListener("click", this._onClick);
            this._cleanupQueue.push(function() {
                document.body.removeEventListener("click", _this._onClick);
            });
        }
        // prepare escape key listener for deactivating when active
        this._escListener = function(event) {
            if ("key" in event ? event.key === "Escape" : event.keyCode === 27 /* the keyCode is for IE11 */ ) _this.deactivate();
        };
    }
    // turn into an event emitter
    Emitter(Activator$1.prototype);
    // The currently active activator
    Activator$1.current = null;
    /**
   * Destroy the activator. Cleans up all created DOM and event listeners
   */ Activator$1.prototype.destroy = function() {
        var _context4, _context5;
        this.deactivate();
        var _iterator2 = _createForOfIteratorHelper$3(_reverseInstanceProperty(_context4 = _spliceInstanceProperty(_context5 = this._cleanupQueue).call(_context5, 0)).call(_context4)), _step2;
        try {
            for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                var callback = _step2.value;
                callback();
            }
        } catch (err) {
            _iterator2.e(err);
        } finally{
            _iterator2.f();
        }
    };
    /**
   * Activate the element
   * Overlay is hidden, element is decorated with a blue shadow border
   */ Activator$1.prototype.activate = function() {
        // we allow only one active activator at a time
        if (Activator$1.current) Activator$1.current.deactivate();
        Activator$1.current = this;
        this.active = true;
        this._dom.overlay.style.display = "none";
        this._dom.container.classList.add("vis-active");
        this.emit("change");
        this.emit("activate");
        // ugly hack: bind ESC after emitting the events, as the Network rebinds all
        // keyboard events on a 'change' event
        document.body.addEventListener("keydown", this._escListener);
    };
    /**
   * Deactivate the element
   * Overlay is displayed on top of the element
   */ Activator$1.prototype.deactivate = function() {
        this.active = false;
        this._dom.overlay.style.display = "block";
        this._dom.container.classList.remove("vis-active");
        document.body.removeEventListener("keydown", this._escListener);
        this.emit("change");
        this.emit("deactivate");
    };
    /**
   * Handle a tap event: activate the container
   *
   * @param {Event}  event   The event
   * @private
   */ Activator$1.prototype._onTapOverlay = function(event) {
        // activate the container
        this.activate();
        event.srcEvent.stopPropagation();
    };
    /**
   * Test whether the element has the requested parent element somewhere in
   * its chain of parent nodes.
   *
   * @param {HTMLElement} element
   * @param {HTMLElement} parent
   * @returns {boolean} Returns true when the parent is found somewhere in the
   *                    chain of parent nodes.
   * @private
   */ function _hasParent(element, parent) {
        while(element){
            if (element === parent) return true;
            element = element.parentNode;
        }
        return false;
    }
    var isConstructor = isConstructor$4;
    var tryToString$1 = tryToString$6;
    var $TypeError$3 = TypeError;
    // `Assert: IsConstructor(argument) is true`
    var aConstructor$2 = function(argument) {
        if (isConstructor(argument)) return argument;
        throw new $TypeError$3(tryToString$1(argument) + " is not a constructor");
    };
    var $$k = _export;
    var getBuiltIn$4 = getBuiltIn$f;
    var apply$1 = functionApply;
    var bind$8 = functionBind;
    var aConstructor$1 = aConstructor$2;
    var anObject$3 = anObject$d;
    var isObject$6 = isObject$h;
    var create$5 = objectCreate;
    var fails$9 = fails$u;
    var nativeConstruct = getBuiltIn$4("Reflect", "construct");
    var ObjectPrototype = Object.prototype;
    var push$2 = [].push;
    // `Reflect.construct` method
    // https://tc39.es/ecma262/#sec-reflect.construct
    // MS Edge supports only 2 arguments and argumentsList argument is optional
    // FF Nightly sets third argument as `new.target`, but does not create `this` from it
    var NEW_TARGET_BUG = fails$9(function() {
        function F() {}
        return !(nativeConstruct(function() {}, [], F) instanceof F);
    });
    var ARGS_BUG = !fails$9(function() {
        nativeConstruct(function() {});
    });
    var FORCED$2 = NEW_TARGET_BUG || ARGS_BUG;
    $$k({
        target: "Reflect",
        stat: true,
        forced: FORCED$2,
        sham: FORCED$2
    }, {
        construct: function construct(Target, args /* , newTarget */ ) {
            aConstructor$1(Target);
            anObject$3(args);
            var newTarget = arguments.length < 3 ? Target : aConstructor$1(arguments[2]);
            if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
            if (Target === newTarget) {
                // w/o altered newTarget, optimization for 0-4 arguments
                switch(args.length){
                    case 0:
                        return new Target();
                    case 1:
                        return new Target(args[0]);
                    case 2:
                        return new Target(args[0], args[1]);
                    case 3:
                        return new Target(args[0], args[1], args[2]);
                    case 4:
                        return new Target(args[0], args[1], args[2], args[3]);
                }
                // w/o altered newTarget, lot of arguments case
                var $args = [
                    null
                ];
                apply$1(push$2, $args, args);
                return new (apply$1(bind$8, Target, $args))();
            }
            // with altered newTarget, not support built-in constructors
            var proto = newTarget.prototype;
            var instance = create$5(isObject$6(proto) ? proto : ObjectPrototype);
            var result = apply$1(Target, instance, args);
            return isObject$6(result) ? result : instance;
        }
    });
    var path$8 = path$o;
    var construct$2 = path$8.Reflect.construct;
    var parent$u = construct$2;
    var construct$1 = parent$u;
    var construct = construct$1;
    var _Reflect$construct = /*@__PURE__*/ getDefaultExportFromCjs(construct);
    var path$7 = path$o;
    var getOwnPropertySymbols$2 = path$7.Object.getOwnPropertySymbols;
    var parent$t = getOwnPropertySymbols$2;
    var getOwnPropertySymbols$1 = parent$t;
    var getOwnPropertySymbols = getOwnPropertySymbols$1;
    var _Object$getOwnPropertySymbols = /*@__PURE__*/ getDefaultExportFromCjs(getOwnPropertySymbols);
    var getOwnPropertyDescriptor$4 = {
        exports: {}
    };
    var $$j = _export;
    var fails$8 = fails$u;
    var toIndexedObject$1 = toIndexedObject$a;
    var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
    var DESCRIPTORS$5 = descriptors;
    var FORCED$1 = !DESCRIPTORS$5 || fails$8(function() {
        nativeGetOwnPropertyDescriptor(1);
    });
    // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
    $$j({
        target: "Object",
        stat: true,
        forced: FORCED$1,
        sham: !DESCRIPTORS$5
    }, {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
            return nativeGetOwnPropertyDescriptor(toIndexedObject$1(it), key);
        }
    });
    var path$6 = path$o;
    var Object$2 = path$6.Object;
    var getOwnPropertyDescriptor$3 = getOwnPropertyDescriptor$4.exports = function getOwnPropertyDescriptor(it, key) {
        return Object$2.getOwnPropertyDescriptor(it, key);
    };
    if (Object$2.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor$3.sham = true;
    var getOwnPropertyDescriptorExports = getOwnPropertyDescriptor$4.exports;
    var parent$s = getOwnPropertyDescriptorExports;
    var getOwnPropertyDescriptor$2 = parent$s;
    var getOwnPropertyDescriptor$1 = getOwnPropertyDescriptor$2;
    var _Object$getOwnPropertyDescriptor = /*@__PURE__*/ getDefaultExportFromCjs(getOwnPropertyDescriptor$1);
    var $$i = _export;
    var DESCRIPTORS$4 = descriptors;
    var ownKeys$2 = ownKeys$7;
    var toIndexedObject = toIndexedObject$a;
    var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
    var createProperty = createProperty$6;
    // `Object.getOwnPropertyDescriptors` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
    $$i({
        target: "Object",
        stat: true,
        sham: !DESCRIPTORS$4
    }, {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
            var O = toIndexedObject(object);
            var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$1.f;
            var keys = ownKeys$2(O);
            var result = {};
            var index = 0;
            var key, descriptor;
            while(keys.length > index){
                descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
                if (descriptor !== undefined) createProperty(result, key, descriptor);
            }
            return result;
        }
    });
    var path$5 = path$o;
    var getOwnPropertyDescriptors$2 = path$5.Object.getOwnPropertyDescriptors;
    var parent$r = getOwnPropertyDescriptors$2;
    var getOwnPropertyDescriptors$1 = parent$r;
    var getOwnPropertyDescriptors = getOwnPropertyDescriptors$1;
    var _Object$getOwnPropertyDescriptors = /*@__PURE__*/ getDefaultExportFromCjs(getOwnPropertyDescriptors);
    var defineProperties$4 = {
        exports: {}
    };
    var $$h = _export;
    var DESCRIPTORS$3 = descriptors;
    var defineProperties$3 = objectDefineProperties.f;
    // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    // eslint-disable-next-line es/no-object-defineproperties -- safe
    $$h({
        target: "Object",
        stat: true,
        forced: Object.defineProperties !== defineProperties$3,
        sham: !DESCRIPTORS$3
    }, {
        defineProperties: defineProperties$3
    });
    var path$4 = path$o;
    var Object$1 = path$4.Object;
    var defineProperties$2 = defineProperties$4.exports = function defineProperties(T, D) {
        return Object$1.defineProperties(T, D);
    };
    if (Object$1.defineProperties.sham) defineProperties$2.sham = true;
    var definePropertiesExports = defineProperties$4.exports;
    var parent$q = definePropertiesExports;
    var defineProperties$1 = parent$q;
    var defineProperties = defineProperties$1;
    var _Object$defineProperties = /*@__PURE__*/ getDefaultExportFromCjs(defineProperties);
    var defineProperty$2 = defineProperty$b;
    var _Object$defineProperty = /*@__PURE__*/ getDefaultExportFromCjs(defineProperty$2);
    function _assertThisInitialized(self1) {
        if (self1 === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self1;
    }
    var parent$p = create$7;
    var create$4 = parent$p;
    var parent$o = create$4;
    var create$3 = parent$o;
    var create$2 = create$3;
    var _Object$create = /*@__PURE__*/ getDefaultExportFromCjs(create$2);
    var $$g = _export;
    var setPrototypeOf$6 = objectSetPrototypeOf;
    // `Object.setPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.setprototypeof
    $$g({
        target: "Object",
        stat: true
    }, {
        setPrototypeOf: setPrototypeOf$6
    });
    var path$3 = path$o;
    var setPrototypeOf$5 = path$3.Object.setPrototypeOf;
    var parent$n = setPrototypeOf$5;
    var setPrototypeOf$4 = parent$n;
    var parent$m = setPrototypeOf$4;
    var setPrototypeOf$3 = parent$m;
    var parent$l = setPrototypeOf$3;
    var setPrototypeOf$2 = parent$l;
    var setPrototypeOf$1 = setPrototypeOf$2;
    var _Object$setPrototypeOf = /*@__PURE__*/ getDefaultExportFromCjs(setPrototypeOf$1);
    var parent$k = bind$c;
    var bind$7 = parent$k;
    var parent$j = bind$7;
    var bind$6 = parent$j;
    var bind$5 = bind$6;
    var _bindInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(bind$5);
    function _setPrototypeOf(o, p) {
        var _context;
        _setPrototypeOf = _Object$setPrototypeOf ? _bindInstanceProperty(_context = _Object$setPrototypeOf).call(_context) : function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf(o, p);
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
        subClass.prototype = _Object$create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        _Object$defineProperty$1(subClass, "prototype", {
            writable: false
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _possibleConstructorReturn(self1, call) {
        if (call && (_typeof$1(call) === "object" || typeof call === "function")) return call;
        else if (call !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(self1);
    }
    var parent$i = getPrototypeOf$4;
    var getPrototypeOf$3 = parent$i;
    var parent$h = getPrototypeOf$3;
    var getPrototypeOf$2 = parent$h;
    var getPrototypeOf$1 = getPrototypeOf$2;
    var _Object$getPrototypeOf = /*@__PURE__*/ getDefaultExportFromCjs(getPrototypeOf$1);
    function _getPrototypeOf(o) {
        var _context;
        _getPrototypeOf = _Object$setPrototypeOf ? _bindInstanceProperty(_context = _Object$getPrototypeOf).call(_context) : function _getPrototypeOf(o) {
            return o.__proto__ || _Object$getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
    }
    var regeneratorRuntime$1 = {
        exports: {}
    };
    var _typeof = {
        exports: {}
    };
    (function(module) {
        var _Symbol = symbol$1;
        var _Symbol$iterator = iterator$1;
        function _typeof(o) {
            "@babel/helpers - typeof";
            return module.exports = _typeof = "function" == typeof _Symbol && "symbol" == typeof _Symbol$iterator ? function(o) {
                return typeof o;
            } : function(o) {
                return o && "function" == typeof _Symbol && o.constructor === _Symbol && o !== _Symbol.prototype ? "symbol" : typeof o;
            }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
        }
        module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
    })(_typeof);
    var _typeofExports = _typeof.exports;
    var parent$g = forEach$5;
    var forEach$3 = parent$g;
    var parent$f = forEach$3;
    var forEach$2 = parent$f;
    var forEach$1 = forEach$2;
    var hasOwn$5 = hasOwnProperty_1;
    var ownKeys$1 = ownKeys$7;
    var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
    var definePropertyModule = objectDefineProperty;
    var copyConstructorProperties$1 = function(target, source, exceptions) {
        var keys = ownKeys$1(source);
        var defineProperty = definePropertyModule.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (!hasOwn$5(target, key) && !(exceptions && hasOwn$5(exceptions, key))) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
    };
    var isObject$5 = isObject$h;
    var createNonEnumerableProperty$3 = createNonEnumerableProperty$9;
    // `InstallErrorCause` abstract operation
    // https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause
    var installErrorCause$1 = function(O, options) {
        if (isObject$5(options) && "cause" in options) createNonEnumerableProperty$3(O, "cause", options.cause);
    };
    var uncurryThis$2 = functionUncurryThis;
    var $Error$1 = Error;
    var replace = uncurryThis$2("".replace);
    var TEST = function(arg) {
        return String(new $Error$1(arg).stack);
    }("zxcasd");
    // eslint-disable-next-line redos/no-vulnerable -- safe
    var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
    var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
    var errorStackClear = function(stack, dropEntries) {
        if (IS_V8_OR_CHAKRA_STACK && typeof stack == "string" && !$Error$1.prepareStackTrace) while(dropEntries--)stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, "");
        return stack;
    };
    var fails$7 = fails$u;
    var createPropertyDescriptor$1 = createPropertyDescriptor$7;
    var errorStackInstallable = !fails$7(function() {
        var error = new Error("a");
        if (!("stack" in error)) return true;
        // eslint-disable-next-line es/no-object-defineproperty -- safe
        Object.defineProperty(error, "stack", createPropertyDescriptor$1(1, 7));
        return error.stack !== 7;
    });
    var createNonEnumerableProperty$2 = createNonEnumerableProperty$9;
    var clearErrorStack = errorStackClear;
    var ERROR_STACK_INSTALLABLE = errorStackInstallable;
    // non-standard V8
    var captureStackTrace = Error.captureStackTrace;
    var errorStackInstall = function(error, C, stack, dropEntries) {
        if (ERROR_STACK_INSTALLABLE) {
            if (captureStackTrace) captureStackTrace(error, C);
            else createNonEnumerableProperty$2(error, "stack", clearErrorStack(stack, dropEntries));
        }
    };
    var bind$4 = functionBindContext;
    var call$6 = functionCall;
    var anObject$2 = anObject$d;
    var tryToString = tryToString$6;
    var isArrayIteratorMethod = isArrayIteratorMethod$2;
    var lengthOfArrayLike$1 = lengthOfArrayLike$d;
    var isPrototypeOf$7 = objectIsPrototypeOf;
    var getIterator$6 = getIterator$8;
    var getIteratorMethod = getIteratorMethod$9;
    var iteratorClose = iteratorClose$2;
    var $TypeError$2 = TypeError;
    var Result = function(stopped, result) {
        this.stopped = stopped;
        this.result = result;
    };
    var ResultPrototype = Result.prototype;
    var iterate$7 = function(iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_RECORD = !!(options && options.IS_RECORD);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = bind$4(unboundFunction, that);
        var iterator, iterFn, index, length, result, next, step;
        var stop = function(condition) {
            if (iterator) iteratorClose(iterator, "normal", condition);
            return new Result(true, condition);
        };
        var callFn = function(value) {
            if (AS_ENTRIES) {
                anObject$2(value);
                return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
            }
            return INTERRUPTED ? fn(value, stop) : fn(value);
        };
        if (IS_RECORD) iterator = iterable.iterator;
        else if (IS_ITERATOR) iterator = iterable;
        else {
            iterFn = getIteratorMethod(iterable);
            if (!iterFn) throw new $TypeError$2(tryToString(iterable) + " is not iterable");
            // optimisation for array iterators
            if (isArrayIteratorMethod(iterFn)) {
                for(index = 0, length = lengthOfArrayLike$1(iterable); length > index; index++){
                    result = callFn(iterable[index]);
                    if (result && isPrototypeOf$7(ResultPrototype, result)) return result;
                }
                return new Result(false);
            }
            iterator = getIterator$6(iterable, iterFn);
        }
        next = IS_RECORD ? iterable.next : iterator.next;
        while(!(step = call$6(next, iterator)).done){
            try {
                result = callFn(step.value);
            } catch (error) {
                iteratorClose(iterator, "throw", error);
            }
            if (typeof result == "object" && result && isPrototypeOf$7(ResultPrototype, result)) return result;
        }
        return new Result(false);
    };
    var toString$1 = toString$7;
    var normalizeStringArgument$1 = function(argument, $default) {
        return argument === undefined ? arguments.length < 2 ? "" : $default : toString$1(argument);
    };
    var $$f = _export;
    var isPrototypeOf$6 = objectIsPrototypeOf;
    var getPrototypeOf = objectGetPrototypeOf;
    var setPrototypeOf = objectSetPrototypeOf;
    var copyConstructorProperties = copyConstructorProperties$1;
    var create$1 = objectCreate;
    var createNonEnumerableProperty$1 = createNonEnumerableProperty$9;
    var createPropertyDescriptor = createPropertyDescriptor$7;
    var installErrorCause = installErrorCause$1;
    var installErrorStack = errorStackInstall;
    var iterate$6 = iterate$7;
    var normalizeStringArgument = normalizeStringArgument$1;
    var wellKnownSymbol$3 = wellKnownSymbol$n;
    var TO_STRING_TAG = wellKnownSymbol$3("toStringTag");
    var $Error = Error;
    var push$1 = [].push;
    var $AggregateError = function AggregateError(errors, message /* , options */ ) {
        var isInstance = isPrototypeOf$6(AggregateErrorPrototype, this);
        var that;
        if (setPrototypeOf) that = setPrototypeOf(new $Error(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
        else {
            that = isInstance ? this : create$1(AggregateErrorPrototype);
            createNonEnumerableProperty$1(that, TO_STRING_TAG, "Error");
        }
        if (message !== undefined) createNonEnumerableProperty$1(that, "message", normalizeStringArgument(message));
        installErrorStack(that, $AggregateError, that.stack, 1);
        if (arguments.length > 2) installErrorCause(that, arguments[2]);
        var errorsArray = [];
        iterate$6(errors, push$1, {
            that: errorsArray
        });
        createNonEnumerableProperty$1(that, "errors", errorsArray);
        return that;
    };
    if (setPrototypeOf) setPrototypeOf($AggregateError, $Error);
    else copyConstructorProperties($AggregateError, $Error, {
        name: true
    });
    var AggregateErrorPrototype = $AggregateError.prototype = create$1($Error.prototype, {
        constructor: createPropertyDescriptor(1, $AggregateError),
        message: createPropertyDescriptor(1, ""),
        name: createPropertyDescriptor(1, "AggregateError")
    });
    // `AggregateError` constructor
    // https://tc39.es/ecma262/#sec-aggregate-error-constructor
    $$f({
        global: true,
        constructor: true,
        arity: 2
    }, {
        AggregateError: $AggregateError
    });
    var getBuiltIn$3 = getBuiltIn$f;
    var defineBuiltInAccessor$1 = defineBuiltInAccessor$3;
    var wellKnownSymbol$2 = wellKnownSymbol$n;
    var DESCRIPTORS$2 = descriptors;
    var SPECIES$2 = wellKnownSymbol$2("species");
    var setSpecies$2 = function(CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn$3(CONSTRUCTOR_NAME);
        if (DESCRIPTORS$2 && Constructor && !Constructor[SPECIES$2]) defineBuiltInAccessor$1(Constructor, SPECIES$2, {
            configurable: true,
            get: function() {
                return this;
            }
        });
    };
    var isPrototypeOf$5 = objectIsPrototypeOf;
    var $TypeError$1 = TypeError;
    var anInstance$3 = function(it, Prototype) {
        if (isPrototypeOf$5(Prototype, it)) return it;
        throw new $TypeError$1("Incorrect invocation");
    };
    var anObject$1 = anObject$d;
    var aConstructor = aConstructor$2;
    var isNullOrUndefined$2 = isNullOrUndefined$6;
    var wellKnownSymbol$1 = wellKnownSymbol$n;
    var SPECIES$1 = wellKnownSymbol$1("species");
    // `SpeciesConstructor` abstract operation
    // https://tc39.es/ecma262/#sec-speciesconstructor
    var speciesConstructor$2 = function(O, defaultConstructor) {
        var C = anObject$1(O).constructor;
        var S;
        return C === undefined || isNullOrUndefined$2(S = anObject$1(C)[SPECIES$1]) ? defaultConstructor : aConstructor(S);
    };
    var userAgent$4 = engineUserAgent;
    // eslint-disable-next-line redos/no-vulnerable -- safe
    var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent$4);
    var global$6 = global$p;
    var apply = functionApply;
    var bind$3 = functionBindContext;
    var isCallable$4 = isCallable$m;
    var hasOwn$4 = hasOwnProperty_1;
    var fails$6 = fails$u;
    var html = html$2;
    var arraySlice$1 = arraySlice$5;
    var createElement = documentCreateElement$1;
    var validateArgumentsLength = validateArgumentsLength$2;
    var IS_IOS$1 = engineIsIos;
    var IS_NODE$3 = engineIsNode;
    var set$3 = global$6.setImmediate;
    var clear = global$6.clearImmediate;
    var process$2 = global$6.process;
    var Dispatch = global$6.Dispatch;
    var Function$1 = global$6.Function;
    var MessageChannel = global$6.MessageChannel;
    var String$1 = global$6.String;
    var counter = 0;
    var queue$2 = {};
    var ONREADYSTATECHANGE = "onreadystatechange";
    var $location, defer, channel, port;
    fails$6(function() {
        // Deno throws a ReferenceError on `location` access without `--location` flag
        $location = global$6.location;
    });
    var run = function(id) {
        if (hasOwn$4(queue$2, id)) {
            var fn = queue$2[id];
            delete queue$2[id];
            fn();
        }
    };
    var runner = function(id) {
        return function() {
            run(id);
        };
    };
    var eventListener = function(event) {
        run(event.data);
    };
    var globalPostMessageDefer = function(id) {
        // old engines have not location.origin
        global$6.postMessage(String$1(id), $location.protocol + "//" + $location.host);
    };
    // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
    if (!set$3 || !clear) {
        set$3 = function setImmediate(handler) {
            validateArgumentsLength(arguments.length, 1);
            var fn = isCallable$4(handler) ? handler : Function$1(handler);
            var args = arraySlice$1(arguments, 1);
            queue$2[++counter] = function() {
                apply(fn, undefined, args);
            };
            defer(counter);
            return counter;
        };
        clear = function clearImmediate(id) {
            delete queue$2[id];
        };
        // Node.js 0.8-
        if (IS_NODE$3) defer = function(id) {
            process$2.nextTick(runner(id));
        };
        else if (Dispatch && Dispatch.now) defer = function(id) {
            Dispatch.now(runner(id));
        };
        else if (MessageChannel && !IS_IOS$1) {
            channel = new MessageChannel();
            port = channel.port2;
            channel.port1.onmessage = eventListener;
            defer = bind$3(port.postMessage, port);
        // Browsers with postMessage, skip WebWorkers
        // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
        } else if (global$6.addEventListener && isCallable$4(global$6.postMessage) && !global$6.importScripts && $location && $location.protocol !== "file:" && !fails$6(globalPostMessageDefer)) {
            defer = globalPostMessageDefer;
            global$6.addEventListener("message", eventListener, false);
        // IE8-
        } else if (ONREADYSTATECHANGE in createElement("script")) defer = function(id) {
            html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
                html.removeChild(this);
                run(id);
            };
        };
        else defer = function(id) {
            setTimeout(runner(id), 0);
        };
    }
    var task$1 = {
        set: set$3,
        clear: clear
    };
    var Queue$3 = function() {
        this.head = null;
        this.tail = null;
    };
    Queue$3.prototype = {
        add: function(item) {
            var entry = {
                item: item,
                next: null
            };
            var tail = this.tail;
            if (tail) tail.next = entry;
            else this.head = entry;
            this.tail = entry;
        },
        get: function() {
            var entry = this.head;
            if (entry) {
                var next = this.head = entry.next;
                if (next === null) this.tail = null;
                return entry.item;
            }
        }
    };
    var queue$1 = Queue$3;
    var userAgent$3 = engineUserAgent;
    var engineIsIosPebble = /ipad|iphone|ipod/i.test(userAgent$3) && typeof Pebble != "undefined";
    var userAgent$2 = engineUserAgent;
    var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent$2);
    var global$5 = global$p;
    var bind$2 = functionBindContext;
    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
    var macrotask = task$1.set;
    var Queue$2 = queue$1;
    var IS_IOS = engineIsIos;
    var IS_IOS_PEBBLE = engineIsIosPebble;
    var IS_WEBOS_WEBKIT = engineIsWebosWebkit;
    var IS_NODE$2 = engineIsNode;
    var MutationObserver = global$5.MutationObserver || global$5.WebKitMutationObserver;
    var document$2 = global$5.document;
    var process$1 = global$5.process;
    var Promise$1 = global$5.Promise;
    // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
    var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global$5, "queueMicrotask");
    var microtask$1 = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
    var notify$1, toggle, node, promise$5, then;
    // modern engines have queueMicrotask method
    if (!microtask$1) {
        var queue = new Queue$2();
        var flush = function() {
            var parent, fn;
            if (IS_NODE$2 && (parent = process$1.domain)) parent.exit();
            while(fn = queue.get())try {
                fn();
            } catch (error) {
                if (queue.head) notify$1();
                throw error;
            }
            if (parent) parent.enter();
        };
        // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
        // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
        if (!IS_IOS && !IS_NODE$2 && !IS_WEBOS_WEBKIT && MutationObserver && document$2) {
            toggle = true;
            node = document$2.createTextNode("");
            new MutationObserver(flush).observe(node, {
                characterData: true
            });
            notify$1 = function() {
                node.data = toggle = !toggle;
            };
        // environments with maybe non-completely correct, but existent Promise
        } else if (!IS_IOS_PEBBLE && Promise$1 && Promise$1.resolve) {
            // Promise.resolve without an argument throws an error in LG WebOS 2
            promise$5 = Promise$1.resolve(undefined);
            // workaround of WebKit ~ iOS Safari 10.1 bug
            promise$5.constructor = Promise$1;
            then = bind$2(promise$5.then, promise$5);
            notify$1 = function() {
                then(flush);
            };
        // Node.js without promises
        } else if (IS_NODE$2) notify$1 = function() {
            process$1.nextTick(flush);
        };
        else {
            // `webpack` dev server bug on IE global methods - use bind(fn, global)
            macrotask = bind$2(macrotask, global$5);
            notify$1 = function() {
                macrotask(flush);
            };
        }
        microtask$1 = function(fn) {
            if (!queue.head) notify$1();
            queue.add(fn);
        };
    }
    var microtask_1 = microtask$1;
    var hostReportErrors$1 = function(a, b) {
        try {
            // eslint-disable-next-line no-console -- safe
            arguments.length === 1 ? console.error(a) : console.error(a, b);
        } catch (error) {}
    };
    var perform$6 = function(exec) {
        try {
            return {
                error: false,
                value: exec()
            };
        } catch (error) {
            return {
                error: true,
                value: error
            };
        }
    };
    var global$4 = global$p;
    var promiseNativeConstructor = global$4.Promise;
    /* global Deno -- Deno case */ var engineIsDeno = typeof Deno == "object" && Deno && typeof Deno.version == "object";
    var IS_DENO$1 = engineIsDeno;
    var IS_NODE$1 = engineIsNode;
    var engineIsBrowser = !IS_DENO$1 && !IS_NODE$1 && typeof window == "object" && typeof document == "object";
    var global$3 = global$p;
    var NativePromiseConstructor$5 = promiseNativeConstructor;
    var isCallable$3 = isCallable$m;
    var isForced = isForced_1;
    var inspectSource = inspectSource$2;
    var wellKnownSymbol = wellKnownSymbol$n;
    var IS_BROWSER = engineIsBrowser;
    var IS_DENO = engineIsDeno;
    var V8_VERSION = engineV8Version;
    var NativePromisePrototype$2 = NativePromiseConstructor$5 && NativePromiseConstructor$5.prototype;
    var SPECIES = wellKnownSymbol("species");
    var SUBCLASSING = false;
    var NATIVE_PROMISE_REJECTION_EVENT$1 = isCallable$3(global$3.PromiseRejectionEvent);
    var FORCED_PROMISE_CONSTRUCTOR$5 = isForced("Promise", function() {
        var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor$5);
        var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor$5);
        // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
        // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
        // We can't detect it synchronously, so just check versions
        if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
        // We need Promise#{ catch, finally } in the pure version for preventing prototype pollution
        if (!(NativePromisePrototype$2["catch"] && NativePromisePrototype$2["finally"])) return true;
        // We can't use @@species feature detection in V8 since it causes
        // deoptimization and performance degradation
        // https://github.com/zloirock/core-js/issues/679
        if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
            // Detect correctness of subclassing with @@species support
            var promise = new NativePromiseConstructor$5(function(resolve) {
                resolve(1);
            });
            var FakePromise = function(exec) {
                exec(function() {}, function() {});
            };
            var constructor = promise.constructor = {};
            constructor[SPECIES] = FakePromise;
            SUBCLASSING = promise.then(function() {}) instanceof FakePromise;
            if (!SUBCLASSING) return true;
        // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
        }
        return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT$1;
    });
    var promiseConstructorDetection = {
        CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR$5,
        REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT$1,
        SUBCLASSING: SUBCLASSING
    };
    var newPromiseCapability$2 = {};
    var aCallable$6 = aCallable$e;
    var $TypeError = TypeError;
    var PromiseCapability = function(C) {
        var resolve, reject;
        this.promise = new C(function($$resolve, $$reject) {
            if (resolve !== undefined || reject !== undefined) throw new $TypeError("Bad Promise constructor");
            resolve = $$resolve;
            reject = $$reject;
        });
        this.resolve = aCallable$6(resolve);
        this.reject = aCallable$6(reject);
    };
    // `NewPromiseCapability` abstract operation
    // https://tc39.es/ecma262/#sec-newpromisecapability
    newPromiseCapability$2.f = function(C) {
        return new PromiseCapability(C);
    };
    var $$e = _export;
    var IS_NODE = engineIsNode;
    var global$2 = global$p;
    var call$5 = functionCall;
    var defineBuiltIn$1 = defineBuiltIn$6;
    var setToStringTag$1 = setToStringTag$7;
    var setSpecies$1 = setSpecies$2;
    var aCallable$5 = aCallable$e;
    var isCallable$2 = isCallable$m;
    var isObject$4 = isObject$h;
    var anInstance$2 = anInstance$3;
    var speciesConstructor$1 = speciesConstructor$2;
    var task = task$1.set;
    var microtask = microtask_1;
    var hostReportErrors = hostReportErrors$1;
    var perform$5 = perform$6;
    var Queue$1 = queue$1;
    var InternalStateModule$2 = internalState;
    var NativePromiseConstructor$4 = promiseNativeConstructor;
    var PromiseConstructorDetection = promiseConstructorDetection;
    var newPromiseCapabilityModule$7 = newPromiseCapability$2;
    var PROMISE = "Promise";
    var FORCED_PROMISE_CONSTRUCTOR$4 = PromiseConstructorDetection.CONSTRUCTOR;
    var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
    PromiseConstructorDetection.SUBCLASSING;
    var getInternalPromiseState = InternalStateModule$2.getterFor(PROMISE);
    var setInternalState$2 = InternalStateModule$2.set;
    var NativePromisePrototype$1 = NativePromiseConstructor$4 && NativePromiseConstructor$4.prototype;
    var PromiseConstructor = NativePromiseConstructor$4;
    var PromisePrototype = NativePromisePrototype$1;
    var TypeError$1 = global$2.TypeError;
    var document$1 = global$2.document;
    var process = global$2.process;
    var newPromiseCapability$1 = newPromiseCapabilityModule$7.f;
    var newGenericPromiseCapability = newPromiseCapability$1;
    var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$2.dispatchEvent);
    var UNHANDLED_REJECTION = "unhandledrejection";
    var REJECTION_HANDLED = "rejectionhandled";
    var PENDING = 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    var HANDLED = 1;
    var UNHANDLED = 2;
    var Internal, OwnPromiseCapability, PromiseWrapper;
    // helpers
    var isThenable = function(it) {
        var then;
        return isObject$4(it) && isCallable$2(then = it.then) ? then : false;
    };
    var callReaction = function(reaction, state) {
        var value = state.value;
        var ok = state.state === FULFILLED;
        var handler = ok ? reaction.ok : reaction.fail;
        var resolve = reaction.resolve;
        var reject = reaction.reject;
        var domain = reaction.domain;
        var result, then, exited;
        try {
            if (handler) {
                if (!ok) {
                    if (state.rejection === UNHANDLED) onHandleUnhandled(state);
                    state.rejection = HANDLED;
                }
                if (handler === true) result = value;
                else {
                    if (domain) domain.enter();
                    result = handler(value); // can throw
                    if (domain) {
                        domain.exit();
                        exited = true;
                    }
                }
                if (result === reaction.promise) reject(new TypeError$1("Promise-chain cycle"));
                else if (then = isThenable(result)) call$5(then, result, resolve, reject);
                else resolve(result);
            } else reject(value);
        } catch (error) {
            if (domain && !exited) domain.exit();
            reject(error);
        }
    };
    var notify = function(state, isReject) {
        if (state.notified) return;
        state.notified = true;
        microtask(function() {
            var reactions = state.reactions;
            var reaction;
            while(reaction = reactions.get())callReaction(reaction, state);
            state.notified = false;
            if (isReject && !state.rejection) onUnhandled(state);
        });
    };
    var dispatchEvent = function(name, promise, reason) {
        var event, handler;
        if (DISPATCH_EVENT) {
            event = document$1.createEvent("Event");
            event.promise = promise;
            event.reason = reason;
            event.initEvent(name, false, true);
            global$2.dispatchEvent(event);
        } else event = {
            promise: promise,
            reason: reason
        };
        if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global$2["on" + name])) handler(event);
        else if (name === UNHANDLED_REJECTION) hostReportErrors("Unhandled promise rejection", reason);
    };
    var onUnhandled = function(state) {
        call$5(task, global$2, function() {
            var promise = state.facade;
            var value = state.value;
            var IS_UNHANDLED = isUnhandled(state);
            var result;
            if (IS_UNHANDLED) {
                result = perform$5(function() {
                    if (IS_NODE) process.emit("unhandledRejection", value, promise);
                    else dispatchEvent(UNHANDLED_REJECTION, promise, value);
                });
                // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
                state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
                if (result.error) throw result.value;
            }
        });
    };
    var isUnhandled = function(state) {
        return state.rejection !== HANDLED && !state.parent;
    };
    var onHandleUnhandled = function(state) {
        call$5(task, global$2, function() {
            var promise = state.facade;
            if (IS_NODE) process.emit("rejectionHandled", promise);
            else dispatchEvent(REJECTION_HANDLED, promise, state.value);
        });
    };
    var bind$1 = function(fn, state, unwrap) {
        return function(value) {
            fn(state, value, unwrap);
        };
    };
    var internalReject = function(state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;
        state.value = value;
        state.state = REJECTED;
        notify(state, true);
    };
    var internalResolve = function(state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;
        try {
            if (state.facade === value) throw new TypeError$1("Promise can't be resolved itself");
            var then = isThenable(value);
            if (then) microtask(function() {
                var wrapper = {
                    done: false
                };
                try {
                    call$5(then, value, bind$1(internalResolve, wrapper, state), bind$1(internalReject, wrapper, state));
                } catch (error) {
                    internalReject(wrapper, error, state);
                }
            });
            else {
                state.value = value;
                state.state = FULFILLED;
                notify(state, false);
            }
        } catch (error) {
            internalReject({
                done: false
            }, error, state);
        }
    };
    // constructor polyfill
    if (FORCED_PROMISE_CONSTRUCTOR$4) {
        // 25.4.3.1 Promise(executor)
        PromiseConstructor = function Promise(executor) {
            anInstance$2(this, PromisePrototype);
            aCallable$5(executor);
            call$5(Internal, this);
            var state = getInternalPromiseState(this);
            try {
                executor(bind$1(internalResolve, state), bind$1(internalReject, state));
            } catch (error) {
                internalReject(state, error);
            }
        };
        PromisePrototype = PromiseConstructor.prototype;
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        Internal = function Promise(executor) {
            setInternalState$2(this, {
                type: PROMISE,
                done: false,
                notified: false,
                parent: false,
                reactions: new Queue$1(),
                rejection: false,
                state: PENDING,
                value: undefined
            });
        };
        // `Promise.prototype.then` method
        // https://tc39.es/ecma262/#sec-promise.prototype.then
        Internal.prototype = defineBuiltIn$1(PromisePrototype, "then", function then(onFulfilled, onRejected) {
            var state = getInternalPromiseState(this);
            var reaction = newPromiseCapability$1(speciesConstructor$1(this, PromiseConstructor));
            state.parent = true;
            reaction.ok = isCallable$2(onFulfilled) ? onFulfilled : true;
            reaction.fail = isCallable$2(onRejected) && onRejected;
            reaction.domain = IS_NODE ? process.domain : undefined;
            if (state.state === PENDING) state.reactions.add(reaction);
            else microtask(function() {
                callReaction(reaction, state);
            });
            return reaction.promise;
        });
        OwnPromiseCapability = function() {
            var promise = new Internal();
            var state = getInternalPromiseState(promise);
            this.promise = promise;
            this.resolve = bind$1(internalResolve, state);
            this.reject = bind$1(internalReject, state);
        };
        newPromiseCapabilityModule$7.f = newPromiseCapability$1 = function(C) {
            return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
        };
    }
    $$e({
        global: true,
        constructor: true,
        wrap: true,
        forced: FORCED_PROMISE_CONSTRUCTOR$4
    }, {
        Promise: PromiseConstructor
    });
    setToStringTag$1(PromiseConstructor, PROMISE, false, true);
    setSpecies$1(PROMISE);
    var NativePromiseConstructor$3 = promiseNativeConstructor;
    var checkCorrectnessOfIteration = checkCorrectnessOfIteration$2;
    var FORCED_PROMISE_CONSTRUCTOR$3 = promiseConstructorDetection.CONSTRUCTOR;
    var promiseStaticsIncorrectIteration = FORCED_PROMISE_CONSTRUCTOR$3 || !checkCorrectnessOfIteration(function(iterable) {
        NativePromiseConstructor$3.all(iterable).then(undefined, function() {});
    });
    var $$d = _export;
    var call$4 = functionCall;
    var aCallable$4 = aCallable$e;
    var newPromiseCapabilityModule$6 = newPromiseCapability$2;
    var perform$4 = perform$6;
    var iterate$5 = iterate$7;
    var PROMISE_STATICS_INCORRECT_ITERATION$3 = promiseStaticsIncorrectIteration;
    // `Promise.all` method
    // https://tc39.es/ecma262/#sec-promise.all
    $$d({
        target: "Promise",
        stat: true,
        forced: PROMISE_STATICS_INCORRECT_ITERATION$3
    }, {
        all: function all(iterable) {
            var C = this;
            var capability = newPromiseCapabilityModule$6.f(C);
            var resolve = capability.resolve;
            var reject = capability.reject;
            var result = perform$4(function() {
                var $promiseResolve = aCallable$4(C.resolve);
                var values = [];
                var counter = 0;
                var remaining = 1;
                iterate$5(iterable, function(promise) {
                    var index = counter++;
                    var alreadyCalled = false;
                    remaining++;
                    call$4($promiseResolve, C, promise).then(function(value) {
                        if (alreadyCalled) return;
                        alreadyCalled = true;
                        values[index] = value;
                        --remaining || resolve(values);
                    }, reject);
                });
                --remaining || resolve(values);
            });
            if (result.error) reject(result.value);
            return capability.promise;
        }
    });
    var $$c = _export;
    var FORCED_PROMISE_CONSTRUCTOR$2 = promiseConstructorDetection.CONSTRUCTOR;
    var NativePromiseConstructor$2 = promiseNativeConstructor;
    NativePromiseConstructor$2 && NativePromiseConstructor$2.prototype;
    // `Promise.prototype.catch` method
    // https://tc39.es/ecma262/#sec-promise.prototype.catch
    $$c({
        target: "Promise",
        proto: true,
        forced: FORCED_PROMISE_CONSTRUCTOR$2,
        real: true
    }, {
        "catch": function(onRejected) {
            return this.then(undefined, onRejected);
        }
    });
    var $$b = _export;
    var call$3 = functionCall;
    var aCallable$3 = aCallable$e;
    var newPromiseCapabilityModule$5 = newPromiseCapability$2;
    var perform$3 = perform$6;
    var iterate$4 = iterate$7;
    var PROMISE_STATICS_INCORRECT_ITERATION$2 = promiseStaticsIncorrectIteration;
    // `Promise.race` method
    // https://tc39.es/ecma262/#sec-promise.race
    $$b({
        target: "Promise",
        stat: true,
        forced: PROMISE_STATICS_INCORRECT_ITERATION$2
    }, {
        race: function race(iterable) {
            var C = this;
            var capability = newPromiseCapabilityModule$5.f(C);
            var reject = capability.reject;
            var result = perform$3(function() {
                var $promiseResolve = aCallable$3(C.resolve);
                iterate$4(iterable, function(promise) {
                    call$3($promiseResolve, C, promise).then(capability.resolve, reject);
                });
            });
            if (result.error) reject(result.value);
            return capability.promise;
        }
    });
    var $$a = _export;
    var call$2 = functionCall;
    var newPromiseCapabilityModule$4 = newPromiseCapability$2;
    var FORCED_PROMISE_CONSTRUCTOR$1 = promiseConstructorDetection.CONSTRUCTOR;
    // `Promise.reject` method
    // https://tc39.es/ecma262/#sec-promise.reject
    $$a({
        target: "Promise",
        stat: true,
        forced: FORCED_PROMISE_CONSTRUCTOR$1
    }, {
        reject: function reject(r) {
            var capability = newPromiseCapabilityModule$4.f(this);
            call$2(capability.reject, undefined, r);
            return capability.promise;
        }
    });
    var anObject = anObject$d;
    var isObject$3 = isObject$h;
    var newPromiseCapability = newPromiseCapability$2;
    var promiseResolve$2 = function(C, x) {
        anObject(C);
        if (isObject$3(x) && x.constructor === C) return x;
        var promiseCapability = newPromiseCapability.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
    };
    var $$9 = _export;
    var getBuiltIn$2 = getBuiltIn$f;
    var IS_PURE = isPure;
    var NativePromiseConstructor$1 = promiseNativeConstructor;
    var FORCED_PROMISE_CONSTRUCTOR = promiseConstructorDetection.CONSTRUCTOR;
    var promiseResolve$1 = promiseResolve$2;
    var PromiseConstructorWrapper = getBuiltIn$2("Promise");
    var CHECK_WRAPPER = !FORCED_PROMISE_CONSTRUCTOR;
    // `Promise.resolve` method
    // https://tc39.es/ecma262/#sec-promise.resolve
    $$9({
        target: "Promise",
        stat: true,
        forced: IS_PURE
    }, {
        resolve: function resolve(x) {
            return promiseResolve$1(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor$1 : this, x);
        }
    });
    var $$8 = _export;
    var call$1 = functionCall;
    var aCallable$2 = aCallable$e;
    var newPromiseCapabilityModule$3 = newPromiseCapability$2;
    var perform$2 = perform$6;
    var iterate$3 = iterate$7;
    var PROMISE_STATICS_INCORRECT_ITERATION$1 = promiseStaticsIncorrectIteration;
    // `Promise.allSettled` method
    // https://tc39.es/ecma262/#sec-promise.allsettled
    $$8({
        target: "Promise",
        stat: true,
        forced: PROMISE_STATICS_INCORRECT_ITERATION$1
    }, {
        allSettled: function allSettled(iterable) {
            var C = this;
            var capability = newPromiseCapabilityModule$3.f(C);
            var resolve = capability.resolve;
            var reject = capability.reject;
            var result = perform$2(function() {
                var promiseResolve = aCallable$2(C.resolve);
                var values = [];
                var counter = 0;
                var remaining = 1;
                iterate$3(iterable, function(promise) {
                    var index = counter++;
                    var alreadyCalled = false;
                    remaining++;
                    call$1(promiseResolve, C, promise).then(function(value) {
                        if (alreadyCalled) return;
                        alreadyCalled = true;
                        values[index] = {
                            status: "fulfilled",
                            value: value
                        };
                        --remaining || resolve(values);
                    }, function(error) {
                        if (alreadyCalled) return;
                        alreadyCalled = true;
                        values[index] = {
                            status: "rejected",
                            reason: error
                        };
                        --remaining || resolve(values);
                    });
                });
                --remaining || resolve(values);
            });
            if (result.error) reject(result.value);
            return capability.promise;
        }
    });
    var $$7 = _export;
    var call = functionCall;
    var aCallable$1 = aCallable$e;
    var getBuiltIn$1 = getBuiltIn$f;
    var newPromiseCapabilityModule$2 = newPromiseCapability$2;
    var perform$1 = perform$6;
    var iterate$2 = iterate$7;
    var PROMISE_STATICS_INCORRECT_ITERATION = promiseStaticsIncorrectIteration;
    var PROMISE_ANY_ERROR = "No one promise resolved";
    // `Promise.any` method
    // https://tc39.es/ecma262/#sec-promise.any
    $$7({
        target: "Promise",
        stat: true,
        forced: PROMISE_STATICS_INCORRECT_ITERATION
    }, {
        any: function any(iterable) {
            var C = this;
            var AggregateError = getBuiltIn$1("AggregateError");
            var capability = newPromiseCapabilityModule$2.f(C);
            var resolve = capability.resolve;
            var reject = capability.reject;
            var result = perform$1(function() {
                var promiseResolve = aCallable$1(C.resolve);
                var errors = [];
                var counter = 0;
                var remaining = 1;
                var alreadyResolved = false;
                iterate$2(iterable, function(promise) {
                    var index = counter++;
                    var alreadyRejected = false;
                    remaining++;
                    call(promiseResolve, C, promise).then(function(value) {
                        if (alreadyRejected || alreadyResolved) return;
                        alreadyResolved = true;
                        resolve(value);
                    }, function(error) {
                        if (alreadyRejected || alreadyResolved) return;
                        alreadyRejected = true;
                        errors[index] = error;
                        --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
                    });
                });
                --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
            });
            if (result.error) reject(result.value);
            return capability.promise;
        }
    });
    var $$6 = _export;
    var NativePromiseConstructor = promiseNativeConstructor;
    var fails$5 = fails$u;
    var getBuiltIn = getBuiltIn$f;
    var isCallable$1 = isCallable$m;
    var speciesConstructor = speciesConstructor$2;
    var promiseResolve = promiseResolve$2;
    var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
    // Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
    var NON_GENERIC = !!NativePromiseConstructor && fails$5(function() {
        // eslint-disable-next-line unicorn/no-thenable -- required for testing
        NativePromisePrototype["finally"].call({
            then: function() {}
        }, function() {});
    });
    // `Promise.prototype.finally` method
    // https://tc39.es/ecma262/#sec-promise.prototype.finally
    $$6({
        target: "Promise",
        proto: true,
        real: true,
        forced: NON_GENERIC
    }, {
        "finally": function(onFinally) {
            var C = speciesConstructor(this, getBuiltIn("Promise"));
            var isFunction = isCallable$1(onFinally);
            return this.then(isFunction ? function(x) {
                return promiseResolve(C, onFinally()).then(function() {
                    return x;
                });
            } : onFinally, isFunction ? function(e) {
                return promiseResolve(C, onFinally()).then(function() {
                    throw e;
                });
            } : onFinally);
        }
    });
    var path$2 = path$o;
    var promise$4 = path$2.Promise;
    var parent$e = promise$4;
    var promise$3 = parent$e;
    var $$5 = _export;
    var newPromiseCapabilityModule$1 = newPromiseCapability$2;
    // `Promise.withResolvers` method
    // https://github.com/tc39/proposal-promise-with-resolvers
    $$5({
        target: "Promise",
        stat: true
    }, {
        withResolvers: function withResolvers() {
            var promiseCapability = newPromiseCapabilityModule$1.f(this);
            return {
                promise: promiseCapability.promise,
                resolve: promiseCapability.resolve,
                reject: promiseCapability.reject
            };
        }
    });
    var parent$d = promise$3;
    var promise$2 = parent$d;
    // TODO: Remove from `core-js@4`
    var $$4 = _export;
    var newPromiseCapabilityModule = newPromiseCapability$2;
    var perform = perform$6;
    // `Promise.try` method
    // https://github.com/tc39/proposal-promise-try
    $$4({
        target: "Promise",
        stat: true,
        forced: true
    }, {
        "try": function(callbackfn) {
            var promiseCapability = newPromiseCapabilityModule.f(this);
            var result = perform(callbackfn);
            (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
            return promiseCapability.promise;
        }
    });
    var parent$c = promise$2;
    // TODO: Remove from `core-js@4`
    var promise$1 = parent$c;
    var promise = promise$1;
    var parent$b = reverse$4;
    var reverse$2 = parent$b;
    var parent$a = reverse$2;
    var reverse$1 = parent$a;
    var reverse = reverse$1;
    (function(module) {
        var _typeof = _typeofExports["default"];
        var _Object$defineProperty = defineProperty$8;
        var _Symbol = symbol$1;
        var _Object$create = create$2;
        var _Object$getPrototypeOf = getPrototypeOf$1;
        var _forEachInstanceProperty = forEach$1;
        var _pushInstanceProperty = push$3;
        var _Object$setPrototypeOf = setPrototypeOf$1;
        var _Promise = promise;
        var _reverseInstanceProperty = reverse;
        var _sliceInstanceProperty = slice$1;
        function _regeneratorRuntime() {
            module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
                return e;
            }, module.exports.__esModule = true, module.exports["default"] = module.exports;
            var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = _Object$defineProperty || function(t, e, r) {
                t[e] = r.value;
            }, i = "function" == typeof _Symbol ? _Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
            function define(t, e, r) {
                return _Object$defineProperty(t, e, {
                    value: r,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }), t[e];
            }
            try {
                define({}, "");
            } catch (t) {
                define = function define(t, e, r) {
                    return t[e] = r;
                };
            }
            function wrap(t, e, r, n) {
                var i = e && e.prototype instanceof Generator ? e : Generator, a = _Object$create(i.prototype), c = new Context(n || []);
                return o(a, "_invoke", {
                    value: makeInvokeMethod(t, r, c)
                }), a;
            }
            function tryCatch(t, e, r) {
                try {
                    return {
                        type: "normal",
                        arg: t.call(e, r)
                    };
                } catch (t) {
                    return {
                        type: "throw",
                        arg: t
                    };
                }
            }
            e.wrap = wrap;
            var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {};
            function Generator() {}
            function GeneratorFunction() {}
            function GeneratorFunctionPrototype() {}
            var p = {};
            define(p, a, function() {
                return this;
            });
            var d = _Object$getPrototypeOf, v = d && d(d(values([])));
            v && v !== r && n.call(v, a) && (p = v);
            var g = GeneratorFunctionPrototype.prototype = Generator.prototype = _Object$create(p);
            function defineIteratorMethods(t) {
                var _context;
                _forEachInstanceProperty(_context = [
                    "next",
                    "throw",
                    "return"
                ]).call(_context, function(e) {
                    define(t, e, function(t) {
                        return this._invoke(e, t);
                    });
                });
            }
            function AsyncIterator(t, e) {
                function invoke(r, o, i, a) {
                    var c = tryCatch(t[r], t, o);
                    if ("throw" !== c.type) {
                        var u = c.arg, h = u.value;
                        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function(t) {
                            invoke("next", t, i, a);
                        }, function(t) {
                            invoke("throw", t, i, a);
                        }) : e.resolve(h).then(function(t) {
                            u.value = t, i(u);
                        }, function(t) {
                            return invoke("throw", t, i, a);
                        });
                    }
                    a(c.arg);
                }
                var r;
                o(this, "_invoke", {
                    value: function value(t, n) {
                        function callInvokeWithMethodAndArg() {
                            return new e(function(e, r) {
                                invoke(t, n, e, r);
                            });
                        }
                        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                    }
                });
            }
            function makeInvokeMethod(e, r, n) {
                var o = h;
                return function(i, a) {
                    if (o === f) throw new Error("Generator is already running");
                    if (o === s) {
                        if ("throw" === i) throw a;
                        return {
                            value: t,
                            done: !0
                        };
                    }
                    for(n.method = i, n.arg = a;;){
                        var c = n.delegate;
                        if (c) {
                            var u = maybeInvokeDelegate(c, n);
                            if (u) {
                                if (u === y) continue;
                                return u;
                            }
                        }
                        if ("next" === n.method) n.sent = n._sent = n.arg;
                        else if ("throw" === n.method) {
                            if (o === h) throw o = s, n.arg;
                            n.dispatchException(n.arg);
                        } else "return" === n.method && n.abrupt("return", n.arg);
                        o = f;
                        var p = tryCatch(e, r, n);
                        if ("normal" === p.type) {
                            if (o = n.done ? s : l, p.arg === y) continue;
                            return {
                                value: p.arg,
                                done: n.done
                            };
                        }
                        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
                    }
                };
            }
            function maybeInvokeDelegate(e, r) {
                var n = r.method, o = e.iterator[n];
                if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
                var i = tryCatch(o, e.iterator, r.arg);
                if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
                var a = i.arg;
                return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
            }
            function pushTryEntry(t) {
                var _context2;
                var e = {
                    tryLoc: t[0]
                };
                1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), _pushInstanceProperty(_context2 = this.tryEntries).call(_context2, e);
            }
            function resetTryEntry(t) {
                var e = t.completion || {};
                e.type = "normal", delete e.arg, t.completion = e;
            }
            function Context(t) {
                this.tryEntries = [
                    {
                        tryLoc: "root"
                    }
                ], _forEachInstanceProperty(t).call(t, pushTryEntry, this), this.reset(!0);
            }
            function values(e) {
                if (e || "" === e) {
                    var r = e[a];
                    if (r) return r.call(e);
                    if ("function" == typeof e.next) return e;
                    if (!isNaN(e.length)) {
                        var o = -1, i = function next() {
                            for(; ++o < e.length;)if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
                            return next.value = t, next.done = !0, next;
                        };
                        return i.next = i;
                    }
                }
                throw new TypeError(_typeof(e) + " is not iterable");
            }
            return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
                value: GeneratorFunctionPrototype,
                configurable: !0
            }), o(GeneratorFunctionPrototype, "constructor", {
                value: GeneratorFunction,
                configurable: !0
            }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function(t) {
                var e = "function" == typeof t && t.constructor;
                return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
            }, e.mark = function(t) {
                return _Object$setPrototypeOf ? _Object$setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = _Object$create(g), t;
            }, e.awrap = function(t) {
                return {
                    __await: t
                };
            }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function() {
                return this;
            }), e.AsyncIterator = AsyncIterator, e.async = function(t, r, n, o, i) {
                void 0 === i && (i = _Promise);
                var a = new AsyncIterator(wrap(t, r, n, o), i);
                return e.isGeneratorFunction(r) ? a : a.next().then(function(t) {
                    return t.done ? t.value : a.next();
                });
            }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function() {
                return this;
            }), define(g, "toString", function() {
                return "[object Generator]";
            }), e.keys = function(t) {
                var e = Object(t), r = [];
                for(var n in e)_pushInstanceProperty(r).call(r, n);
                return _reverseInstanceProperty(r).call(r), function next() {
                    for(; r.length;){
                        var t = r.pop();
                        if (t in e) return next.value = t, next.done = !1, next;
                    }
                    return next.done = !0, next;
                };
            }, e.values = values, Context.prototype = {
                constructor: Context,
                reset: function reset(e) {
                    var _context3;
                    if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, _forEachInstanceProperty(_context3 = this.tryEntries).call(_context3, resetTryEntry), !e) for(var r in this)"t" === r.charAt(0) && n.call(this, r) && !isNaN(+_sliceInstanceProperty(r).call(r, 1)) && (this[r] = t);
                },
                stop: function stop() {
                    this.done = !0;
                    var t = this.tryEntries[0].completion;
                    if ("throw" === t.type) throw t.arg;
                    return this.rval;
                },
                dispatchException: function dispatchException(e) {
                    if (this.done) throw e;
                    var r = this;
                    function handle(n, o) {
                        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
                    }
                    for(var o = this.tryEntries.length - 1; o >= 0; --o){
                        var i = this.tryEntries[o], a = i.completion;
                        if ("root" === i.tryLoc) return handle("end");
                        if (i.tryLoc <= this.prev) {
                            var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc");
                            if (c && u) {
                                if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
                                if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
                            } else if (c) {
                                if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
                            } else {
                                if (!u) throw new Error("try statement without catch or finally");
                                if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
                            }
                        }
                    }
                },
                abrupt: function abrupt(t, e) {
                    for(var r = this.tryEntries.length - 1; r >= 0; --r){
                        var o = this.tryEntries[r];
                        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
                            var i = o;
                            break;
                        }
                    }
                    i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
                    var a = i ? i.completion : {};
                    return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
                },
                complete: function complete(t, e) {
                    if ("throw" === t.type) throw t.arg;
                    return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
                },
                finish: function finish(t) {
                    for(var e = this.tryEntries.length - 1; e >= 0; --e){
                        var r = this.tryEntries[e];
                        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
                    }
                },
                "catch": function _catch(t) {
                    for(var e = this.tryEntries.length - 1; e >= 0; --e){
                        var r = this.tryEntries[e];
                        if (r.tryLoc === t) {
                            var n = r.completion;
                            if ("throw" === n.type) {
                                var o = n.arg;
                                resetTryEntry(r);
                            }
                            return o;
                        }
                    }
                    throw new Error("illegal catch attempt");
                },
                delegateYield: function delegateYield(e, r, n) {
                    return this.delegate = {
                        iterator: values(e),
                        resultName: r,
                        nextLoc: n
                    }, "next" === this.method && (this.arg = t), y;
                }
            }, e;
        }
        module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
    })(regeneratorRuntime$1);
    var regeneratorRuntimeExports = regeneratorRuntime$1.exports;
    // TODO(Babel 8): Remove this file.
    var runtime = regeneratorRuntimeExports();
    var regenerator = runtime;
    // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
    try {
        regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
        if (typeof globalThis === "object") globalThis.regeneratorRuntime = runtime;
        else Function("r", "regeneratorRuntime = r")(runtime);
    }
    var _regeneratorRuntime = /*@__PURE__*/ getDefaultExportFromCjs(regenerator);
    var internalMetadata = {
        exports: {}
    };
    // FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it
    var fails$4 = fails$u;
    var arrayBufferNonExtensible = fails$4(function() {
        if (typeof ArrayBuffer == "function") {
            var buffer = new ArrayBuffer(8);
            // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe
            if (Object.isExtensible(buffer)) Object.defineProperty(buffer, "a", {
                value: 8
            });
        }
    });
    var fails$3 = fails$u;
    var isObject$2 = isObject$h;
    var classof$3 = classofRaw$2;
    var ARRAY_BUFFER_NON_EXTENSIBLE = arrayBufferNonExtensible;
    // eslint-disable-next-line es/no-object-isextensible -- safe
    var $isExtensible = Object.isExtensible;
    var FAILS_ON_PRIMITIVES = fails$3(function() {
        $isExtensible(1);
    });
    // `Object.isExtensible` method
    // https://tc39.es/ecma262/#sec-object.isextensible
    var objectIsExtensible = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
        if (!isObject$2(it)) return false;
        if (ARRAY_BUFFER_NON_EXTENSIBLE && classof$3(it) === "ArrayBuffer") return false;
        return $isExtensible ? $isExtensible(it) : true;
    } : $isExtensible;
    var fails$2 = fails$u;
    var freezing = !fails$2(function() {
        // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
        return Object.isExtensible(Object.preventExtensions({}));
    });
    var $$3 = _export;
    var uncurryThis$1 = functionUncurryThis;
    var hiddenKeys = hiddenKeys$6;
    var isObject$1 = isObject$h;
    var hasOwn$3 = hasOwnProperty_1;
    var defineProperty$1 = objectDefineProperty.f;
    var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
    var getOwnPropertyNamesExternalModule = objectGetOwnPropertyNamesExternal;
    var isExtensible = objectIsExtensible;
    var uid = uid$4;
    var FREEZING = freezing;
    var REQUIRED = false;
    var METADATA = uid("meta");
    var id = 0;
    var setMetadata = function(it) {
        defineProperty$1(it, METADATA, {
            value: {
                objectID: "O" + id++,
                weakData: {} // weak collections IDs
            }
        });
    };
    var fastKey$1 = function(it, create) {
        // return a primitive with prefix
        if (!isObject$1(it)) return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
        if (!hasOwn$3(it, METADATA)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return "F";
            // not necessary to add metadata
            if (!create) return "E";
            // add missing metadata
            setMetadata(it);
        // return object ID
        }
        return it[METADATA].objectID;
    };
    var getWeakData = function(it, create) {
        if (!hasOwn$3(it, METADATA)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return true;
            // not necessary to add metadata
            if (!create) return false;
            // add missing metadata
            setMetadata(it);
        // return the store of weak collections IDs
        }
        return it[METADATA].weakData;
    };
    // add metadata on freeze-family methods calling
    var onFreeze = function(it) {
        if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn$3(it, METADATA)) setMetadata(it);
        return it;
    };
    var enable = function() {
        meta.enable = function() {};
        REQUIRED = true;
        var getOwnPropertyNames = getOwnPropertyNamesModule.f;
        var splice = uncurryThis$1([].splice);
        var test = {};
        test[METADATA] = 1;
        // prevent exposing of metadata key
        if (getOwnPropertyNames(test).length) {
            getOwnPropertyNamesModule.f = function(it) {
                var result = getOwnPropertyNames(it);
                for(var i = 0, length = result.length; i < length; i++)if (result[i] === METADATA) {
                    splice(result, i, 1);
                    break;
                }
                return result;
            };
            $$3({
                target: "Object",
                stat: true,
                forced: true
            }, {
                getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
            });
        }
    };
    var meta = internalMetadata.exports = {
        enable: enable,
        fastKey: fastKey$1,
        getWeakData: getWeakData,
        onFreeze: onFreeze
    };
    hiddenKeys[METADATA] = true;
    var internalMetadataExports = internalMetadata.exports;
    var $$2 = _export;
    var global$1 = global$p;
    var InternalMetadataModule = internalMetadataExports;
    var fails$1 = fails$u;
    var createNonEnumerableProperty = createNonEnumerableProperty$9;
    var iterate$1 = iterate$7;
    var anInstance$1 = anInstance$3;
    var isCallable = isCallable$m;
    var isObject = isObject$h;
    var isNullOrUndefined$1 = isNullOrUndefined$6;
    var setToStringTag = setToStringTag$7;
    var defineProperty = objectDefineProperty.f;
    var forEach = arrayIteration.forEach;
    var DESCRIPTORS$1 = descriptors;
    var InternalStateModule$1 = internalState;
    var setInternalState$1 = InternalStateModule$1.set;
    var internalStateGetterFor$1 = InternalStateModule$1.getterFor;
    var collection$2 = function(CONSTRUCTOR_NAME, wrapper, common) {
        var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
        var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
        var ADDER = IS_MAP ? "set" : "add";
        var NativeConstructor = global$1[CONSTRUCTOR_NAME];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        var exported = {};
        var Constructor;
        if (!DESCRIPTORS$1 || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails$1(function() {
            new NativeConstructor().entries().next();
        }))) {
            // create collection constructor
            Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
            InternalMetadataModule.enable();
        } else {
            Constructor = wrapper(function(target, iterable) {
                setInternalState$1(anInstance$1(target, Prototype), {
                    type: CONSTRUCTOR_NAME,
                    collection: new NativeConstructor()
                });
                if (!isNullOrUndefined$1(iterable)) iterate$1(iterable, target[ADDER], {
                    that: target,
                    AS_ENTRIES: IS_MAP
                });
            });
            var Prototype = Constructor.prototype;
            var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
            forEach([
                "add",
                "clear",
                "delete",
                "forEach",
                "get",
                "has",
                "set",
                "keys",
                "values",
                "entries"
            ], function(KEY) {
                var IS_ADDER = KEY === "add" || KEY === "set";
                if (KEY in NativePrototype && !(IS_WEAK && KEY === "clear")) createNonEnumerableProperty(Prototype, KEY, function(a, b) {
                    var collection = getInternalState(this).collection;
                    if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY === "get" ? undefined : false;
                    var result = collection[KEY](a === 0 ? 0 : a, b);
                    return IS_ADDER ? this : result;
                });
            });
            IS_WEAK || defineProperty(Prototype, "size", {
                configurable: true,
                get: function() {
                    return getInternalState(this).collection.size;
                }
            });
        }
        setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
        exported[CONSTRUCTOR_NAME] = Constructor;
        $$2({
            global: true,
            forced: true
        }, exported);
        if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
        return Constructor;
    };
    var defineBuiltIn = defineBuiltIn$6;
    var defineBuiltIns$1 = function(target, src, options) {
        for(var key in src)if (options && options.unsafe && target[key]) target[key] = src[key];
        else defineBuiltIn(target, key, src[key], options);
        return target;
    };
    var create = objectCreate;
    var defineBuiltInAccessor = defineBuiltInAccessor$3;
    var defineBuiltIns = defineBuiltIns$1;
    var bind = functionBindContext;
    var anInstance = anInstance$3;
    var isNullOrUndefined = isNullOrUndefined$6;
    var iterate = iterate$7;
    var defineIterator = iteratorDefine;
    var createIterResultObject = createIterResultObject$3;
    var setSpecies = setSpecies$2;
    var DESCRIPTORS = descriptors;
    var fastKey = internalMetadataExports.fastKey;
    var InternalStateModule = internalState;
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    var collectionStrong$2 = {
        getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
            var Constructor = wrapper(function(that, iterable) {
                anInstance(that, Prototype);
                setInternalState(that, {
                    type: CONSTRUCTOR_NAME,
                    index: create(null),
                    first: undefined,
                    last: undefined,
                    size: 0
                });
                if (!DESCRIPTORS) that.size = 0;
                if (!isNullOrUndefined(iterable)) iterate(iterable, that[ADDER], {
                    that: that,
                    AS_ENTRIES: IS_MAP
                });
            });
            var Prototype = Constructor.prototype;
            var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
            var define = function(that, key, value) {
                var state = getInternalState(that);
                var entry = getEntry(that, key);
                var previous, index;
                // change existing entry
                if (entry) entry.value = value;
                else {
                    state.last = entry = {
                        index: index = fastKey(key, true),
                        key: key,
                        value: value,
                        previous: previous = state.last,
                        next: undefined,
                        removed: false
                    };
                    if (!state.first) state.first = entry;
                    if (previous) previous.next = entry;
                    if (DESCRIPTORS) state.size++;
                    else that.size++;
                    // add to index
                    if (index !== "F") state.index[index] = entry;
                }
                return that;
            };
            var getEntry = function(that, key) {
                var state = getInternalState(that);
                // fast case
                var index = fastKey(key);
                var entry;
                if (index !== "F") return state.index[index];
                // frozen object case
                for(entry = state.first; entry; entry = entry.next){
                    if (entry.key === key) return entry;
                }
            };
            defineBuiltIns(Prototype, {
                // `{ Map, Set }.prototype.clear()` methods
                // https://tc39.es/ecma262/#sec-map.prototype.clear
                // https://tc39.es/ecma262/#sec-set.prototype.clear
                clear: function clear() {
                    var that = this;
                    var state = getInternalState(that);
                    var data = state.index;
                    var entry = state.first;
                    while(entry){
                        entry.removed = true;
                        if (entry.previous) entry.previous = entry.previous.next = undefined;
                        delete data[entry.index];
                        entry = entry.next;
                    }
                    state.first = state.last = undefined;
                    if (DESCRIPTORS) state.size = 0;
                    else that.size = 0;
                },
                // `{ Map, Set }.prototype.delete(key)` methods
                // https://tc39.es/ecma262/#sec-map.prototype.delete
                // https://tc39.es/ecma262/#sec-set.prototype.delete
                "delete": function(key) {
                    var that = this;
                    var state = getInternalState(that);
                    var entry = getEntry(that, key);
                    if (entry) {
                        var next = entry.next;
                        var prev = entry.previous;
                        delete state.index[entry.index];
                        entry.removed = true;
                        if (prev) prev.next = next;
                        if (next) next.previous = prev;
                        if (state.first === entry) state.first = next;
                        if (state.last === entry) state.last = prev;
                        if (DESCRIPTORS) state.size--;
                        else that.size--;
                    }
                    return !!entry;
                },
                // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
                // https://tc39.es/ecma262/#sec-map.prototype.foreach
                // https://tc39.es/ecma262/#sec-set.prototype.foreach
                forEach: function forEach(callbackfn /* , that = undefined */ ) {
                    var state = getInternalState(this);
                    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                    var entry;
                    while(entry = entry ? entry.next : state.first){
                        boundFunction(entry.value, entry.key, this);
                        // revert to the last existing entry
                        while(entry && entry.removed)entry = entry.previous;
                    }
                },
                // `{ Map, Set}.prototype.has(key)` methods
                // https://tc39.es/ecma262/#sec-map.prototype.has
                // https://tc39.es/ecma262/#sec-set.prototype.has
                has: function has(key) {
                    return !!getEntry(this, key);
                }
            });
            defineBuiltIns(Prototype, IS_MAP ? {
                // `Map.prototype.get(key)` method
                // https://tc39.es/ecma262/#sec-map.prototype.get
                get: function get(key) {
                    var entry = getEntry(this, key);
                    return entry && entry.value;
                },
                // `Map.prototype.set(key, value)` method
                // https://tc39.es/ecma262/#sec-map.prototype.set
                set: function set(key, value) {
                    return define(this, key === 0 ? 0 : key, value);
                }
            } : {
                // `Set.prototype.add(value)` method
                // https://tc39.es/ecma262/#sec-set.prototype.add
                add: function add(value) {
                    return define(this, value = value === 0 ? 0 : value, value);
                }
            });
            if (DESCRIPTORS) defineBuiltInAccessor(Prototype, "size", {
                configurable: true,
                get: function() {
                    return getInternalState(this).size;
                }
            });
            return Constructor;
        },
        setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
            var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
            var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
            var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
            // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
            // https://tc39.es/ecma262/#sec-map.prototype.entries
            // https://tc39.es/ecma262/#sec-map.prototype.keys
            // https://tc39.es/ecma262/#sec-map.prototype.values
            // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
            // https://tc39.es/ecma262/#sec-set.prototype.entries
            // https://tc39.es/ecma262/#sec-set.prototype.keys
            // https://tc39.es/ecma262/#sec-set.prototype.values
            // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
            defineIterator(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
                setInternalState(this, {
                    type: ITERATOR_NAME,
                    target: iterated,
                    state: getInternalCollectionState(iterated),
                    kind: kind,
                    last: undefined
                });
            }, function() {
                var state = getInternalIteratorState(this);
                var kind = state.kind;
                var entry = state.last;
                // revert to the last existing entry
                while(entry && entry.removed)entry = entry.previous;
                // get next entry
                if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
                    // or finish the iteration
                    state.target = undefined;
                    return createIterResultObject(undefined, true);
                }
                // return step by kind
                if (kind === "keys") return createIterResultObject(entry.key, false);
                if (kind === "values") return createIterResultObject(entry.value, false);
                return createIterResultObject([
                    entry.key,
                    entry.value
                ], false);
            }, IS_MAP ? "entries" : "values", !IS_MAP, true);
            // `{ Map, Set }.prototype[@@species]` accessors
            // https://tc39.es/ecma262/#sec-get-map-@@species
            // https://tc39.es/ecma262/#sec-get-set-@@species
            setSpecies(CONSTRUCTOR_NAME);
        }
    };
    var collection$1 = collection$2;
    var collectionStrong$1 = collectionStrong$2;
    // `Map` constructor
    // https://tc39.es/ecma262/#sec-map-objects
    collection$1("Map", function(init) {
        return function Map1() {
            return init(this, arguments.length ? arguments[0] : undefined);
        };
    }, collectionStrong$1);
    var path$1 = path$o;
    var map$2 = path$1.Map;
    var parent$9 = map$2;
    var map$1 = parent$9;
    var map = map$1;
    var _Map = /*@__PURE__*/ getDefaultExportFromCjs(map);
    var $$1 = _export;
    var $some = arrayIteration.some;
    var arrayMethodIsStrict$1 = arrayMethodIsStrict$4;
    var STRICT_METHOD$1 = arrayMethodIsStrict$1("some");
    // `Array.prototype.some` method
    // https://tc39.es/ecma262/#sec-array.prototype.some
    $$1({
        target: "Array",
        proto: true,
        forced: !STRICT_METHOD$1
    }, {
        some: function some(callbackfn /* , thisArg */ ) {
            return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var getBuiltInPrototypeMethod$4 = getBuiltInPrototypeMethod$g;
    var some$3 = getBuiltInPrototypeMethod$4("Array", "some");
    var isPrototypeOf$4 = objectIsPrototypeOf;
    var method$4 = some$3;
    var ArrayPrototype$4 = Array.prototype;
    var some$2 = function(it) {
        var own = it.some;
        return it === ArrayPrototype$4 || isPrototypeOf$4(ArrayPrototype$4, it) && own === ArrayPrototype$4.some ? method$4 : own;
    };
    var parent$8 = some$2;
    var some$1 = parent$8;
    var some = some$1;
    var _someInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(some);
    var getBuiltInPrototypeMethod$3 = getBuiltInPrototypeMethod$g;
    var keys$3 = getBuiltInPrototypeMethod$3("Array", "keys");
    var parent$7 = keys$3;
    var keys$2 = parent$7;
    var classof$2 = classof$d;
    var hasOwn$2 = hasOwnProperty_1;
    var isPrototypeOf$3 = objectIsPrototypeOf;
    var method$3 = keys$2;
    var ArrayPrototype$3 = Array.prototype;
    var DOMIterables$2 = {
        DOMTokenList: true,
        NodeList: true
    };
    var keys$1 = function(it) {
        var own = it.keys;
        return it === ArrayPrototype$3 || isPrototypeOf$3(ArrayPrototype$3, it) && own === ArrayPrototype$3.keys || hasOwn$2(DOMIterables$2, classof$2(it)) ? method$3 : own;
    };
    var keys = keys$1;
    var _keysInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(keys);
    var arraySlice = arraySliceSimple;
    var floor = Math.floor;
    var mergeSort = function(array, comparefn) {
        var length = array.length;
        var middle = floor(length / 2);
        return length < 8 ? insertionSort(array, comparefn) : merge(array, mergeSort(arraySlice(array, 0, middle), comparefn), mergeSort(arraySlice(array, middle), comparefn), comparefn);
    };
    var insertionSort = function(array, comparefn) {
        var length = array.length;
        var i = 1;
        var element, j;
        while(i < length){
            j = i;
            element = array[i];
            while(j && comparefn(array[j - 1], element) > 0)array[j] = array[--j];
            if (j !== i++) array[j] = element;
        }
        return array;
    };
    var merge = function(array, left, right, comparefn) {
        var llength = left.length;
        var rlength = right.length;
        var lindex = 0;
        var rindex = 0;
        while(lindex < llength || rindex < rlength)array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
        return array;
    };
    var arraySort = mergeSort;
    var userAgent$1 = engineUserAgent;
    var firefox = userAgent$1.match(/firefox\/(\d+)/i);
    var engineFfVersion = !!firefox && +firefox[1];
    var UA = engineUserAgent;
    var engineIsIeOrEdge = /MSIE|Trident/.test(UA);
    var userAgent = engineUserAgent;
    var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
    var engineWebkitVersion = !!webkit && +webkit[1];
    var $ = _export;
    var uncurryThis = functionUncurryThis;
    var aCallable = aCallable$e;
    var toObject = toObject$e;
    var lengthOfArrayLike = lengthOfArrayLike$d;
    var deletePropertyOrThrow = deletePropertyOrThrow$2;
    var toString = toString$7;
    var fails = fails$u;
    var internalSort = arraySort;
    var arrayMethodIsStrict = arrayMethodIsStrict$4;
    var FF = engineFfVersion;
    var IE_OR_EDGE = engineIsIeOrEdge;
    var V8 = engineV8Version;
    var WEBKIT = engineWebkitVersion;
    var test = [];
    var nativeSort = uncurryThis(test.sort);
    var push = uncurryThis(test.push);
    // IE8-
    var FAILS_ON_UNDEFINED = fails(function() {
        test.sort(undefined);
    });
    // V8 bug
    var FAILS_ON_NULL = fails(function() {
        test.sort(null);
    });
    // Old WebKit
    var STRICT_METHOD = arrayMethodIsStrict("sort");
    var STABLE_SORT = !fails(function() {
        // feature detection can be too slow, so check engines versions
        if (V8) return V8 < 70;
        if (FF && FF > 3) return;
        if (IE_OR_EDGE) return true;
        if (WEBKIT) return WEBKIT < 603;
        var result = "";
        var code, chr, value, index;
        // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
        for(code = 65; code < 76; code++){
            chr = String.fromCharCode(code);
            switch(code){
                case 66:
                case 69:
                case 70:
                case 72:
                    value = 3;
                    break;
                case 68:
                case 71:
                    value = 4;
                    break;
                default:
                    value = 2;
            }
            for(index = 0; index < 47; index++)test.push({
                k: chr + index,
                v: value
            });
        }
        test.sort(function(a, b) {
            return b.v - a.v;
        });
        for(index = 0; index < test.length; index++){
            chr = test[index].k.charAt(0);
            if (result.charAt(result.length - 1) !== chr) result += chr;
        }
        return result !== "DGBEFHACIJK";
    });
    var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
    var getSortCompare = function(comparefn) {
        return function(x, y) {
            if (y === undefined) return -1;
            if (x === undefined) return 1;
            if (comparefn !== undefined) return +comparefn(x, y) || 0;
            return toString(x) > toString(y) ? 1 : -1;
        };
    };
    // `Array.prototype.sort` method
    // https://tc39.es/ecma262/#sec-array.prototype.sort
    $({
        target: "Array",
        proto: true,
        forced: FORCED
    }, {
        sort: function sort(comparefn) {
            if (comparefn !== undefined) aCallable(comparefn);
            var array = toObject(this);
            if (STABLE_SORT) return comparefn === undefined ? nativeSort(array) : nativeSort(array, comparefn);
            var items = [];
            var arrayLength = lengthOfArrayLike(array);
            var itemsLength, index;
            for(index = 0; index < arrayLength; index++)if (index in array) push(items, array[index]);
            internalSort(items, getSortCompare(comparefn));
            itemsLength = lengthOfArrayLike(items);
            index = 0;
            while(index < itemsLength)array[index] = items[index++];
            while(index < arrayLength)deletePropertyOrThrow(array, index++);
            return array;
        }
    });
    var getBuiltInPrototypeMethod$2 = getBuiltInPrototypeMethod$g;
    var sort$3 = getBuiltInPrototypeMethod$2("Array", "sort");
    var isPrototypeOf$2 = objectIsPrototypeOf;
    var method$2 = sort$3;
    var ArrayPrototype$2 = Array.prototype;
    var sort$2 = function(it) {
        var own = it.sort;
        return it === ArrayPrototype$2 || isPrototypeOf$2(ArrayPrototype$2, it) && own === ArrayPrototype$2.sort ? method$2 : own;
    };
    var parent$6 = sort$2;
    var sort$1 = parent$6;
    var sort = sort$1;
    var _sortInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(sort);
    var getBuiltInPrototypeMethod$1 = getBuiltInPrototypeMethod$g;
    var values$3 = getBuiltInPrototypeMethod$1("Array", "values");
    var parent$5 = values$3;
    var values$2 = parent$5;
    var classof$1 = classof$d;
    var hasOwn$1 = hasOwnProperty_1;
    var isPrototypeOf$1 = objectIsPrototypeOf;
    var method$1 = values$2;
    var ArrayPrototype$1 = Array.prototype;
    var DOMIterables$1 = {
        DOMTokenList: true,
        NodeList: true
    };
    var values$1 = function(it) {
        var own = it.values;
        return it === ArrayPrototype$1 || isPrototypeOf$1(ArrayPrototype$1, it) && own === ArrayPrototype$1.values || hasOwn$1(DOMIterables$1, classof$1(it)) ? method$1 : own;
    };
    var values = values$1;
    var _valuesInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(values);
    var iterator = iterator$4;
    var _Symbol$iterator = /*@__PURE__*/ getDefaultExportFromCjs(iterator);
    var getBuiltInPrototypeMethod = getBuiltInPrototypeMethod$g;
    var entries$3 = getBuiltInPrototypeMethod("Array", "entries");
    var parent$4 = entries$3;
    var entries$2 = parent$4;
    var classof = classof$d;
    var hasOwn = hasOwnProperty_1;
    var isPrototypeOf = objectIsPrototypeOf;
    var method = entries$2;
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
        DOMTokenList: true,
        NodeList: true
    };
    var entries$1 = function(it) {
        var own = it.entries;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.entries || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
    var entries = entries$1;
    var _entriesInstanceProperty = /*@__PURE__*/ getDefaultExportFromCjs(entries);
    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    let getRandomValues;
    const rnds8 = new Uint8Array(16);
    function rng() {
        // lazy load so that environments that need to polyfill have a chance to do so
        if (!getRandomValues) {
            // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
            getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
            if (!getRandomValues) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        }
        return getRandomValues(rnds8);
    }
    /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */ const byteToHex = [];
    for(let i = 0; i < 256; ++i)byteToHex.push((i + 0x100).toString(16).slice(1));
    function unsafeStringify(arr, offset = 0) {
        // Note: Be careful editing this code!  It's been tuned for performance
        // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
        return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
    }
    const randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
    var native = {
        randomUUID
    };
    function v4(options, buf, offset) {
        if (native.randomUUID && !buf && !options) return native.randomUUID();
        options = options || {};
        const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
        rnds[6] = rnds[6] & 0x0f | 0x40;
        rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
        if (buf) {
            offset = offset || 0;
            for(let i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
            return buf;
        }
        return unsafeStringify(rnds);
    }
    /**
   * Determine whether a value can be used as an id.
   *
   * @param value - Input value of unknown type.
   * @returns True if the value is valid id, false otherwise.
   */ function isId(value) {
        return typeof value === "string" || typeof value === "number";
    }
    /**
   * A queue.
   *
   * @typeParam T - The type of method names to be replaced by queued versions.
   */ var Queue = /*#__PURE__*/ function() {
        /**
     * Construct a new Queue.
     *
     * @param options - Queue configuration.
     */ function Queue(options) {
            _classCallCheck(this, Queue);
            /** Delay in milliseconds. If defined the queue will be periodically flushed. */ /** Maximum number of entries in the queue before it will be flushed. */ _defineProperty(this, "_queue", []);
            _defineProperty(this, "_timeout", null);
            _defineProperty(this, "_extended", null);
            // options
            this.delay = null;
            this.max = Infinity;
            this.setOptions(options);
        }
        /**
     * Update the configuration of the queue.
     *
     * @param options - Queue configuration.
     */ _createClass(Queue, [
            {
                key: "setOptions",
                value: function setOptions(options) {
                    if (options && typeof options.delay !== "undefined") this.delay = options.delay;
                    if (options && typeof options.max !== "undefined") this.max = options.max;
                    this._flushIfNeeded();
                }
            },
            {
                key: "destroy",
                value: /**
       * Destroy the queue. The queue will first flush all queued actions, and in case it has extended an object, will restore the original object.
       */ function destroy() {
                    this.flush();
                    if (this._extended) {
                        var object = this._extended.object;
                        var methods = this._extended.methods;
                        for(var i = 0; i < methods.length; i++){
                            var method = methods[i];
                            if (method.original) // @TODO: better solution?
                            object[method.name] = method.original;
                            else // @TODO: better solution?
                            delete object[method.name];
                        }
                        this._extended = null;
                    }
                }
            },
            {
                key: "replace",
                value: function replace(object, method) {
                    /* eslint-disable-next-line @typescript-eslint/no-this-alias -- Function this is necessary in the function bellow, so class this has to be saved into a variable here. */ var me = this;
                    var original = object[method];
                    if (!original) throw new Error("Method " + method + " undefined");
                    object[method] = function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                        // add this call to the queue
                        me.queue({
                            args: args,
                            fn: original,
                            context: this
                        });
                    };
                }
            },
            {
                key: "queue",
                value: function queue(entry) {
                    if (typeof entry === "function") this._queue.push({
                        fn: entry
                    });
                    else this._queue.push(entry);
                    this._flushIfNeeded();
                }
            },
            {
                key: "_flushIfNeeded",
                value: function _flushIfNeeded() {
                    var _this = this;
                    // flush when the maximum is exceeded.
                    if (this._queue.length > this.max) this.flush();
                    // flush after a period of inactivity when a delay is configured
                    if (this._timeout != null) {
                        clearTimeout(this._timeout);
                        this._timeout = null;
                    }
                    if (this.queue.length > 0 && typeof this.delay === "number") this._timeout = _setTimeout(function() {
                        _this.flush();
                    }, this.delay);
                }
            },
            {
                key: "flush",
                value: function flush() {
                    var _context, _context2;
                    _forEachInstanceProperty(_context = _spliceInstanceProperty(_context2 = this._queue).call(_context2, 0)).call(_context, function(entry) {
                        entry.fn.apply(entry.context || entry.fn, entry.args || []);
                    });
                }
            }
        ], [
            {
                key: "extend",
                value: function extend(object, options) {
                    var queue = new Queue(options);
                    if (object.flush !== undefined) throw new Error("Target object already has a property flush");
                    object.flush = function() {
                        queue.flush();
                    };
                    var methods = [
                        {
                            name: "flush",
                            original: undefined
                        }
                    ];
                    if (options && options.replace) for(var i = 0; i < options.replace.length; i++){
                        var name = options.replace[i];
                        methods.push({
                            name: name,
                            // @TODO: better solution?
                            original: object[name]
                        });
                        // @TODO: better solution?
                        queue.replace(object, name);
                    }
                    queue._extended = {
                        object: object,
                        methods: methods
                    };
                    return queue;
                }
            }
        ]);
        return Queue;
    }();
    /**
   * {@link DataSet} code that can be reused in {@link DataView} or other similar implementations of {@link DataInterface}.
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */ var DataSetPart = /*#__PURE__*/ function() {
        function DataSetPart() {
            _classCallCheck(this, DataSetPart);
            _defineProperty(this, "_subscribers", {
                "*": [],
                add: [],
                remove: [],
                update: []
            });
            /**
       * @deprecated Use on instead (PS: DataView.subscribe === DataView.on).
       */ _defineProperty(this, "subscribe", DataSetPart.prototype.on);
            /**
       * @deprecated Use off instead (PS: DataView.unsubscribe === DataView.off).
       */ _defineProperty(this, "unsubscribe", DataSetPart.prototype.off);
        }
        _createClass(DataSetPart, [
            {
                key: "_trigger",
                value: /**
       * Trigger an event
       *
       * @param event - Event name.
       * @param payload - Event payload.
       * @param senderId - Id of the sender.
       */ function _trigger(event, payload, senderId) {
                    var _context, _context2;
                    if (event === "*") throw new Error("Cannot trigger event *");
                    _forEachInstanceProperty(_context = _concatInstanceProperty(_context2 = []).call(_context2, _toConsumableArray(this._subscribers[event]), _toConsumableArray(this._subscribers["*"]))).call(_context, function(subscriber) {
                        subscriber(event, payload, senderId != null ? senderId : null);
                    });
                }
            },
            {
                key: "on",
                value: function on(event, callback) {
                    if (typeof callback === "function") this._subscribers[event].push(callback);
                // @TODO: Maybe throw for invalid callbacks?
                }
            },
            {
                key: "off",
                value: function off(event, callback) {
                    var _context3;
                    this._subscribers[event] = _filterInstanceProperty(_context3 = this._subscribers[event]).call(_context3, function(subscriber) {
                        return subscriber !== callback;
                    });
                }
            }
        ]);
        return DataSetPart;
    }();
    var collection = collection$2;
    var collectionStrong = collectionStrong$2;
    // `Set` constructor
    // https://tc39.es/ecma262/#sec-set-objects
    collection("Set", function(init) {
        return function Set() {
            return init(this, arguments.length ? arguments[0] : undefined);
        };
    }, collectionStrong);
    var path = path$o;
    var set$2 = path.Set;
    var parent$3 = set$2;
    var set$1 = parent$3;
    var set = set$1;
    var _Set = /*@__PURE__*/ getDefaultExportFromCjs(set);
    var getIterator$5 = getIterator$8;
    var getIterator_1 = getIterator$5;
    var parent$2 = getIterator_1;
    var getIterator$4 = parent$2;
    var parent$1 = getIterator$4;
    var getIterator$3 = parent$1;
    var parent = getIterator$3;
    var getIterator$2 = parent;
    var getIterator$1 = getIterator$2;
    var getIterator = getIterator$1;
    var _getIterator = /*@__PURE__*/ getDefaultExportFromCjs(getIterator);
    function _createForOfIteratorHelper$2(o, allowArrayLike) {
        var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
        if (!it) {
            if (_Array$isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {};
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = it.call(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$2(o, minLen) {
        var _context10;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
        var n = _sliceInstanceProperty(_context10 = Object.prototype.toString.call(o)).call(_context10, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return _Array$from$1(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
    }
    function _arrayLikeToArray$2(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    /**
   * Data stream
   *
   * @remarks
   * {@link DataStream} offers an always up to date stream of items from a {@link DataSet} or {@link DataView}.
   * That means that the stream is evaluated at the time of iteration, conversion to another data type or when {@link cache} is called, not when the {@link DataStream} was created.
   * Multiple invocations of for example {@link toItemArray} may yield different results (if the data source like for example {@link DataSet} gets modified).
   * @typeParam Item - The item type this stream is going to work with.
   */ var DataStream = /*#__PURE__*/ function(_Symbol$iterator$1) {
        /**
     * Create a new data stream.
     *
     * @param pairs - The id, item pairs.
     */ function DataStream(pairs) {
            _classCallCheck(this, DataStream);
            this._pairs = pairs;
        }
        /**
     * Return an iterable of key, value pairs for every entry in the stream.
     */ _createClass(DataStream, [
            {
                key: _Symbol$iterator$1,
                value: /*#__PURE__*/ _regeneratorRuntime.mark(function value() {
                    var _iterator, _step, _step$value, id, item;
                    return _regeneratorRuntime.wrap(function value$(_context) {
                        while(true)switch(_context.prev = _context.next){
                            case 0:
                                _iterator = _createForOfIteratorHelper$2(this._pairs);
                                _context.prev = 1;
                                _iterator.s();
                            case 3:
                                if ((_step = _iterator.n()).done) {
                                    _context.next = 9;
                                    break;
                                }
                                _step$value = _slicedToArray(_step.value, 2), id = _step$value[0], item = _step$value[1];
                                _context.next = 7;
                                return [
                                    id,
                                    item
                                ];
                            case 7:
                                _context.next = 3;
                                break;
                            case 9:
                                _context.next = 14;
                                break;
                            case 11:
                                _context.prev = 11;
                                _context.t0 = _context["catch"](1);
                                _iterator.e(_context.t0);
                            case 14:
                                _context.prev = 14;
                                _iterator.f();
                                return _context.finish(14);
                            case 17:
                            case "end":
                                return _context.stop();
                        }
                    }, value, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "entries",
                value: /*#__PURE__*/ _regeneratorRuntime.mark(function entries() {
                    var _iterator2, _step2, _step2$value, id, item;
                    return _regeneratorRuntime.wrap(function entries$(_context2) {
                        while(true)switch(_context2.prev = _context2.next){
                            case 0:
                                _iterator2 = _createForOfIteratorHelper$2(this._pairs);
                                _context2.prev = 1;
                                _iterator2.s();
                            case 3:
                                if ((_step2 = _iterator2.n()).done) {
                                    _context2.next = 9;
                                    break;
                                }
                                _step2$value = _slicedToArray(_step2.value, 2), id = _step2$value[0], item = _step2$value[1];
                                _context2.next = 7;
                                return [
                                    id,
                                    item
                                ];
                            case 7:
                                _context2.next = 3;
                                break;
                            case 9:
                                _context2.next = 14;
                                break;
                            case 11:
                                _context2.prev = 11;
                                _context2.t0 = _context2["catch"](1);
                                _iterator2.e(_context2.t0);
                            case 14:
                                _context2.prev = 14;
                                _iterator2.f();
                                return _context2.finish(14);
                            case 17:
                            case "end":
                                return _context2.stop();
                        }
                    }, entries, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "keys",
                value: /*#__PURE__*/ _regeneratorRuntime.mark(function keys() {
                    var _iterator3, _step3, _step3$value, id;
                    return _regeneratorRuntime.wrap(function keys$(_context3) {
                        while(true)switch(_context3.prev = _context3.next){
                            case 0:
                                _iterator3 = _createForOfIteratorHelper$2(this._pairs);
                                _context3.prev = 1;
                                _iterator3.s();
                            case 3:
                                if ((_step3 = _iterator3.n()).done) {
                                    _context3.next = 9;
                                    break;
                                }
                                _step3$value = _slicedToArray(_step3.value, 1), id = _step3$value[0];
                                _context3.next = 7;
                                return id;
                            case 7:
                                _context3.next = 3;
                                break;
                            case 9:
                                _context3.next = 14;
                                break;
                            case 11:
                                _context3.prev = 11;
                                _context3.t0 = _context3["catch"](1);
                                _iterator3.e(_context3.t0);
                            case 14:
                                _context3.prev = 14;
                                _iterator3.f();
                                return _context3.finish(14);
                            case 17:
                            case "end":
                                return _context3.stop();
                        }
                    }, keys, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "values",
                value: /*#__PURE__*/ _regeneratorRuntime.mark(function values() {
                    var _iterator4, _step4, _step4$value, item;
                    return _regeneratorRuntime.wrap(function values$(_context4) {
                        while(true)switch(_context4.prev = _context4.next){
                            case 0:
                                _iterator4 = _createForOfIteratorHelper$2(this._pairs);
                                _context4.prev = 1;
                                _iterator4.s();
                            case 3:
                                if ((_step4 = _iterator4.n()).done) {
                                    _context4.next = 9;
                                    break;
                                }
                                _step4$value = _slicedToArray(_step4.value, 2), item = _step4$value[1];
                                _context4.next = 7;
                                return item;
                            case 7:
                                _context4.next = 3;
                                break;
                            case 9:
                                _context4.next = 14;
                                break;
                            case 11:
                                _context4.prev = 11;
                                _context4.t0 = _context4["catch"](1);
                                _iterator4.e(_context4.t0);
                            case 14:
                                _context4.prev = 14;
                                _iterator4.f();
                                return _context4.finish(14);
                            case 17:
                            case "end":
                                return _context4.stop();
                        }
                    }, values, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "toIdArray",
                value: function toIdArray() {
                    var _context5;
                    return _mapInstanceProperty(_context5 = _toConsumableArray(this._pairs)).call(_context5, function(pair) {
                        return pair[0];
                    });
                }
            },
            {
                key: "toItemArray",
                value: function toItemArray() {
                    var _context6;
                    return _mapInstanceProperty(_context6 = _toConsumableArray(this._pairs)).call(_context6, function(pair) {
                        return pair[1];
                    });
                }
            },
            {
                key: "toEntryArray",
                value: function toEntryArray() {
                    return _toConsumableArray(this._pairs);
                }
            },
            {
                key: "toObjectMap",
                value: function toObjectMap() {
                    var map = _Object$create$1(null);
                    var _iterator5 = _createForOfIteratorHelper$2(this._pairs), _step5;
                    try {
                        for(_iterator5.s(); !(_step5 = _iterator5.n()).done;){
                            var _step5$value = _slicedToArray(_step5.value, 2), id = _step5$value[0], item = _step5$value[1];
                            map[id] = item;
                        }
                    } catch (err) {
                        _iterator5.e(err);
                    } finally{
                        _iterator5.f();
                    }
                    return map;
                }
            },
            {
                key: "toMap",
                value: function toMap() {
                    return new _Map(this._pairs);
                }
            },
            {
                key: "toIdSet",
                value: function toIdSet() {
                    return new _Set(this.toIdArray());
                }
            },
            {
                key: "toItemSet",
                value: function toItemSet() {
                    return new _Set(this.toItemArray());
                }
            },
            {
                key: "cache",
                value: function cache() {
                    return new DataStream(_toConsumableArray(this._pairs));
                }
            },
            {
                key: "distinct",
                value: function distinct(callback) {
                    var set = new _Set();
                    var _iterator6 = _createForOfIteratorHelper$2(this._pairs), _step6;
                    try {
                        for(_iterator6.s(); !(_step6 = _iterator6.n()).done;){
                            var _step6$value = _slicedToArray(_step6.value, 2), id = _step6$value[0], item = _step6$value[1];
                            set.add(callback(item, id));
                        }
                    } catch (err) {
                        _iterator6.e(err);
                    } finally{
                        _iterator6.f();
                    }
                    return set;
                }
            },
            {
                key: "filter",
                value: function filter(callback) {
                    var pairs = this._pairs;
                    return new DataStream({
                        [_Symbol$iterator] () {
                            return /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
                                var _iterator7, _step7, _step7$value, id, item;
                                return _regeneratorRuntime.wrap(function _callee$(_context7) {
                                    while(true)switch(_context7.prev = _context7.next){
                                        case 0:
                                            _iterator7 = _createForOfIteratorHelper$2(pairs);
                                            _context7.prev = 1;
                                            _iterator7.s();
                                        case 3:
                                            if ((_step7 = _iterator7.n()).done) {
                                                _context7.next = 10;
                                                break;
                                            }
                                            _step7$value = _slicedToArray(_step7.value, 2), id = _step7$value[0], item = _step7$value[1];
                                            if (!callback(item, id)) {
                                                _context7.next = 8;
                                                break;
                                            }
                                            _context7.next = 8;
                                            return [
                                                id,
                                                item
                                            ];
                                        case 8:
                                            _context7.next = 3;
                                            break;
                                        case 10:
                                            _context7.next = 15;
                                            break;
                                        case 12:
                                            _context7.prev = 12;
                                            _context7.t0 = _context7["catch"](1);
                                            _iterator7.e(_context7.t0);
                                        case 15:
                                            _context7.prev = 15;
                                            _iterator7.f();
                                            return _context7.finish(15);
                                        case 18:
                                        case "end":
                                            return _context7.stop();
                                    }
                                }, _callee, null, [
                                    [
                                        1,
                                        12,
                                        15,
                                        18
                                    ]
                                ]);
                            })();
                        }
                    });
                }
            },
            {
                key: "forEach",
                value: function forEach(callback) {
                    var _iterator8 = _createForOfIteratorHelper$2(this._pairs), _step8;
                    try {
                        for(_iterator8.s(); !(_step8 = _iterator8.n()).done;){
                            var _step8$value = _slicedToArray(_step8.value, 2), id = _step8$value[0], item = _step8$value[1];
                            callback(item, id);
                        }
                    } catch (err) {
                        _iterator8.e(err);
                    } finally{
                        _iterator8.f();
                    }
                }
            },
            {
                key: "map",
                value: function map(callback) {
                    var pairs = this._pairs;
                    return new DataStream({
                        [_Symbol$iterator] () {
                            return /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2() {
                                var _iterator9, _step9, _step9$value, id, item;
                                return _regeneratorRuntime.wrap(function _callee2$(_context8) {
                                    while(true)switch(_context8.prev = _context8.next){
                                        case 0:
                                            _iterator9 = _createForOfIteratorHelper$2(pairs);
                                            _context8.prev = 1;
                                            _iterator9.s();
                                        case 3:
                                            if ((_step9 = _iterator9.n()).done) {
                                                _context8.next = 9;
                                                break;
                                            }
                                            _step9$value = _slicedToArray(_step9.value, 2), id = _step9$value[0], item = _step9$value[1];
                                            _context8.next = 7;
                                            return [
                                                id,
                                                callback(item, id)
                                            ];
                                        case 7:
                                            _context8.next = 3;
                                            break;
                                        case 9:
                                            _context8.next = 14;
                                            break;
                                        case 11:
                                            _context8.prev = 11;
                                            _context8.t0 = _context8["catch"](1);
                                            _iterator9.e(_context8.t0);
                                        case 14:
                                            _context8.prev = 14;
                                            _iterator9.f();
                                            return _context8.finish(14);
                                        case 17:
                                        case "end":
                                            return _context8.stop();
                                    }
                                }, _callee2, null, [
                                    [
                                        1,
                                        11,
                                        14,
                                        17
                                    ]
                                ]);
                            })();
                        }
                    });
                }
            },
            {
                key: "max",
                value: function max(callback) {
                    var iter = _getIterator(this._pairs);
                    var curr = iter.next();
                    if (curr.done) return null;
                    var maxItem = curr.value[1];
                    var maxValue = callback(curr.value[1], curr.value[0]);
                    while(!(curr = iter.next()).done){
                        var _curr$value = _slicedToArray(curr.value, 2), id = _curr$value[0], item = _curr$value[1];
                        var _value = callback(item, id);
                        if (_value > maxValue) {
                            maxValue = _value;
                            maxItem = item;
                        }
                    }
                    return maxItem;
                }
            },
            {
                key: "min",
                value: function min(callback) {
                    var iter = _getIterator(this._pairs);
                    var curr = iter.next();
                    if (curr.done) return null;
                    var minItem = curr.value[1];
                    var minValue = callback(curr.value[1], curr.value[0]);
                    while(!(curr = iter.next()).done){
                        var _curr$value2 = _slicedToArray(curr.value, 2), id = _curr$value2[0], item = _curr$value2[1];
                        var _value2 = callback(item, id);
                        if (_value2 < minValue) {
                            minValue = _value2;
                            minItem = item;
                        }
                    }
                    return minItem;
                }
            },
            {
                key: "reduce",
                value: function reduce(callback, accumulator) {
                    var _iterator10 = _createForOfIteratorHelper$2(this._pairs), _step10;
                    try {
                        for(_iterator10.s(); !(_step10 = _iterator10.n()).done;){
                            var _step10$value = _slicedToArray(_step10.value, 2), id = _step10$value[0], item = _step10$value[1];
                            accumulator = callback(accumulator, item, id);
                        }
                    } catch (err) {
                        _iterator10.e(err);
                    } finally{
                        _iterator10.f();
                    }
                    return accumulator;
                }
            },
            {
                key: "sort",
                value: function sort(callback) {
                    var _this = this;
                    return new DataStream({
                        [_Symbol$iterator]: function() {
                            var _context9;
                            return _getIterator(_sortInstanceProperty(_context9 = _toConsumableArray(_this._pairs)).call(_context9, function(_ref, _ref2) {
                                var _ref3 = _slicedToArray(_ref, 2), idA = _ref3[0], itemA = _ref3[1];
                                var _ref4 = _slicedToArray(_ref2, 2), idB = _ref4[0], itemB = _ref4[1];
                                return callback(itemA, itemB, idA, idB);
                            }));
                        }
                    });
                }
            }
        ]);
        return DataStream;
    }(_Symbol$iterator);
    function ownKeys(e, r) {
        var t = _Object$keys(e);
        if (_Object$getOwnPropertySymbols) {
            var o = _Object$getOwnPropertySymbols(e);
            r && (o = _filterInstanceProperty(o).call(o, function(r) {
                return _Object$getOwnPropertyDescriptor(e, r).enumerable;
            })), t.push.apply(t, o);
        }
        return t;
    }
    function _objectSpread(e) {
        for(var r = 1; r < arguments.length; r++){
            var _context10, _context11;
            var t = null != arguments[r] ? arguments[r] : {};
            r % 2 ? _forEachInstanceProperty(_context10 = ownKeys(Object(t), !0)).call(_context10, function(r) {
                _defineProperty(e, r, t[r]);
            }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context11 = ownKeys(Object(t))).call(_context11, function(r) {
                _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r));
            });
        }
        return e;
    }
    function _createForOfIteratorHelper$1(o, allowArrayLike) {
        var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
        if (!it) {
            if (_Array$isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {};
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = it.call(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$1(o, minLen) {
        var _context9;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
        var n = _sliceInstanceProperty(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return _Array$from$1(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
    }
    function _arrayLikeToArray$1(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    function _createSuper$1(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = _Reflect$construct(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return _possibleConstructorReturn(this, result);
        };
    }
    function _isNativeReflectConstruct$1() {
        if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
        if (_Reflect$construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    /**
   * Add an id to given item if it doesn't have one already.
   *
   * @remarks
   * The item will be modified.
   * @param item - The item that will have an id after a call to this function.
   * @param idProp - The key of the id property.
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   * @returns true
   */ function ensureFullItem(item, idProp) {
        if (item[idProp] == null) // generate an id
        item[idProp] = v4();
        return item;
    }
    /**
   * # DataSet
   *
   * Vis.js comes with a flexible DataSet, which can be used to hold and
   * manipulate unstructured data and listen for changes in the data. The DataSet
   * is key/value based. Data items can be added, updated and removed from the
   * DataSet, and one can subscribe to changes in the DataSet. The data in the
   * DataSet can be filtered and ordered. Data can be normalized when appending it
   * to the DataSet as well.
   *
   * ## Example
   *
   * The following example shows how to use a DataSet.
   *
   * ```javascript
   * // create a DataSet
   * var options = {};
   * var data = new vis.DataSet(options);
   *
   * // add items
   * // note that the data items can contain different properties and data formats
   * data.add([
   *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
   *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
   *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
   *   {id: 4, text: 'item 4'}
   * ]);
   *
   * // subscribe to any change in the DataSet
   * data.on('*', function (event, properties, senderId) {
   *   console.log('event', event, properties);
   * });
   *
   * // update an existing item
   * data.update({id: 2, group: 1});
   *
   * // remove an item
   * data.remove(4);
   *
   * // get all ids
   * var ids = data.getIds();
   * console.log('ids', ids);
   *
   * // get a specific item
   * var item1 = data.get(1);
   * console.log('item1', item1);
   *
   * // retrieve a filtered subset of the data
   * var items = data.get({
   *   filter: function (item) {
   *     return item.group == 1;
   *   }
   * });
   * console.log('filtered items', items);
   * ```
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */ var DataSet = /*#__PURE__*/ function(_DataSetPart) {
        _inherits(DataSet, _DataSetPart);
        var _super = _createSuper$1(DataSet);
        /**
     * Construct a new DataSet.
     *
     * @param data - Initial data or options.
     * @param options - Options (type error if data is also options).
     */ function DataSet(data, options) {
            var _this;
            _classCallCheck(this, DataSet);
            _this = _super.call(this);
            // correctly read optional arguments
            _defineProperty(_assertThisInitialized(_this), "_queue", null);
            if (data && !_Array$isArray(data)) {
                options = data;
                data = [];
            }
            _this._options = options || {};
            _this._data = new _Map(); // map with data indexed by id
            _this.length = 0; // number of items in the DataSet
            _this._idProp = _this._options.fieldId || "id"; // name of the field containing id
            // add initial data when provided
            if (data && data.length) _this.add(data);
            _this.setOptions(options);
            return _this;
        }
        /**
     * Set new options.
     *
     * @param options - The new options.
     */ _createClass(DataSet, [
            {
                key: "idProp",
                get: /** Flush all queued calls. */ /** @inheritDoc */ /** @inheritDoc */ function get() {
                    return this._idProp;
                }
            },
            {
                key: "setOptions",
                value: function setOptions(options) {
                    if (options && options.queue !== undefined) {
                        if (options.queue === false) // delete queue if loaded
                        {
                            if (this._queue) {
                                this._queue.destroy();
                                this._queue = null;
                            }
                        } else {
                            // create queue and update its options
                            if (!this._queue) this._queue = Queue.extend(this, {
                                replace: [
                                    "add",
                                    "update",
                                    "remove"
                                ]
                            });
                            if (options.queue && typeof options.queue === "object") this._queue.setOptions(options.queue);
                        }
                    }
                }
            },
            {
                key: "add",
                value: function add(data, senderId) {
                    var _this2 = this;
                    var addedIds = [];
                    var id;
                    if (_Array$isArray(data)) {
                        // Array
                        var idsToAdd = _mapInstanceProperty(data).call(data, function(d) {
                            return d[_this2._idProp];
                        });
                        if (_someInstanceProperty(idsToAdd).call(idsToAdd, function(id) {
                            return _this2._data.has(id);
                        })) throw new Error("A duplicate id was found in the parameter array.");
                        for(var i = 0, len = data.length; i < len; i++){
                            id = this._addItem(data[i]);
                            addedIds.push(id);
                        }
                    } else if (data && typeof data === "object") {
                        // Single item
                        id = this._addItem(data);
                        addedIds.push(id);
                    } else throw new Error("Unknown dataType");
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    return addedIds;
                }
            },
            {
                key: "update",
                value: function update(data, senderId) {
                    var _this3 = this;
                    var addedIds = [];
                    var updatedIds = [];
                    var oldData = [];
                    var updatedData = [];
                    var idProp = this._idProp;
                    var addOrUpdate = function addOrUpdate(item) {
                        var origId = item[idProp];
                        if (origId != null && _this3._data.has(origId)) {
                            var fullItem = item; // it has an id, therefore it is a fullitem
                            var oldItem = _Object$assign({}, _this3._data.get(origId));
                            // update item
                            var id = _this3._updateItem(fullItem);
                            updatedIds.push(id);
                            updatedData.push(fullItem);
                            oldData.push(oldItem);
                        } else {
                            // add new item
                            var _id = _this3._addItem(item);
                            addedIds.push(_id);
                        }
                    };
                    if (_Array$isArray(data)) {
                        // Array
                        for(var i = 0, len = data.length; i < len; i++)if (data[i] && typeof data[i] === "object") addOrUpdate(data[i]);
                        else console.warn("Ignoring input item, which is not an object at index " + i);
                    } else if (data && typeof data === "object") // Single item
                    addOrUpdate(data);
                    else throw new Error("Unknown dataType");
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    if (updatedIds.length) {
                        var props = {
                            items: updatedIds,
                            oldData: oldData,
                            data: updatedData
                        };
                        // TODO: remove deprecated property 'data' some day
                        //Object.defineProperty(props, 'data', {
                        //  'get': (function() {
                        //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
                        //    return updatedData;
                        //  }).bind(this)
                        //});
                        this._trigger("update", props, senderId);
                    }
                    return _concatInstanceProperty(addedIds).call(addedIds, updatedIds);
                }
            },
            {
                key: "updateOnly",
                value: function updateOnly(data, senderId) {
                    var _context, _this4 = this;
                    if (!_Array$isArray(data)) data = [
                        data
                    ];
                    var updateEventData = _mapInstanceProperty(_context = _mapInstanceProperty(data).call(data, function(update) {
                        var oldData = _this4._data.get(update[_this4._idProp]);
                        if (oldData == null) throw new Error("Updating non-existent items is not allowed.");
                        return {
                            oldData,
                            update
                        };
                    })).call(_context, function(_ref) {
                        var oldData = _ref.oldData, update = _ref.update;
                        var id = oldData[_this4._idProp];
                        var updatedData = pureDeepObjectAssign(oldData, update);
                        _this4._data.set(id, updatedData);
                        return {
                            id,
                            oldData: oldData,
                            updatedData
                        };
                    });
                    if (updateEventData.length) {
                        var props = {
                            items: _mapInstanceProperty(updateEventData).call(updateEventData, function(value) {
                                return value.id;
                            }),
                            oldData: _mapInstanceProperty(updateEventData).call(updateEventData, function(value) {
                                return value.oldData;
                            }),
                            data: _mapInstanceProperty(updateEventData).call(updateEventData, function(value) {
                                return value.updatedData;
                            })
                        };
                        // TODO: remove deprecated property 'data' some day
                        //Object.defineProperty(props, 'data', {
                        //  'get': (function() {
                        //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
                        //    return updatedData;
                        //  }).bind(this)
                        //});
                        this._trigger("update", props, senderId);
                        return props.items;
                    } else return [];
                }
            },
            {
                key: "get",
                value: function get(first, second) {
                    // @TODO: Woudn't it be better to split this into multiple methods?
                    // parse the arguments
                    var id = undefined;
                    var ids = undefined;
                    var options = undefined;
                    if (isId(first)) {
                        // get(id [, options])
                        id = first;
                        options = second;
                    } else if (_Array$isArray(first)) {
                        // get(ids [, options])
                        ids = first;
                        options = second;
                    } else // get([, options])
                    options = first;
                    // determine the return type
                    var returnType = options && options.returnType === "Object" ? "Object" : "Array";
                    // @TODO: WTF is this? Or am I missing something?
                    // var returnType
                    // if (options && options.returnType) {
                    //   var allowedValues = ['Array', 'Object']
                    //   returnType =
                    //     allowedValues.indexOf(options.returnType) == -1
                    //       ? 'Array'
                    //       : options.returnType
                    // } else {
                    //   returnType = 'Array'
                    // }
                    // build options
                    var filter = options && _filterInstanceProperty(options);
                    var items = [];
                    var item = undefined;
                    var itemIds = undefined;
                    var itemId = undefined;
                    // convert items
                    if (id != null) {
                        // return a single item
                        item = this._data.get(id);
                        if (item && filter && !filter(item)) item = undefined;
                    } else if (ids != null) // return a subset of items
                    for(var i = 0, len = ids.length; i < len; i++){
                        item = this._data.get(ids[i]);
                        if (item != null && (!filter || filter(item))) items.push(item);
                    }
                    else {
                        var _context2;
                        // return all items
                        itemIds = _toConsumableArray(_keysInstanceProperty(_context2 = this._data).call(_context2));
                        for(var _i = 0, _len = itemIds.length; _i < _len; _i++){
                            itemId = itemIds[_i];
                            item = this._data.get(itemId);
                            if (item != null && (!filter || filter(item))) items.push(item);
                        }
                    }
                    // order the results
                    if (options && options.order && id == undefined) this._sort(items, options.order);
                    // filter fields of the items
                    if (options && options.fields) {
                        var fields = options.fields;
                        if (id != undefined && item != null) item = this._filterFields(item, fields);
                        else for(var _i2 = 0, _len2 = items.length; _i2 < _len2; _i2++)items[_i2] = this._filterFields(items[_i2], fields);
                    }
                    // return the results
                    if (returnType == "Object") {
                        var result = {};
                        for(var _i3 = 0, _len3 = items.length; _i3 < _len3; _i3++){
                            var resultant = items[_i3];
                            // @TODO: Shoudn't this be this._fieldId?
                            // result[resultant.id] = resultant
                            var _id2 = resultant[this._idProp];
                            result[_id2] = resultant;
                        }
                        return result;
                    } else {
                        if (id != null) {
                            var _item;
                            // a single item
                            return (_item = item) !== null && _item !== void 0 ? _item : null;
                        } else // just return our array
                        return items;
                    }
                }
            },
            {
                key: "getIds",
                value: function getIds(options) {
                    var data = this._data;
                    var filter = options && _filterInstanceProperty(options);
                    var order = options && options.order;
                    var itemIds = _toConsumableArray(_keysInstanceProperty(data).call(data));
                    var ids = [];
                    if (filter) {
                        // get filtered items
                        if (order) {
                            // create ordered list
                            var items = [];
                            for(var i = 0, len = itemIds.length; i < len; i++){
                                var id = itemIds[i];
                                var item = this._data.get(id);
                                if (item != null && filter(item)) items.push(item);
                            }
                            this._sort(items, order);
                            for(var _i4 = 0, _len4 = items.length; _i4 < _len4; _i4++)ids.push(items[_i4][this._idProp]);
                        } else // create unordered list
                        for(var _i5 = 0, _len5 = itemIds.length; _i5 < _len5; _i5++){
                            var _id3 = itemIds[_i5];
                            var _item2 = this._data.get(_id3);
                            if (_item2 != null && filter(_item2)) ids.push(_item2[this._idProp]);
                        }
                    } else {
                        // get all items
                        if (order) {
                            // create an ordered list
                            var _items = [];
                            for(var _i6 = 0, _len6 = itemIds.length; _i6 < _len6; _i6++){
                                var _id4 = itemIds[_i6];
                                _items.push(data.get(_id4));
                            }
                            this._sort(_items, order);
                            for(var _i7 = 0, _len7 = _items.length; _i7 < _len7; _i7++)ids.push(_items[_i7][this._idProp]);
                        } else // create unordered list
                        for(var _i8 = 0, _len8 = itemIds.length; _i8 < _len8; _i8++){
                            var _id5 = itemIds[_i8];
                            var _item3 = data.get(_id5);
                            if (_item3 != null) ids.push(_item3[this._idProp]);
                        }
                    }
                    return ids;
                }
            },
            {
                key: "getDataSet",
                value: function getDataSet() {
                    return this;
                }
            },
            {
                key: "forEach",
                value: function forEach(callback, options) {
                    var filter = options && _filterInstanceProperty(options);
                    var data = this._data;
                    var itemIds = _toConsumableArray(_keysInstanceProperty(data).call(data));
                    if (options && options.order) {
                        // execute forEach on ordered list
                        var items = this.get(options);
                        for(var i = 0, len = items.length; i < len; i++){
                            var item = items[i];
                            var id = item[this._idProp];
                            callback(item, id);
                        }
                    } else // unordered
                    for(var _i9 = 0, _len9 = itemIds.length; _i9 < _len9; _i9++){
                        var _id6 = itemIds[_i9];
                        var _item4 = this._data.get(_id6);
                        if (_item4 != null && (!filter || filter(_item4))) callback(_item4, _id6);
                    }
                }
            },
            {
                key: "map",
                value: function map(callback, options) {
                    var filter = options && _filterInstanceProperty(options);
                    var mappedItems = [];
                    var data = this._data;
                    var itemIds = _toConsumableArray(_keysInstanceProperty(data).call(data));
                    // convert and filter items
                    for(var i = 0, len = itemIds.length; i < len; i++){
                        var id = itemIds[i];
                        var item = this._data.get(id);
                        if (item != null && (!filter || filter(item))) mappedItems.push(callback(item, id));
                    }
                    // order items
                    if (options && options.order) this._sort(mappedItems, options.order);
                    return mappedItems;
                }
            },
            {
                key: "_filterFields",
                value: function _filterFields(item, fields) {
                    var _context3;
                    if (!item) // item is null
                    return item;
                    return _reduceInstanceProperty(_context3 = _Array$isArray(fields) ? // Use the supplied array
                    fields : // Use the keys of the supplied object
                    _Object$keys(fields)).call(_context3, function(filteredItem, field) {
                        filteredItem[field] = item[field];
                        return filteredItem;
                    }, {});
                }
            },
            {
                key: "_sort",
                value: function _sort(items, order) {
                    if (typeof order === "string") {
                        // order by provided field name
                        var name = order; // field name
                        _sortInstanceProperty(items).call(items, function(a, b) {
                            // @TODO: How to treat missing properties?
                            var av = a[name];
                            var bv = b[name];
                            return av > bv ? 1 : av < bv ? -1 : 0;
                        });
                    } else if (typeof order === "function") // order by sort function
                    _sortInstanceProperty(items).call(items, order);
                    else // TODO: extend order by an Object {field:string, direction:string}
                    //       where direction can be 'asc' or 'desc'
                    throw new TypeError("Order must be a function or a string");
                }
            },
            {
                key: "remove",
                value: function remove(id, senderId) {
                    var removedIds = [];
                    var removedItems = [];
                    // force everything to be an array for simplicity
                    var ids = _Array$isArray(id) ? id : [
                        id
                    ];
                    for(var i = 0, len = ids.length; i < len; i++){
                        var item = this._remove(ids[i]);
                        if (item) {
                            var itemId = item[this._idProp];
                            if (itemId != null) {
                                removedIds.push(itemId);
                                removedItems.push(item);
                            }
                        }
                    }
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    }, senderId);
                    return removedIds;
                }
            },
            {
                key: "_remove",
                value: function _remove(id) {
                    // @TODO: It origianlly returned the item although the docs say id.
                    // The code expects the item, so probably an error in the docs.
                    var ident;
                    // confirm the id to use based on the args type
                    if (isId(id)) ident = id;
                    else if (id && typeof id === "object") ident = id[this._idProp]; // look for the identifier field using ._idProp
                    // do the removing if the item is found
                    if (ident != null && this._data.has(ident)) {
                        var item = this._data.get(ident) || null;
                        this._data.delete(ident);
                        --this.length;
                        return item;
                    }
                    return null;
                }
            },
            {
                key: "clear",
                value: function clear(senderId) {
                    var _context4;
                    var ids = _toConsumableArray(_keysInstanceProperty(_context4 = this._data).call(_context4));
                    var items = [];
                    for(var i = 0, len = ids.length; i < len; i++)items.push(this._data.get(ids[i]));
                    this._data.clear();
                    this.length = 0;
                    this._trigger("remove", {
                        items: ids,
                        oldData: items
                    }, senderId);
                    return ids;
                }
            },
            {
                key: "max",
                value: function max(field) {
                    var _context5;
                    var max = null;
                    var maxField = null;
                    var _iterator = _createForOfIteratorHelper$1(_valuesInstanceProperty(_context5 = this._data).call(_context5)), _step;
                    try {
                        for(_iterator.s(); !(_step = _iterator.n()).done;){
                            var item = _step.value;
                            var itemField = item[field];
                            if (typeof itemField === "number" && (maxField == null || itemField > maxField)) {
                                max = item;
                                maxField = itemField;
                            }
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally{
                        _iterator.f();
                    }
                    return max || null;
                }
            },
            {
                key: "min",
                value: function min(field) {
                    var _context6;
                    var min = null;
                    var minField = null;
                    var _iterator2 = _createForOfIteratorHelper$1(_valuesInstanceProperty(_context6 = this._data).call(_context6)), _step2;
                    try {
                        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                            var item = _step2.value;
                            var itemField = item[field];
                            if (typeof itemField === "number" && (minField == null || itemField < minField)) {
                                min = item;
                                minField = itemField;
                            }
                        }
                    } catch (err) {
                        _iterator2.e(err);
                    } finally{
                        _iterator2.f();
                    }
                    return min || null;
                }
            },
            {
                key: "distinct",
                value: function distinct(prop) {
                    var data = this._data;
                    var itemIds = _toConsumableArray(_keysInstanceProperty(data).call(data));
                    var values = [];
                    var count = 0;
                    for(var i = 0, len = itemIds.length; i < len; i++){
                        var id = itemIds[i];
                        var item = data.get(id);
                        var value = item[prop];
                        var exists = false;
                        for(var j = 0; j < count; j++)if (values[j] == value) {
                            exists = true;
                            break;
                        }
                        if (!exists && value !== undefined) {
                            values[count] = value;
                            count++;
                        }
                    }
                    return values;
                }
            },
            {
                key: "_addItem",
                value: function _addItem(item) {
                    var fullItem = ensureFullItem(item, this._idProp);
                    var id = fullItem[this._idProp];
                    // check whether this id is already taken
                    if (this._data.has(id)) // item already exists
                    throw new Error("Cannot add item: item with id " + id + " already exists");
                    this._data.set(id, fullItem);
                    ++this.length;
                    return id;
                }
            },
            {
                key: "_updateItem",
                value: function _updateItem(update) {
                    var id = update[this._idProp];
                    if (id == null) throw new Error("Cannot update item: item has no id (item: " + _JSON$stringify(update) + ")");
                    var item = this._data.get(id);
                    if (!item) // item doesn't exist
                    throw new Error("Cannot update item: no item with id " + id + " found");
                    this._data.set(id, _objectSpread(_objectSpread({}, item), update));
                    return id;
                }
            },
            {
                key: "stream",
                value: function stream(ids) {
                    if (ids) {
                        var data = this._data;
                        return new DataStream({
                            [_Symbol$iterator] () {
                                return /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
                                    var _iterator3, _step3, id, item;
                                    return _regeneratorRuntime.wrap(function _callee$(_context7) {
                                        while(true)switch(_context7.prev = _context7.next){
                                            case 0:
                                                _iterator3 = _createForOfIteratorHelper$1(ids);
                                                _context7.prev = 1;
                                                _iterator3.s();
                                            case 3:
                                                if ((_step3 = _iterator3.n()).done) {
                                                    _context7.next = 11;
                                                    break;
                                                }
                                                id = _step3.value;
                                                item = data.get(id);
                                                if (!(item != null)) {
                                                    _context7.next = 9;
                                                    break;
                                                }
                                                _context7.next = 9;
                                                return [
                                                    id,
                                                    item
                                                ];
                                            case 9:
                                                _context7.next = 3;
                                                break;
                                            case 11:
                                                _context7.next = 16;
                                                break;
                                            case 13:
                                                _context7.prev = 13;
                                                _context7.t0 = _context7["catch"](1);
                                                _iterator3.e(_context7.t0);
                                            case 16:
                                                _context7.prev = 16;
                                                _iterator3.f();
                                                return _context7.finish(16);
                                            case 19:
                                            case "end":
                                                return _context7.stop();
                                        }
                                    }, _callee, null, [
                                        [
                                            1,
                                            13,
                                            16,
                                            19
                                        ]
                                    ]);
                                })();
                            }
                        });
                    } else {
                        var _context8;
                        return new DataStream({
                            [_Symbol$iterator]: _bindInstanceProperty$1(_context8 = _entriesInstanceProperty(this._data)).call(_context8, this._data)
                        });
                    }
                }
            }
        ]);
        return DataSet;
    }(DataSetPart);
    function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
        if (!it) {
            if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {};
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = it.call(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray(o, minLen) {
        var _context5;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = _sliceInstanceProperty(_context5 = Object.prototype.toString.call(o)).call(_context5, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return _Array$from$1(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = _Reflect$construct(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return _possibleConstructorReturn(this, result);
        };
    }
    function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !_Reflect$construct) return false;
        if (_Reflect$construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function() {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    /**
   * DataView
   *
   * A DataView offers a filtered and/or formatted view on a DataSet. One can subscribe to changes in a DataView, and easily get filtered or formatted data without having to specify filters and field types all the time.
   *
   * ## Example
   * ```javascript
   * // create a DataSet
   * var data = new vis.DataSet();
   * data.add([
   *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
   *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
   *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
   *   {id: 4, text: 'item 4'}
   * ]);
   *
   * // create a DataView
   * // the view will only contain items having a property group with value 1,
   * // and will only output fields id, text, and date.
   * var view = new vis.DataView(data, {
   *   filter: function (item) {
   *     return (item.group == 1);
   *   },
   *   fields: ['id', 'text', 'date']
   * });
   *
   * // subscribe to any change in the DataView
   * view.on('*', function (event, properties, senderId) {
   *   console.log('event', event, properties);
   * });
   *
   * // update an item in the data set
   * data.update({id: 2, group: 1});
   *
   * // get all ids in the view
   * var ids = view.getIds();
   * console.log('ids', ids); // will output [1, 2]
   *
   * // get all items in the view
   * var items = view.get();
   * ```
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */ var DataView = /*#__PURE__*/ function(_DataSetPart) {
        _inherits(DataView, _DataSetPart);
        var _super = _createSuper(DataView);
        // ids of the items currently in memory (just contains a boolean true)
        /**
     * Create a DataView.
     *
     * @param data - The instance containing data (directly or indirectly).
     * @param options - Options to configure this data view.
     */ function DataView(data, options) {
            var _context;
            var _this;
            _classCallCheck(this, DataView);
            _this = _super.call(this);
            /** @inheritDoc */ _defineProperty(_assertThisInitialized(_this), "length", 0);
            // constructor → setData
            _defineProperty(_assertThisInitialized(_this), "_ids", new _Set());
            _this._options = options || {};
            _this._listener = _bindInstanceProperty$1(_context = _this._onEvent).call(_context, _assertThisInitialized(_this));
            _this.setData(data);
            return _this;
        }
        // TODO: implement a function .config() to dynamically update things like configured filter
        // and trigger changes accordingly
        /**
     * Set a data source for the view.
     *
     * @param data - The instance containing data (directly or indirectly).
     * @remarks
     * Note that when the data view is bound to a data set it won't be garbage
     * collected unless the data set is too. Use `dataView.setData(null)` or
     * `dataView.dispose()` to enable garbage collection before you lose the last
     * reference.
     */ _createClass(DataView, [
            {
                key: "idProp",
                get: /** @inheritDoc */ function get() {
                    return this.getDataSet().idProp;
                }
            },
            {
                key: "setData",
                value: function setData(data) {
                    if (this._data) {
                        // unsubscribe from current dataset
                        if (this._data.off) this._data.off("*", this._listener);
                        // trigger a remove of all items in memory
                        var ids = this._data.getIds({
                            filter: _filterInstanceProperty(this._options)
                        });
                        var items = this._data.get(ids);
                        this._ids.clear();
                        this.length = 0;
                        this._trigger("remove", {
                            items: ids,
                            oldData: items
                        });
                    }
                    if (data != null) {
                        this._data = data;
                        // trigger an add of all added items
                        var _ids = this._data.getIds({
                            filter: _filterInstanceProperty(this._options)
                        });
                        for(var i = 0, len = _ids.length; i < len; i++){
                            var id = _ids[i];
                            this._ids.add(id);
                        }
                        this.length = _ids.length;
                        this._trigger("add", {
                            items: _ids
                        });
                    } else this._data = new DataSet();
                    // subscribe to new dataset
                    if (this._data.on) this._data.on("*", this._listener);
                }
            },
            {
                key: "refresh",
                value: function refresh() {
                    var ids = this._data.getIds({
                        filter: _filterInstanceProperty(this._options)
                    });
                    var oldIds = _toConsumableArray(this._ids);
                    var newIds = {};
                    var addedIds = [];
                    var removedIds = [];
                    var removedItems = [];
                    // check for additions
                    for(var i = 0, len = ids.length; i < len; i++){
                        var id = ids[i];
                        newIds[id] = true;
                        if (!this._ids.has(id)) {
                            addedIds.push(id);
                            this._ids.add(id);
                        }
                    }
                    // check for removals
                    for(var _i = 0, _len = oldIds.length; _i < _len; _i++){
                        var _id = oldIds[_i];
                        var item = this._data.get(_id);
                        if (item == null) // @TODO: Investigate.
                        // Doesn't happen during tests or examples.
                        // Is it really impossible or could it eventually happen?
                        // How to handle it if it does? The types guarantee non-nullable items.
                        console.error("If you see this, report it please.");
                        else if (!newIds[_id]) {
                            removedIds.push(_id);
                            removedItems.push(item);
                            this._ids.delete(_id);
                        }
                    }
                    this.length += addedIds.length - removedIds.length;
                    // trigger events
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    });
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    });
                }
            },
            {
                key: "get",
                value: function get(first, second) {
                    if (this._data == null) return null;
                    // parse the arguments
                    var ids = null;
                    var options;
                    if (isId(first) || _Array$isArray(first)) {
                        ids = first;
                        options = second;
                    } else options = first;
                    // extend the options with the default options and provided options
                    var viewOptions = _Object$assign({}, this._options, options);
                    // create a combined filter method when needed
                    var thisFilter = _filterInstanceProperty(this._options);
                    var optionsFilter = options && _filterInstanceProperty(options);
                    if (thisFilter && optionsFilter) viewOptions.filter = function(item) {
                        return thisFilter(item) && optionsFilter(item);
                    };
                    if (ids == null) return this._data.get(viewOptions);
                    else return this._data.get(ids, viewOptions);
                }
            },
            {
                key: "getIds",
                value: function getIds(options) {
                    if (this._data.length) {
                        var defaultFilter = _filterInstanceProperty(this._options);
                        var optionsFilter = options != null ? _filterInstanceProperty(options) : null;
                        var filter;
                        if (optionsFilter) {
                            if (defaultFilter) filter = function filter(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter = optionsFilter;
                        } else filter = defaultFilter;
                        return this._data.getIds({
                            filter: filter,
                            order: options && options.order
                        });
                    } else return [];
                }
            },
            {
                key: "forEach",
                value: function forEach(callback, options) {
                    if (this._data) {
                        var _context2;
                        var defaultFilter = _filterInstanceProperty(this._options);
                        var optionsFilter = options && _filterInstanceProperty(options);
                        var filter;
                        if (optionsFilter) {
                            if (defaultFilter) filter = function filter(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter = optionsFilter;
                        } else filter = defaultFilter;
                        _forEachInstanceProperty(_context2 = this._data).call(_context2, callback, {
                            filter: filter,
                            order: options && options.order
                        });
                    }
                }
            },
            {
                key: "map",
                value: function map(callback, options) {
                    if (this._data) {
                        var _context3;
                        var defaultFilter = _filterInstanceProperty(this._options);
                        var optionsFilter = options && _filterInstanceProperty(options);
                        var filter;
                        if (optionsFilter) {
                            if (defaultFilter) filter = function filter(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter = optionsFilter;
                        } else filter = defaultFilter;
                        return _mapInstanceProperty(_context3 = this._data).call(_context3, callback, {
                            filter: filter,
                            order: options && options.order
                        });
                    } else return [];
                }
            },
            {
                key: "getDataSet",
                value: function getDataSet() {
                    return this._data.getDataSet();
                }
            },
            {
                key: "stream",
                value: function stream(ids) {
                    var _context4;
                    return this._data.stream(ids || {
                        [_Symbol$iterator]: _bindInstanceProperty$1(_context4 = _keysInstanceProperty(this._ids)).call(_context4, this._ids)
                    });
                }
            },
            {
                key: "dispose",
                value: function dispose() {
                    var _this$_data;
                    if ((_this$_data = this._data) !== null && _this$_data !== void 0 && _this$_data.off) this._data.off("*", this._listener);
                    var message = "This data view has already been disposed of.";
                    var replacement = {
                        get: function get() {
                            throw new Error(message);
                        },
                        set: function set() {
                            throw new Error(message);
                        },
                        configurable: false
                    };
                    var _iterator = _createForOfIteratorHelper(_Reflect$ownKeys(DataView.prototype)), _step;
                    try {
                        for(_iterator.s(); !(_step = _iterator.n()).done;){
                            var key = _step.value;
                            _Object$defineProperty(this, key, replacement);
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally{
                        _iterator.f();
                    }
                }
            },
            {
                key: "_onEvent",
                value: function _onEvent(event, params, senderId) {
                    if (!params || !params.items || !this._data) return;
                    var ids = params.items;
                    var addedIds = [];
                    var updatedIds = [];
                    var removedIds = [];
                    var oldItems = [];
                    var updatedItems = [];
                    var removedItems = [];
                    switch(event){
                        case "add":
                            // filter the ids of the added items
                            for(var i = 0, len = ids.length; i < len; i++){
                                var id = ids[i];
                                var item = this.get(id);
                                if (item) {
                                    this._ids.add(id);
                                    addedIds.push(id);
                                }
                            }
                            break;
                        case "update":
                            // determine the event from the views viewpoint: an updated
                            // item can be added, updated, or removed from this view.
                            for(var _i2 = 0, _len2 = ids.length; _i2 < _len2; _i2++){
                                var _id2 = ids[_i2];
                                var _item = this.get(_id2);
                                if (_item) {
                                    if (this._ids.has(_id2)) {
                                        updatedIds.push(_id2);
                                        updatedItems.push(params.data[_i2]);
                                        oldItems.push(params.oldData[_i2]);
                                    } else {
                                        this._ids.add(_id2);
                                        addedIds.push(_id2);
                                    }
                                } else if (this._ids.has(_id2)) {
                                    this._ids.delete(_id2);
                                    removedIds.push(_id2);
                                    removedItems.push(params.oldData[_i2]);
                                }
                            }
                            break;
                        case "remove":
                            // filter the ids of the removed items
                            for(var _i3 = 0, _len3 = ids.length; _i3 < _len3; _i3++){
                                var _id3 = ids[_i3];
                                if (this._ids.has(_id3)) {
                                    this._ids.delete(_id3);
                                    removedIds.push(_id3);
                                    removedItems.push(params.oldData[_i3]);
                                }
                            }
                            break;
                    }
                    this.length += addedIds.length - removedIds.length;
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    if (updatedIds.length) this._trigger("update", {
                        items: updatedIds,
                        oldData: oldItems,
                        data: updatedItems
                    }, senderId);
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    }, senderId);
                }
            }
        ]);
        return DataView;
    }(DataSetPart);
    /**
   * Check that given value is compatible with Vis Data Set interface.
   *
   * @param idProp - The expected property to contain item id.
   * @param v - The value to be tested.
   * @returns True if all expected values and methods match, false otherwise.
   */ function isDataSetLike(idProp, v) {
        return typeof v === "object" && v !== null && idProp === v.idProp && typeof v.add === "function" && typeof v.clear === "function" && typeof v.distinct === "function" && typeof _forEachInstanceProperty(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof _mapInstanceProperty(v) === "function" && typeof v.max === "function" && typeof v.min === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.remove === "function" && typeof v.setOptions === "function" && typeof v.stream === "function" && typeof v.update === "function" && typeof v.updateOnly === "function";
    }
    /**
   * Check that given value is compatible with Vis Data View interface.
   *
   * @param idProp - The expected property to contain item id.
   * @param v - The value to be tested.
   * @returns True if all expected values and methods match, false otherwise.
   */ function isDataViewLike(idProp, v) {
        return typeof v === "object" && v !== null && idProp === v.idProp && typeof _forEachInstanceProperty(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof _mapInstanceProperty(v) === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.stream === "function" && isDataSetLike(idProp, v.getDataSet());
    }
    exports1.DELETE = DELETE;
    exports1.DataSet = DataSet;
    exports1.DataStream = DataStream;
    exports1.DataView = DataView;
    exports1.Queue = Queue;
    exports1.createNewDataPipeFrom = createNewDataPipeFrom;
    exports1.isDataSetLike = isDataSetLike;
    exports1.isDataViewLike = isDataViewLike;
});

},{}],"1zQav":[function(require,module,exports) {
/**
 * vis-data
 * http://visjs.org/
 *
 * Manage unstructured data using DataSet. Add, update, and remove data, and listen for changes in the data.
 *
 * @version 7.1.9
 * @date    2023-11-24T17:53:34.179Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */ var global = arguments[3];
!function(t, e) {
    e(exports);
}(this, function(t) {
    function e(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }
    var r = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
    function n(t) {
        return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
    }
    var o = {
        exports: {}
    }, i = function(t) {
        return t && t.Math === Math && t;
    }, a = i("object" == typeof globalThis && globalThis) || i("object" == typeof window && window) || i("object" == typeof self && self) || i("object" == typeof r && r) || function() {
        return this;
    }() || r || Function("return this")(), u = function(t) {
        try {
            return !!t();
        } catch (t) {
            return !0;
        }
    }, s = !u(function() {
        var t = (function() {}).bind();
        return "function" != typeof t || t.hasOwnProperty("prototype");
    }), c = s, f = Function.prototype, l = f.apply, h = f.call, p = "object" == typeof Reflect && Reflect.apply || (c ? h.bind(l) : function() {
        return h.apply(l, arguments);
    }), v = s, d = Function.prototype, y = d.call, g = v && d.bind.bind(y, y), m = v ? g : function(t) {
        return function() {
            return y.apply(t, arguments);
        };
    }, b = m, w = b({}.toString), _ = b("".slice), T = function(t) {
        return _(w(t), 8, -1);
    }, E = T, O = m, S = function(t) {
        if ("Function" === E(t)) return O(t);
    }, x = "object" == typeof document && document.all, k = {
        all: x,
        IS_HTMLDDA: void 0 === x && void 0 !== x
    }, j = k.all, A = k.IS_HTMLDDA ? function(t) {
        return "function" == typeof t || t === j;
    } : function(t) {
        return "function" == typeof t;
    }, P = {}, I = !u(function() {
        return 7 !== Object.defineProperty({}, 1, {
            get: function() {
                return 7;
            }
        })[1];
    }), D = s, L = Function.prototype.call, C = D ? L.bind(L) : function() {
        return L.apply(L, arguments);
    }, R = {}, M = {}.propertyIsEnumerable, N = Object.getOwnPropertyDescriptor, F = N && !M.call({
        1: 2
    }, 1);
    R.f = F ? function(t) {
        var e = N(this, t);
        return !!e && e.enumerable;
    } : M;
    var z, U, q = function(t, e) {
        return {
            enumerable: !(1 & t),
            configurable: !(2 & t),
            writable: !(4 & t),
            value: e
        };
    }, W = u, Y = T, G = Object, X = m("".split), V = W(function() {
        return !G("z").propertyIsEnumerable(0);
    }) ? function(t) {
        return "String" === Y(t) ? X(t, "") : G(t);
    } : G, B = function(t) {
        return null == t;
    }, H = B, K = TypeError, J = function(t) {
        if (H(t)) throw new K("Can't call method on " + t);
        return t;
    }, $ = V, Q = J, Z = function(t) {
        return $(Q(t));
    }, tt = A, et = k.all, rt = k.IS_HTMLDDA ? function(t) {
        return "object" == typeof t ? null !== t : tt(t) || t === et;
    } : function(t) {
        return "object" == typeof t ? null !== t : tt(t);
    }, nt = {}, ot = nt, it = a, at = A, ut = function(t) {
        return at(t) ? t : void 0;
    }, st = function(t, e) {
        return arguments.length < 2 ? ut(ot[t]) || ut(it[t]) : ot[t] && ot[t][e] || it[t] && it[t][e];
    }, ct = m({}.isPrototypeOf), ft = "undefined" != typeof navigator && String(navigator.userAgent) || "", lt = a, ht = ft, pt = lt.process, vt = lt.Deno, dt = pt && pt.versions || vt && vt.version, yt = dt && dt.v8;
    yt && (U = (z = yt.split("."))[0] > 0 && z[0] < 4 ? 1 : +(z[0] + z[1])), !U && ht && (!(z = ht.match(/Edge\/(\d+)/)) || z[1] >= 74) && (z = ht.match(/Chrome\/(\d+)/)) && (U = +z[1]);
    var gt = U, mt = gt, bt = u, wt = a.String, _t = !!Object.getOwnPropertySymbols && !bt(function() {
        var t = Symbol("symbol detection");
        return !wt(t) || !(Object(t) instanceof Symbol) || !Symbol.sham && mt && mt < 41;
    }), Tt = _t && !Symbol.sham && "symbol" == typeof Symbol.iterator, Et = st, Ot = A, St = ct, xt = Object, kt = Tt ? function(t) {
        return "symbol" == typeof t;
    } : function(t) {
        var e = Et("Symbol");
        return Ot(e) && St(e.prototype, xt(t));
    }, jt = String, At = function(t) {
        try {
            return jt(t);
        } catch (t) {
            return "Object";
        }
    }, Pt = A, It = At, Dt = TypeError, Lt = function(t) {
        if (Pt(t)) return t;
        throw new Dt(It(t) + " is not a function");
    }, Ct = Lt, Rt = B, Mt = function(t, e) {
        var r = t[e];
        return Rt(r) ? void 0 : Ct(r);
    }, Nt = C, Ft = A, zt = rt, Ut = TypeError, qt = {
        exports: {}
    }, Wt = a, Yt = Object.defineProperty, Gt = function(t, e) {
        try {
            Yt(Wt, t, {
                value: e,
                configurable: !0,
                writable: !0
            });
        } catch (r) {
            Wt[t] = e;
        }
        return e;
    }, Xt = "__core-js_shared__", Vt = a[Xt] || Gt(Xt, {}), Bt = Vt;
    (qt.exports = function(t, e) {
        return Bt[t] || (Bt[t] = void 0 !== e ? e : {});
    })("versions", []).push({
        version: "3.33.2",
        mode: "pure",
        copyright: "\xa9 2014-2023 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.33.2/LICENSE",
        source: "https://github.com/zloirock/core-js"
    });
    var Ht = qt.exports, Kt = J, Jt = Object, $t = function(t) {
        return Jt(Kt(t));
    }, Qt = $t, Zt = m({}.hasOwnProperty), te = Object.hasOwn || function(t, e) {
        return Zt(Qt(t), e);
    }, ee = m, re = 0, ne = Math.random(), oe = ee(1..toString), ie = function(t) {
        return "Symbol(" + (void 0 === t ? "" : t) + ")_" + oe(++re + ne, 36);
    }, ae = Ht, ue = te, se = ie, ce = _t, fe = Tt, le = a.Symbol, he = ae("wks"), pe = fe ? le.for || le : le && le.withoutSetter || se, ve = function(t) {
        return ue(he, t) || (he[t] = ce && ue(le, t) ? le[t] : pe("Symbol." + t)), he[t];
    }, de = C, ye = rt, ge = kt, me = Mt, be = function(t, e) {
        var r, n;
        if ("string" === e && Ft(r = t.toString) && !zt(n = Nt(r, t))) return n;
        if (Ft(r = t.valueOf) && !zt(n = Nt(r, t))) return n;
        if ("string" !== e && Ft(r = t.toString) && !zt(n = Nt(r, t))) return n;
        throw new Ut("Can't convert object to primitive value");
    }, we = TypeError, _e = ve("toPrimitive"), Te = function(t, e) {
        if (!ye(t) || ge(t)) return t;
        var r, n = me(t, _e);
        if (n) {
            if (void 0 === e && (e = "default"), r = de(n, t, e), !ye(r) || ge(r)) return r;
            throw new we("Can't convert object to primitive value");
        }
        return void 0 === e && (e = "number"), be(t, e);
    }, Ee = kt, Oe = function(t) {
        var e = Te(t, "string");
        return Ee(e) ? e : e + "";
    }, Se = rt, xe = a.document, ke = Se(xe) && Se(xe.createElement), je = function(t) {
        return ke ? xe.createElement(t) : {};
    }, Ae = je, Pe = !I && !u(function() {
        return 7 !== Object.defineProperty(Ae("div"), "a", {
            get: function() {
                return 7;
            }
        }).a;
    }), Ie = I, De = C, Le = R, Ce = q, Re = Z, Me = Oe, Ne = te, Fe = Pe, ze = Object.getOwnPropertyDescriptor;
    P.f = Ie ? ze : function(t, e) {
        if (t = Re(t), e = Me(e), Fe) try {
            return ze(t, e);
        } catch (t) {}
        if (Ne(t, e)) return Ce(!De(Le.f, t, e), t[e]);
    };
    var Ue = u, qe = A, We = /#|\.prototype\./, Ye = function(t, e) {
        var r = Xe[Ge(t)];
        return r === Be || r !== Ve && (qe(e) ? Ue(e) : !!e);
    }, Ge = Ye.normalize = function(t) {
        return String(t).replace(We, ".").toLowerCase();
    }, Xe = Ye.data = {}, Ve = Ye.NATIVE = "N", Be = Ye.POLYFILL = "P", He = Ye, Ke = Lt, Je = s, $e = S(S.bind), Qe = function(t, e) {
        return Ke(t), void 0 === e ? t : Je ? $e(t, e) : function() {
            return t.apply(e, arguments);
        };
    }, Ze = {}, tr = I && u(function() {
        return 42 !== Object.defineProperty(function() {}, "prototype", {
            value: 42,
            writable: !1
        }).prototype;
    }), er = rt, rr = String, nr = TypeError, or = function(t) {
        if (er(t)) return t;
        throw new nr(rr(t) + " is not an object");
    }, ir = I, ar = Pe, ur = tr, sr = or, cr = Oe, fr = TypeError, lr = Object.defineProperty, hr = Object.getOwnPropertyDescriptor, pr = "enumerable", vr = "configurable", dr = "writable";
    Ze.f = ir ? ur ? function(t, e, r) {
        if (sr(t), e = cr(e), sr(r), "function" == typeof t && "prototype" === e && "value" in r && dr in r && !r[dr]) {
            var n = hr(t, e);
            n && n[dr] && (t[e] = r.value, r = {
                configurable: vr in r ? r[vr] : n[vr],
                enumerable: pr in r ? r[pr] : n[pr],
                writable: !1
            });
        }
        return lr(t, e, r);
    } : lr : function(t, e, r) {
        if (sr(t), e = cr(e), sr(r), ar) try {
            return lr(t, e, r);
        } catch (t) {}
        if ("get" in r || "set" in r) throw new fr("Accessors not supported");
        return "value" in r && (t[e] = r.value), t;
    };
    var yr = Ze, gr = q, mr = I ? function(t, e, r) {
        return yr.f(t, e, gr(1, r));
    } : function(t, e, r) {
        return t[e] = r, t;
    }, br = a, wr = p, _r = S, Tr = A, Er = P.f, Or = He, Sr = nt, xr = Qe, kr = mr, jr = te, Ar = function(t) {
        var e = function(r, n, o) {
            if (this instanceof e) {
                switch(arguments.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(r);
                    case 2:
                        return new t(r, n);
                }
                return new t(r, n, o);
            }
            return wr(t, this, arguments);
        };
        return e.prototype = t.prototype, e;
    }, Pr = function(t, e) {
        var r, n, o, i, a, u, s, c, f, l = t.target, h = t.global, p = t.stat, v = t.proto, d = h ? br : p ? br[l] : (br[l] || {}).prototype, y = h ? Sr : Sr[l] || kr(Sr, l, {})[l], g = y.prototype;
        for(i in e)n = !(r = Or(h ? i : l + (p ? "." : "#") + i, t.forced)) && d && jr(d, i), u = y[i], n && (s = t.dontCallGetSet ? (f = Er(d, i)) && f.value : d[i]), a = n && s ? s : e[i], n && typeof u == typeof a || (c = t.bind && n ? xr(a, br) : t.wrap && n ? Ar(a) : v && Tr(a) ? _r(a) : a, (t.sham || a && a.sham || u && u.sham) && kr(c, "sham", !0), kr(y, i, c), v && (jr(Sr, o = l + "Prototype") || kr(Sr, o, {}), kr(Sr[o], i, a), t.real && g && (r || !g[i]) && kr(g, i, a)));
    }, Ir = Pr, Dr = I, Lr = Ze.f;
    Ir({
        target: "Object",
        stat: !0,
        forced: Object.defineProperty !== Lr,
        sham: !Dr
    }, {
        defineProperty: Lr
    });
    var Cr = nt.Object, Rr = o.exports = function(t, e, r) {
        return Cr.defineProperty(t, e, r);
    };
    Cr.defineProperty.sham && (Rr.sham = !0);
    var Mr = o.exports, Nr = Mr, Fr = n(Nr), zr = T, Ur = Array.isArray || function(t) {
        return "Array" === zr(t);
    }, qr = Math.ceil, Wr = Math.floor, Yr = Math.trunc || function(t) {
        var e = +t;
        return (e > 0 ? Wr : qr)(e);
    }, Gr = function(t) {
        var e = +t;
        return e != e || 0 === e ? 0 : Yr(e);
    }, Xr = Gr, Vr = Math.min, Br = function(t) {
        return t > 0 ? Vr(Xr(t), 9007199254740991) : 0;
    }, Hr = function(t) {
        return Br(t.length);
    }, Kr = TypeError, Jr = function(t) {
        if (t > 9007199254740991) throw Kr("Maximum allowed index exceeded");
        return t;
    }, $r = Oe, Qr = Ze, Zr = q, tn = function(t, e, r) {
        var n = $r(e);
        n in t ? Qr.f(t, n, Zr(0, r)) : t[n] = r;
    }, en = {};
    en[ve("toStringTag")] = "z";
    var rn = "[object z]" === String(en), nn = rn, on = A, an = T, un = ve("toStringTag"), sn = Object, cn = "Arguments" === an(function() {
        return arguments;
    }()), fn = nn ? an : function(t) {
        var e, r, n;
        return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (r = function(t, e) {
            try {
                return t[e];
            } catch (t) {}
        }(e = sn(t), un)) ? r : cn ? an(e) : "Object" === (n = an(e)) && on(e.callee) ? "Arguments" : n;
    }, ln = A, hn = Vt, pn = m(Function.toString);
    ln(hn.inspectSource) || (hn.inspectSource = function(t) {
        return pn(t);
    });
    var vn = hn.inspectSource, dn = m, yn = u, gn = A, mn = fn, bn = vn, wn = function() {}, _n = [], Tn = st("Reflect", "construct"), En = /^\s*(?:class|function)\b/, On = dn(En.exec), Sn = !En.test(wn), xn = function(t) {
        if (!gn(t)) return !1;
        try {
            return Tn(wn, _n, t), !0;
        } catch (t) {
            return !1;
        }
    }, kn = function(t) {
        if (!gn(t)) return !1;
        switch(mn(t)){
            case "AsyncFunction":
            case "GeneratorFunction":
            case "AsyncGeneratorFunction":
                return !1;
        }
        try {
            return Sn || !!On(En, bn(t));
        } catch (t) {
            return !0;
        }
    };
    kn.sham = !0;
    var jn = !Tn || yn(function() {
        var t;
        return xn(xn.call) || !xn(Object) || !xn(function() {
            t = !0;
        }) || t;
    }) ? kn : xn, An = Ur, Pn = jn, In = rt, Dn = ve("species"), Ln = Array, Cn = function(t) {
        var e;
        return An(t) && (e = t.constructor, (Pn(e) && (e === Ln || An(e.prototype)) || In(e) && null === (e = e[Dn])) && (e = void 0)), void 0 === e ? Ln : e;
    }, Rn = function(t, e) {
        return new (Cn(t))(0 === e ? 0 : e);
    }, Mn = u, Nn = gt, Fn = ve("species"), zn = function(t) {
        return Nn >= 51 || !Mn(function() {
            var e = [];
            return (e.constructor = {})[Fn] = function() {
                return {
                    foo: 1
                };
            }, 1 !== e[t](Boolean).foo;
        });
    }, Un = Pr, qn = u, Wn = Ur, Yn = rt, Gn = $t, Xn = Hr, Vn = Jr, Bn = tn, Hn = Rn, Kn = zn, Jn = gt, $n = ve("isConcatSpreadable"), Qn = Jn >= 51 || !qn(function() {
        var t = [];
        return t[$n] = !1, t.concat()[0] !== t;
    }), Zn = function(t) {
        if (!Yn(t)) return !1;
        var e = t[$n];
        return void 0 !== e ? !!e : Wn(t);
    };
    Un({
        target: "Array",
        proto: !0,
        arity: 1,
        forced: !Qn || !Kn("concat")
    }, {
        concat: function(t) {
            var e, r, n, o, i, a = Gn(this), u = Hn(a, 0), s = 0;
            for(e = -1, n = arguments.length; e < n; e++)if (Zn(i = -1 === e ? a : arguments[e])) for(o = Xn(i), Vn(s + o), r = 0; r < o; r++, s++)r in i && Bn(u, s, i[r]);
            else Vn(s + 1), Bn(u, s++, i);
            return u.length = s, u;
        }
    });
    var to = fn, eo = String, ro = function(t) {
        if ("Symbol" === to(t)) throw new TypeError("Cannot convert a Symbol value to a string");
        return eo(t);
    }, no = {}, oo = Gr, io = Math.max, ao = Math.min, uo = function(t, e) {
        var r = oo(t);
        return r < 0 ? io(r + e, 0) : ao(r, e);
    }, so = Z, co = uo, fo = Hr, lo = function(t) {
        return function(e, r, n) {
            var o, i = so(e), a = fo(i), u = co(n, a);
            if (t && r != r) {
                for(; a > u;)if ((o = i[u++]) != o) return !0;
            } else for(; a > u; u++)if ((t || u in i) && i[u] === r) return t || u || 0;
            return !t && -1;
        };
    }, ho = {
        includes: lo(!0),
        indexOf: lo(!1)
    }, po = {}, vo = te, yo = Z, go = ho.indexOf, mo = po, bo = m([].push), wo = function(t, e) {
        var r, n = yo(t), o = 0, i = [];
        for(r in n)!vo(mo, r) && vo(n, r) && bo(i, r);
        for(; e.length > o;)vo(n, r = e[o++]) && (~go(i, r) || bo(i, r));
        return i;
    }, _o = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
    ], To = wo, Eo = _o, Oo = Object.keys || function(t) {
        return To(t, Eo);
    }, So = I, xo = tr, ko = Ze, jo = or, Ao = Z, Po = Oo;
    no.f = So && !xo ? Object.defineProperties : function(t, e) {
        jo(t);
        for(var r, n = Ao(e), o = Po(e), i = o.length, a = 0; i > a;)ko.f(t, r = o[a++], n[r]);
        return t;
    };
    var Io, Do = st("document", "documentElement"), Lo = ie, Co = Ht("keys"), Ro = function(t) {
        return Co[t] || (Co[t] = Lo(t));
    }, Mo = or, No = no, Fo = _o, zo = po, Uo = Do, qo = je, Wo = "prototype", Yo = "script", Go = Ro("IE_PROTO"), Xo = function() {}, Vo = function(t) {
        return "<" + Yo + ">" + t + "</" + Yo + ">";
    }, Bo = function(t) {
        t.write(Vo("")), t.close();
        var e = t.parentWindow.Object;
        return t = null, e;
    }, Ho = function() {
        try {
            Io = new ActiveXObject("htmlfile");
        } catch (t) {}
        var t, e, r;
        Ho = "undefined" != typeof document ? document.domain && Io ? Bo(Io) : (e = qo("iframe"), r = "java" + Yo + ":", e.style.display = "none", Uo.appendChild(e), e.src = String(r), (t = e.contentWindow.document).open(), t.write(Vo("document.F=Object")), t.close(), t.F) : Bo(Io);
        for(var n = Fo.length; n--;)delete Ho[Wo][Fo[n]];
        return Ho();
    };
    zo[Go] = !0;
    var Ko = Object.create || function(t, e) {
        var r;
        return null !== t ? (Xo[Wo] = Mo(t), r = new Xo, Xo[Wo] = null, r[Go] = t) : r = Ho(), void 0 === e ? r : No.f(r, e);
    }, Jo = {}, $o = wo, Qo = _o.concat("length", "prototype");
    Jo.f = Object.getOwnPropertyNames || function(t) {
        return $o(t, Qo);
    };
    var Zo = {}, ti = uo, ei = Hr, ri = tn, ni = Array, oi = Math.max, ii = function(t, e, r) {
        for(var n = ei(t), o = ti(e, n), i = ti(void 0 === r ? n : r, n), a = ni(oi(i - o, 0)), u = 0; o < i; o++, u++)ri(a, u, t[o]);
        return a.length = u, a;
    }, ai = T, ui = Z, si = Jo.f, ci = ii, fi = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    Zo.f = function(t) {
        return fi && "Window" === ai(t) ? function(t) {
            try {
                return si(t);
            } catch (t) {
                return ci(fi);
            }
        }(t) : si(ui(t));
    };
    var li = {};
    li.f = Object.getOwnPropertySymbols;
    var hi = mr, pi = function(t, e, r, n) {
        return n && n.enumerable ? t[e] = r : hi(t, e, r), t;
    }, vi = Ze, di = function(t, e, r) {
        return vi.f(t, e, r);
    }, yi = {}, gi = ve;
    yi.f = gi;
    var mi, bi, wi, _i = nt, Ti = te, Ei = yi, Oi = Ze.f, Si = function(t) {
        var e = _i.Symbol || (_i.Symbol = {});
        Ti(e, t) || Oi(e, t, {
            value: Ei.f(t)
        });
    }, xi = C, ki = st, ji = ve, Ai = pi, Pi = function() {
        var t = ki("Symbol"), e = t && t.prototype, r = e && e.valueOf, n = ji("toPrimitive");
        e && !e[n] && Ai(e, n, function(t) {
            return xi(r, this);
        }, {
            arity: 1
        });
    }, Ii = fn, Di = rn ? ({}).toString : function() {
        return "[object " + Ii(this) + "]";
    }, Li = rn, Ci = Ze.f, Ri = mr, Mi = te, Ni = Di, Fi = ve("toStringTag"), zi = function(t, e, r, n) {
        if (t) {
            var o = r ? t : t.prototype;
            Mi(o, Fi) || Ci(o, Fi, {
                configurable: !0,
                value: e
            }), n && !Li && Ri(o, "toString", Ni);
        }
    }, Ui = A, qi = a.WeakMap, Wi = Ui(qi) && /native code/.test(String(qi)), Yi = a, Gi = rt, Xi = mr, Vi = te, Bi = Vt, Hi = Ro, Ki = po, Ji = "Object already initialized", $i = Yi.TypeError, Qi = Yi.WeakMap;
    if (Wi || Bi.state) {
        var Zi = Bi.state || (Bi.state = new Qi);
        Zi.get = Zi.get, Zi.has = Zi.has, Zi.set = Zi.set, mi = function(t, e) {
            if (Zi.has(t)) throw new $i(Ji);
            return e.facade = t, Zi.set(t, e), e;
        }, bi = function(t) {
            return Zi.get(t) || {};
        }, wi = function(t) {
            return Zi.has(t);
        };
    } else {
        var ta = Hi("state");
        Ki[ta] = !0, mi = function(t, e) {
            if (Vi(t, ta)) throw new $i(Ji);
            return e.facade = t, Xi(t, ta, e), e;
        }, bi = function(t) {
            return Vi(t, ta) ? t[ta] : {};
        }, wi = function(t) {
            return Vi(t, ta);
        };
    }
    var ea = {
        set: mi,
        get: bi,
        has: wi,
        enforce: function(t) {
            return wi(t) ? bi(t) : mi(t, {});
        },
        getterFor: function(t) {
            return function(e) {
                var r;
                if (!Gi(e) || (r = bi(e)).type !== t) throw new $i("Incompatible receiver, " + t + " required");
                return r;
            };
        }
    }, ra = Qe, na = V, oa = $t, ia = Hr, aa = Rn, ua = m([].push), sa = function(t) {
        var e = 1 === t, r = 2 === t, n = 3 === t, o = 4 === t, i = 6 === t, a = 7 === t, u = 5 === t || i;
        return function(s, c, f, l) {
            for(var h, p, v = oa(s), d = na(v), y = ra(c, f), g = ia(d), m = 0, b = l || aa, w = e ? b(s, g) : r || a ? b(s, 0) : void 0; g > m; m++)if ((u || m in d) && (p = y(h = d[m], m, v), t)) {
                if (e) w[m] = p;
                else if (p) switch(t){
                    case 3:
                        return !0;
                    case 5:
                        return h;
                    case 6:
                        return m;
                    case 2:
                        ua(w, h);
                }
                else switch(t){
                    case 4:
                        return !1;
                    case 7:
                        ua(w, h);
                }
            }
            return i ? -1 : n || o ? o : w;
        };
    }, ca = {
        forEach: sa(0),
        map: sa(1),
        filter: sa(2),
        some: sa(3),
        every: sa(4),
        find: sa(5),
        findIndex: sa(6),
        filterReject: sa(7)
    }, fa = Pr, la = a, ha = C, pa = m, va = I, da = _t, ya = u, ga = te, ma = ct, ba = or, wa = Z, _a = Oe, Ta = ro, Ea = q, Oa = Ko, Sa = Oo, xa = Jo, ka = Zo, ja = li, Aa = P, Pa = Ze, Ia = no, Da = R, La = pi, Ca = di, Ra = Ht, Ma = po, Na = ie, Fa = ve, za = yi, Ua = Si, qa = Pi, Wa = zi, Ya = ea, Ga = ca.forEach, Xa = Ro("hidden"), Va = "Symbol", Ba = "prototype", Ha = Ya.set, Ka = Ya.getterFor(Va), Ja = Object[Ba], $a = la.Symbol, Qa = $a && $a[Ba], Za = la.RangeError, tu = la.TypeError, eu = la.QObject, ru = Aa.f, nu = Pa.f, ou = ka.f, iu = Da.f, au = pa([].push), uu = Ra("symbols"), su = Ra("op-symbols"), cu = Ra("wks"), fu = !eu || !eu[Ba] || !eu[Ba].findChild, lu = function(t, e, r) {
        var n = ru(Ja, e);
        n && delete Ja[e], nu(t, e, r), n && t !== Ja && nu(Ja, e, n);
    }, hu = va && ya(function() {
        return 7 !== Oa(nu({}, "a", {
            get: function() {
                return nu(this, "a", {
                    value: 7
                }).a;
            }
        })).a;
    }) ? lu : nu, pu = function(t, e) {
        var r = uu[t] = Oa(Qa);
        return Ha(r, {
            type: Va,
            tag: t,
            description: e
        }), va || (r.description = e), r;
    }, vu = function(t, e, r) {
        t === Ja && vu(su, e, r), ba(t);
        var n = _a(e);
        return ba(r), ga(uu, n) ? (r.enumerable ? (ga(t, Xa) && t[Xa][n] && (t[Xa][n] = !1), r = Oa(r, {
            enumerable: Ea(0, !1)
        })) : (ga(t, Xa) || nu(t, Xa, Ea(1, {})), t[Xa][n] = !0), hu(t, n, r)) : nu(t, n, r);
    }, du = function(t, e) {
        ba(t);
        var r = wa(e), n = Sa(r).concat(bu(r));
        return Ga(n, function(e) {
            va && !ha(yu, r, e) || vu(t, e, r[e]);
        }), t;
    }, yu = function(t) {
        var e = _a(t), r = ha(iu, this, e);
        return !(this === Ja && ga(uu, e) && !ga(su, e)) && (!(r || !ga(this, e) || !ga(uu, e) || ga(this, Xa) && this[Xa][e]) || r);
    }, gu = function(t, e) {
        var r = wa(t), n = _a(e);
        if (r !== Ja || !ga(uu, n) || ga(su, n)) {
            var o = ru(r, n);
            return !o || !ga(uu, n) || ga(r, Xa) && r[Xa][n] || (o.enumerable = !0), o;
        }
    }, mu = function(t) {
        var e = ou(wa(t)), r = [];
        return Ga(e, function(t) {
            ga(uu, t) || ga(Ma, t) || au(r, t);
        }), r;
    }, bu = function(t) {
        var e = t === Ja, r = ou(e ? su : wa(t)), n = [];
        return Ga(r, function(t) {
            !ga(uu, t) || e && !ga(Ja, t) || au(n, uu[t]);
        }), n;
    };
    da || ($a = function() {
        if (ma(Qa, this)) throw new tu("Symbol is not a constructor");
        var t = arguments.length && void 0 !== arguments[0] ? Ta(arguments[0]) : void 0, e = Na(t), r = function(t) {
            var n = void 0 === this ? la : this;
            n === Ja && ha(r, su, t), ga(n, Xa) && ga(n[Xa], e) && (n[Xa][e] = !1);
            var o = Ea(1, t);
            try {
                hu(n, e, o);
            } catch (t) {
                if (!(t instanceof Za)) throw t;
                lu(n, e, o);
            }
        };
        return va && fu && hu(Ja, e, {
            configurable: !0,
            set: r
        }), pu(e, t);
    }, La(Qa = $a[Ba], "toString", function() {
        return Ka(this).tag;
    }), La($a, "withoutSetter", function(t) {
        return pu(Na(t), t);
    }), Da.f = yu, Pa.f = vu, Ia.f = du, Aa.f = gu, xa.f = ka.f = mu, ja.f = bu, za.f = function(t) {
        return pu(Fa(t), t);
    }, va && Ca(Qa, "description", {
        configurable: !0,
        get: function() {
            return Ka(this).description;
        }
    })), fa({
        global: !0,
        constructor: !0,
        wrap: !0,
        forced: !da,
        sham: !da
    }, {
        Symbol: $a
    }), Ga(Sa(cu), function(t) {
        Ua(t);
    }), fa({
        target: Va,
        stat: !0,
        forced: !da
    }, {
        useSetter: function() {
            fu = !0;
        },
        useSimple: function() {
            fu = !1;
        }
    }), fa({
        target: "Object",
        stat: !0,
        forced: !da,
        sham: !va
    }, {
        create: function(t, e) {
            return void 0 === e ? Oa(t) : du(Oa(t), e);
        },
        defineProperty: vu,
        defineProperties: du,
        getOwnPropertyDescriptor: gu
    }), fa({
        target: "Object",
        stat: !0,
        forced: !da
    }, {
        getOwnPropertyNames: mu
    }), qa(), Wa($a, Va), Ma[Xa] = !0;
    var wu = _t && !!Symbol.for && !!Symbol.keyFor, _u = Pr, Tu = st, Eu = te, Ou = ro, Su = Ht, xu = wu, ku = Su("string-to-symbol-registry"), ju = Su("symbol-to-string-registry");
    _u({
        target: "Symbol",
        stat: !0,
        forced: !xu
    }, {
        for: function(t) {
            var e = Ou(t);
            if (Eu(ku, e)) return ku[e];
            var r = Tu("Symbol")(e);
            return ku[e] = r, ju[r] = e, r;
        }
    });
    var Au = Pr, Pu = te, Iu = kt, Du = At, Lu = wu, Cu = Ht("symbol-to-string-registry");
    Au({
        target: "Symbol",
        stat: !0,
        forced: !Lu
    }, {
        keyFor: function(t) {
            if (!Iu(t)) throw new TypeError(Du(t) + " is not a symbol");
            if (Pu(Cu, t)) return Cu[t];
        }
    });
    var Ru = m([].slice), Mu = Ur, Nu = A, Fu = T, zu = ro, Uu = m([].push), qu = Pr, Wu = st, Yu = p, Gu = C, Xu = m, Vu = u, Bu = A, Hu = kt, Ku = Ru, Ju = function(t) {
        if (Nu(t)) return t;
        if (Mu(t)) {
            for(var e = t.length, r = [], n = 0; n < e; n++){
                var o = t[n];
                "string" == typeof o ? Uu(r, o) : "number" != typeof o && "Number" !== Fu(o) && "String" !== Fu(o) || Uu(r, zu(o));
            }
            var i = r.length, a = !0;
            return function(t, e) {
                if (a) return a = !1, e;
                if (Mu(this)) return e;
                for(var n = 0; n < i; n++)if (r[n] === t) return e;
            };
        }
    }, $u = _t, Qu = String, Zu = Wu("JSON", "stringify"), ts = Xu(/./.exec), es = Xu("".charAt), rs = Xu("".charCodeAt), ns = Xu("".replace), os = Xu(1..toString), is = /[\uD800-\uDFFF]/g, as = /^[\uD800-\uDBFF]$/, us = /^[\uDC00-\uDFFF]$/, ss = !$u || Vu(function() {
        var t = Wu("Symbol")("stringify detection");
        return "[null]" !== Zu([
            t
        ]) || "{}" !== Zu({
            a: t
        }) || "{}" !== Zu(Object(t));
    }), cs = Vu(function() {
        return '"\udf06\ud834"' !== Zu("\udf06\ud834") || '"\udead"' !== Zu("\udead");
    }), fs = function(t, e) {
        var r = Ku(arguments), n = Ju(e);
        if (Bu(n) || void 0 !== t && !Hu(t)) return r[1] = function(t, e) {
            if (Bu(n) && (e = Gu(n, this, Qu(t), e)), !Hu(e)) return e;
        }, Yu(Zu, null, r);
    }, ls = function(t, e, r) {
        var n = es(r, e - 1), o = es(r, e + 1);
        return ts(as, t) && !ts(us, o) || ts(us, t) && !ts(as, n) ? "\\u" + os(rs(t, 0), 16) : t;
    };
    Zu && qu({
        target: "JSON",
        stat: !0,
        arity: 3,
        forced: ss || cs
    }, {
        stringify: function(t, e, r) {
            var n = Ku(arguments), o = Yu(ss ? fs : Zu, null, n);
            return cs && "string" == typeof o ? ns(o, is, ls) : o;
        }
    });
    var hs = li, ps = $t;
    Pr({
        target: "Object",
        stat: !0,
        forced: !_t || u(function() {
            hs.f(1);
        })
    }, {
        getOwnPropertySymbols: function(t) {
            var e = hs.f;
            return e ? e(ps(t)) : [];
        }
    }), Si("asyncIterator"), Si("hasInstance"), Si("isConcatSpreadable"), Si("iterator"), Si("match"), Si("matchAll"), Si("replace"), Si("search"), Si("species"), Si("split");
    var vs = Pi;
    Si("toPrimitive"), vs();
    var ds = st, ys = zi;
    Si("toStringTag"), ys(ds("Symbol"), "Symbol"), Si("unscopables"), zi(a.JSON, "JSON", !0);
    var gs, ms, bs, ws = nt.Symbol, _s = {}, Ts = I, Es = te, Os = Function.prototype, Ss = Ts && Object.getOwnPropertyDescriptor, xs = Es(Os, "name"), ks = {
        EXISTS: xs,
        PROPER: xs && "something" === (function() {}).name,
        CONFIGURABLE: xs && (!Ts || Ts && Ss(Os, "name").configurable)
    }, js = !u(function() {
        function t() {}
        return t.prototype.constructor = null, Object.getPrototypeOf(new t) !== t.prototype;
    }), As = te, Ps = A, Is = $t, Ds = js, Ls = Ro("IE_PROTO"), Cs = Object, Rs = Cs.prototype, Ms = Ds ? Cs.getPrototypeOf : function(t) {
        var e = Is(t);
        if (As(e, Ls)) return e[Ls];
        var r = e.constructor;
        return Ps(r) && e instanceof r ? r.prototype : e instanceof Cs ? Rs : null;
    }, Ns = u, Fs = A, zs = rt, Us = Ko, qs = Ms, Ws = pi, Ys = ve("iterator"), Gs = !1;
    [].keys && ("next" in (bs = [].keys()) ? (ms = qs(qs(bs))) !== Object.prototype && (gs = ms) : Gs = !0);
    var Xs = !zs(gs) || Ns(function() {
        var t = {};
        return gs[Ys].call(t) !== t;
    });
    Fs((gs = Xs ? {} : Us(gs))[Ys]) || Ws(gs, Ys, function() {
        return this;
    });
    var Vs = {
        IteratorPrototype: gs,
        BUGGY_SAFARI_ITERATORS: Gs
    }, Bs = Vs.IteratorPrototype, Hs = Ko, Ks = q, Js = zi, $s = _s, Qs = function() {
        return this;
    }, Zs = m, tc = Lt, ec = A, rc = String, nc = TypeError, oc = function(t, e, r) {
        try {
            return Zs(tc(Object.getOwnPropertyDescriptor(t, e)[r]));
        } catch (t) {}
    }, ic = or, ac = function(t) {
        if ("object" == typeof t || ec(t)) return t;
        throw new nc("Can't set " + rc(t) + " as a prototype");
    }, uc = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var t, e = !1, r = {};
        try {
            (t = oc(Object.prototype, "__proto__", "set"))(r, []), e = r instanceof Array;
        } catch (t) {}
        return function(r, n) {
            return ic(r), ac(n), e ? t(r, n) : r.__proto__ = n, r;
        };
    }() : void 0), sc = Pr, cc = C, fc = ks, lc = function(t, e, r, n) {
        var o = e + " Iterator";
        return t.prototype = Hs(Bs, {
            next: Ks(+!n, r)
        }), Js(t, o, !1, !0), $s[o] = Qs, t;
    }, hc = Ms, pc = zi, vc = pi, dc = _s, yc = Vs, gc = fc.PROPER, mc = yc.BUGGY_SAFARI_ITERATORS, bc = ve("iterator"), wc = "keys", _c = "values", Tc = "entries", Ec = function() {
        return this;
    }, Oc = function(t, e, r, n, o, i, a) {
        lc(r, e, n);
        var u, s, c, f = function(t) {
            if (t === o && d) return d;
            if (!mc && t && t in p) return p[t];
            switch(t){
                case wc:
                case _c:
                case Tc:
                    return function() {
                        return new r(this, t);
                    };
            }
            return function() {
                return new r(this);
            };
        }, l = e + " Iterator", h = !1, p = t.prototype, v = p[bc] || p["@@iterator"] || o && p[o], d = !mc && v || f(o), y = "Array" === e && p.entries || v;
        if (y && (u = hc(y.call(new t))) !== Object.prototype && u.next && (pc(u, l, !0, !0), dc[l] = Ec), gc && o === _c && v && v.name !== _c && (h = !0, d = function() {
            return cc(v, this);
        }), o) {
            if (s = {
                values: f(_c),
                keys: i ? d : f(wc),
                entries: f(Tc)
            }, a) for(c in s)(mc || h || !(c in p)) && vc(p, c, s[c]);
            else sc({
                target: e,
                proto: !0,
                forced: mc || h
            }, s);
        }
        return a && p[bc] !== d && vc(p, bc, d, {
            name: o
        }), dc[e] = d, s;
    }, Sc = function(t, e) {
        return {
            value: t,
            done: e
        };
    }, xc = Z, kc = _s, jc = ea;
    Ze.f;
    var Ac = Oc, Pc = Sc, Ic = "Array Iterator", Dc = jc.set, Lc = jc.getterFor(Ic);
    Ac(Array, "Array", function(t, e) {
        Dc(this, {
            type: Ic,
            target: xc(t),
            index: 0,
            kind: e
        });
    }, function() {
        var t = Lc(this), e = t.target, r = t.index++;
        if (!e || r >= e.length) return t.target = void 0, Pc(void 0, !0);
        switch(t.kind){
            case "keys":
                return Pc(r, !1);
            case "values":
                return Pc(e[r], !1);
        }
        return Pc([
            r,
            e[r]
        ], !1);
    }, "values"), kc.Arguments = kc.Array;
    var Cc = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    }, Rc = a, Mc = fn, Nc = mr, Fc = _s, zc = ve("toStringTag");
    for(var Uc in Cc){
        var qc = Rc[Uc], Wc = qc && qc.prototype;
        Wc && Mc(Wc) !== zc && Nc(Wc, zc, Uc), Fc[Uc] = Fc.Array;
    }
    var Yc = ws, Gc = ve, Xc = Ze.f, Vc = Gc("metadata"), Bc = Function.prototype;
    void 0 === Bc[Vc] && Xc(Bc, Vc, {
        value: null
    }), Si("asyncDispose"), Si("dispose"), Si("metadata");
    var Hc = Yc, Kc = m, Jc = st("Symbol"), $c = Jc.keyFor, Qc = Kc(Jc.prototype.valueOf), Zc = Jc.isRegisteredSymbol || function(t) {
        try {
            return void 0 !== $c(Qc(t));
        } catch (t) {
            return !1;
        }
    };
    Pr({
        target: "Symbol",
        stat: !0
    }, {
        isRegisteredSymbol: Zc
    });
    for(var tf = Ht, ef = st, rf = m, nf = kt, of = ve, af = ef("Symbol"), uf = af.isWellKnownSymbol, sf = ef("Object", "getOwnPropertyNames"), cf = rf(af.prototype.valueOf), ff = tf("wks"), lf = 0, hf = sf(af), pf = hf.length; lf < pf; lf++)try {
        var vf = hf[lf];
        nf(af[vf]) && of(vf);
    } catch (t) {}
    var df = function(t) {
        if (uf && uf(t)) return !0;
        try {
            for(var e = cf(t), r = 0, n = sf(ff), o = n.length; r < o; r++)if (ff[n[r]] == e) return !0;
        } catch (t) {}
        return !1;
    };
    Pr({
        target: "Symbol",
        stat: !0,
        forced: !0
    }, {
        isWellKnownSymbol: df
    }), Si("matcher"), Si("observable"), Pr({
        target: "Symbol",
        stat: !0,
        name: "isRegisteredSymbol"
    }, {
        isRegistered: Zc
    }), Pr({
        target: "Symbol",
        stat: !0,
        name: "isWellKnownSymbol",
        forced: !0
    }, {
        isWellKnown: df
    }), Si("metadataKey"), Si("patternMatch"), Si("replaceAll");
    var yf = Hc, gf = n(yf), mf = m, bf = Gr, wf = ro, _f = J, Tf = mf("".charAt), Ef = mf("".charCodeAt), Of = mf("".slice), Sf = function(t) {
        return function(e, r) {
            var n, o, i = wf(_f(e)), a = bf(r), u = i.length;
            return a < 0 || a >= u ? t ? "" : void 0 : (n = Ef(i, a)) < 55296 || n > 56319 || a + 1 === u || (o = Ef(i, a + 1)) < 56320 || o > 57343 ? t ? Tf(i, a) : n : t ? Of(i, a, a + 2) : o - 56320 + (n - 55296 << 10) + 65536;
        };
    }, xf = {
        codeAt: Sf(!1),
        charAt: Sf(!0)
    }.charAt, kf = ro, jf = ea, Af = Oc, Pf = Sc, If = "String Iterator", Df = jf.set, Lf = jf.getterFor(If);
    Af(String, "String", function(t) {
        Df(this, {
            type: If,
            string: kf(t),
            index: 0
        });
    }, function() {
        var t, e = Lf(this), r = e.string, n = e.index;
        return n >= r.length ? Pf(void 0, !0) : (t = xf(r, n), e.index += t.length, Pf(t, !1));
    });
    var Cf = yi.f("iterator"), Rf = Cf, Mf = n(Rf);
    function Nf(t) {
        return Nf = "function" == typeof gf && "symbol" == typeof Mf ? function(t) {
            return typeof t;
        } : function(t) {
            return t && "function" == typeof gf && t.constructor === gf && t !== gf.prototype ? "symbol" : typeof t;
        }, Nf(t);
    }
    var Ff = n(yi.f("toPrimitive"));
    function zf(t) {
        var e = function(t, e) {
            if ("object" !== Nf(t) || null === t) return t;
            var r = t[Ff];
            if (void 0 !== r) {
                var n = r.call(t, e || "default");
                if ("object" !== Nf(n)) return n;
                throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return ("string" === e ? String : Number)(t);
        }(t, "string");
        return "symbol" === Nf(e) ? e : String(e);
    }
    function Uf(t, e) {
        for(var r = 0; r < e.length; r++){
            var n = e[r];
            n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Fr(t, zf(n.key), n);
        }
    }
    function qf(t, e, r) {
        return e && Uf(t.prototype, e), r && Uf(t, r), Fr(t, "prototype", {
            writable: !1
        }), t;
    }
    function Wf(t, e, r) {
        return (e = zf(e)) in t ? Fr(t, e, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = r, t;
    }
    var Yf = m, Gf = Lt, Xf = rt, Vf = te, Bf = Ru, Hf = s, Kf = Function, Jf = Yf([].concat), $f = Yf([].join), Qf = {}, Zf = Hf ? Kf.bind : function(t) {
        var e = Gf(this), r = e.prototype, n = Bf(arguments, 1), o = function() {
            var r = Jf(n, Bf(arguments));
            return this instanceof o ? function(t, e, r) {
                if (!Vf(Qf, e)) {
                    for(var n = [], o = 0; o < e; o++)n[o] = "a[" + o + "]";
                    Qf[e] = Kf("C,a", "return new C(" + $f(n, ",") + ")");
                }
                return Qf[e](t, r);
            }(e, r.length, r) : e.apply(t, r);
        };
        return Xf(r) && (o.prototype = r), o;
    }, tl = Zf;
    Pr({
        target: "Function",
        proto: !0,
        forced: Function.bind !== tl
    }, {
        bind: tl
    });
    var el = a, rl = nt, nl = function(t, e) {
        var r = rl[t + "Prototype"], n = r && r[e];
        if (n) return n;
        var o = el[t], i = o && o.prototype;
        return i && i[e];
    }, ol = nl("Function", "bind"), il = ct, al = ol, ul = Function.prototype, sl = function(t) {
        var e = t.bind;
        return t === ul || il(ul, t) && e === ul.bind ? al : e;
    }, cl = n(sl), fl = Lt, ll = $t, hl = V, pl = Hr, vl = TypeError, dl = function(t) {
        return function(e, r, n, o) {
            fl(r);
            var i = ll(e), a = hl(i), u = pl(i), s = t ? u - 1 : 0, c = t ? -1 : 1;
            if (n < 2) for(;;){
                if (s in a) {
                    o = a[s], s += c;
                    break;
                }
                if (s += c, t ? s < 0 : u <= s) throw new vl("Reduce of empty array with no initial value");
            }
            for(; t ? s >= 0 : u > s; s += c)s in a && (o = r(o, a[s], s, i));
            return o;
        };
    }, yl = {
        left: dl(!1),
        right: dl(!0)
    }, gl = u, ml = function(t, e) {
        var r = [][t];
        return !!r && gl(function() {
            r.call(null, e || function() {
                return 1;
            }, 1);
        });
    }, bl = "process" === T(a.process), wl = yl.left;
    Pr({
        target: "Array",
        proto: !0,
        forced: !bl && gt > 79 && gt < 83 || !ml("reduce")
    }, {
        reduce: function(t) {
            var e = arguments.length;
            return wl(this, t, e, e > 1 ? arguments[1] : void 0);
        }
    });
    var _l = nl("Array", "reduce"), Tl = ct, El = _l, Ol = Array.prototype, Sl = n(function(t) {
        var e = t.reduce;
        return t === Ol || Tl(Ol, t) && e === Ol.reduce ? El : e;
    }), xl = ca.filter;
    Pr({
        target: "Array",
        proto: !0,
        forced: !zn("filter")
    }, {
        filter: function(t) {
            return xl(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var kl = nl("Array", "filter"), jl = ct, Al = kl, Pl = Array.prototype, Il = n(function(t) {
        var e = t.filter;
        return t === Pl || jl(Pl, t) && e === Pl.filter ? Al : e;
    }), Dl = ca.map;
    Pr({
        target: "Array",
        proto: !0,
        forced: !zn("map")
    }, {
        map: function(t) {
            return Dl(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Ll = nl("Array", "map"), Cl = ct, Rl = Ll, Ml = Array.prototype, Nl = n(function(t) {
        var e = t.map;
        return t === Ml || Cl(Ml, t) && e === Ml.map ? Rl : e;
    }), Fl = Ur, zl = Hr, Ul = Jr, ql = Qe, Wl = function(t, e, r, n, o, i, a, u) {
        for(var s, c, f = o, l = 0, h = !!a && ql(a, u); l < n;)l in r && (s = h ? h(r[l], l, e) : r[l], i > 0 && Fl(s) ? (c = zl(s), f = Wl(t, e, s, c, f, i - 1) - 1) : (Ul(f + 1), t[f] = s), f++), l++;
        return f;
    }, Yl = Wl, Gl = Lt, Xl = $t, Vl = Hr, Bl = Rn;
    Pr({
        target: "Array",
        proto: !0
    }, {
        flatMap: function(t) {
            var e, r = Xl(this), n = Vl(r);
            return Gl(t), (e = Bl(r, 0)).length = Yl(e, r, r, n, 0, 1, t, arguments.length > 1 ? arguments[1] : void 0), e;
        }
    });
    var Hl = nl("Array", "flatMap"), Kl = ct, Jl = Hl, $l = Array.prototype, Ql = n(function(t) {
        var e = t.flatMap;
        return t === $l || Kl($l, t) && e === $l.flatMap ? Jl : e;
    });
    var Zl = function() {
        function t(r, n, o) {
            var i, a, u;
            e(this, t), Wf(this, "_listeners", {
                add: cl(i = this._add).call(i, this),
                remove: cl(a = this._remove).call(a, this),
                update: cl(u = this._update).call(u, this)
            }), this._source = r, this._transformers = n, this._target = o;
        }
        return qf(t, [
            {
                key: "all",
                value: function() {
                    return this._target.update(this._transformItems(this._source.get())), this;
                }
            },
            {
                key: "start",
                value: function() {
                    return this._source.on("add", this._listeners.add), this._source.on("remove", this._listeners.remove), this._source.on("update", this._listeners.update), this;
                }
            },
            {
                key: "stop",
                value: function() {
                    return this._source.off("add", this._listeners.add), this._source.off("remove", this._listeners.remove), this._source.off("update", this._listeners.update), this;
                }
            },
            {
                key: "_transformItems",
                value: function(t) {
                    var e;
                    return Sl(e = this._transformers).call(e, function(t, e) {
                        return e(t);
                    }, t);
                }
            },
            {
                key: "_add",
                value: function(t, e) {
                    null != e && this._target.add(this._transformItems(this._source.get(e.items)));
                }
            },
            {
                key: "_update",
                value: function(t, e) {
                    null != e && this._target.update(this._transformItems(this._source.get(e.items)));
                }
            },
            {
                key: "_remove",
                value: function(t, e) {
                    null != e && this._target.remove(this._transformItems(e.oldData));
                }
            }
        ]), t;
    }(), th = function() {
        function t(r) {
            e(this, t), Wf(this, "_transformers", []), this._source = r;
        }
        return qf(t, [
            {
                key: "filter",
                value: function(t) {
                    return this._transformers.push(function(e) {
                        return Il(e).call(e, t);
                    }), this;
                }
            },
            {
                key: "map",
                value: function(t) {
                    return this._transformers.push(function(e) {
                        return Nl(e).call(e, t);
                    }), this;
                }
            },
            {
                key: "flatMap",
                value: function(t) {
                    return this._transformers.push(function(e) {
                        return Ql(e).call(e, t);
                    }), this;
                }
            },
            {
                key: "to",
                value: function(t) {
                    return new Zl(this._source, this._transformers, t);
                }
            }
        ]), t;
    }(), eh = C, rh = or, nh = Mt, oh = function(t, e, r) {
        var n, o;
        rh(t);
        try {
            if (!(n = nh(t, "return"))) {
                if ("throw" === e) throw r;
                return r;
            }
            n = eh(n, t);
        } catch (t) {
            o = !0, n = t;
        }
        if ("throw" === e) throw r;
        if (o) throw n;
        return rh(n), r;
    }, ih = or, ah = oh, uh = _s, sh = ve("iterator"), ch = Array.prototype, fh = function(t) {
        return void 0 !== t && (uh.Array === t || ch[sh] === t);
    }, lh = fn, hh = Mt, ph = B, vh = _s, dh = ve("iterator"), yh = function(t) {
        if (!ph(t)) return hh(t, dh) || hh(t, "@@iterator") || vh[lh(t)];
    }, gh = C, mh = Lt, bh = or, wh = At, _h = yh, Th = TypeError, Eh = function(t, e) {
        var r = arguments.length < 2 ? _h(t) : e;
        if (mh(r)) return bh(gh(r, t));
        throw new Th(wh(t) + " is not iterable");
    }, Oh = Qe, Sh = C, xh = $t, kh = function(t, e, r, n) {
        try {
            return n ? e(ih(r)[0], r[1]) : e(r);
        } catch (e) {
            ah(t, "throw", e);
        }
    }, jh = fh, Ah = jn, Ph = Hr, Ih = tn, Dh = Eh, Lh = yh, Ch = Array, Rh = ve("iterator"), Mh = !1;
    try {
        var Nh = 0, Fh = {
            next: function() {
                return {
                    done: !!Nh++
                };
            },
            return: function() {
                Mh = !0;
            }
        };
        Fh[Rh] = function() {
            return this;
        }, Array.from(Fh, function() {
            throw 2;
        });
    } catch (t) {}
    var zh = function(t, e) {
        try {
            if (!e && !Mh) return !1;
        } catch (t) {
            return !1;
        }
        var r = !1;
        try {
            var n = {};
            n[Rh] = function() {
                return {
                    next: function() {
                        return {
                            done: r = !0
                        };
                    }
                };
            }, t(n);
        } catch (t) {}
        return r;
    }, Uh = function(t) {
        var e = xh(t), r = Ah(this), n = arguments.length, o = n > 1 ? arguments[1] : void 0, i = void 0 !== o;
        i && (o = Oh(o, n > 2 ? arguments[2] : void 0));
        var a, u, s, c, f, l, h = Lh(e), p = 0;
        if (!h || this === Ch && jh(h)) for(a = Ph(e), u = r ? new this(a) : Ch(a); a > p; p++)l = i ? o(e[p], p) : e[p], Ih(u, p, l);
        else for(f = (c = Dh(e, h)).next, u = r ? new this : []; !(s = Sh(f, c)).done; p++)l = i ? kh(c, o, [
            s.value,
            p
        ], !0) : s.value, Ih(u, p, l);
        return u.length = p, u;
    };
    Pr({
        target: "Array",
        stat: !0,
        forced: !zh(function(t) {
            Array.from(t);
        })
    }, {
        from: Uh
    });
    var qh = nt.Array.from, Wh = n(qh), Yh = yh, Gh = n(Yh), Xh = n(Yh);
    Pr({
        target: "Array",
        stat: !0
    }, {
        isArray: Ur
    });
    var Vh = nt.Array.isArray, Bh = n(Vh);
    var Hh = I, Kh = Ur, Jh = TypeError, $h = Object.getOwnPropertyDescriptor, Qh = Hh && !function() {
        if (void 0 !== this) return !0;
        try {
            Object.defineProperty([], "length", {
                writable: !1
            }).length = 1;
        } catch (t) {
            return t instanceof TypeError;
        }
    }() ? function(t, e) {
        if (Kh(t) && !$h(t, "length").writable) throw new Jh("Cannot set read only .length");
        return t.length = e;
    } : function(t, e) {
        return t.length = e;
    }, Zh = $t, tp = Hr, ep = Qh, rp = Jr;
    Pr({
        target: "Array",
        proto: !0,
        arity: 1,
        forced: u(function() {
            return 4294967297 !== [].push.call({
                length: 4294967296
            }, 1);
        }) || !function() {
            try {
                Object.defineProperty([], "length", {
                    writable: !1
                }).push();
            } catch (t) {
                return t instanceof TypeError;
            }
        }()
    }, {
        push: function(t) {
            var e = Zh(this), r = tp(e), n = arguments.length;
            rp(r + n);
            for(var o = 0; o < n; o++)e[r] = arguments[o], r++;
            return ep(e, r), r;
        }
    });
    var np = nl("Array", "push"), op = ct, ip = np, ap = Array.prototype, up = function(t) {
        var e = t.push;
        return t === ap || op(ap, t) && e === ap.push ? ip : e;
    }, sp = n(up);
    var cp = Pr, fp = Ur, lp = jn, hp = rt, pp = uo, vp = Hr, dp = Z, yp = tn, gp = ve, mp = Ru, bp = zn("slice"), wp = gp("species"), _p = Array, Tp = Math.max;
    cp({
        target: "Array",
        proto: !0,
        forced: !bp
    }, {
        slice: function(t, e) {
            var r, n, o, i = dp(this), a = vp(i), u = pp(t, a), s = pp(void 0 === e ? a : e, a);
            if (fp(i) && (r = i.constructor, (lp(r) && (r === _p || fp(r.prototype)) || hp(r) && null === (r = r[wp])) && (r = void 0), r === _p || void 0 === r)) return mp(i, u, s);
            for(n = new (void 0 === r ? _p : r)(Tp(s - u, 0)), o = 0; u < s; u++, o++)u in i && yp(n, o, i[u]);
            return n.length = o, n;
        }
    });
    var Ep = nl("Array", "slice"), Op = ct, Sp = Ep, xp = Array.prototype, kp = function(t) {
        var e = t.slice;
        return t === xp || Op(xp, t) && e === xp.slice ? Sp : e;
    }, jp = kp, Ap = n(jp), Pp = n(qh);
    function Ip(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    function Dp(t, e) {
        var r;
        if (t) {
            if ("string" == typeof t) return Ip(t, e);
            var n = Ap(r = Object.prototype.toString.call(t)).call(r, 8, -1);
            return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Pp(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? Ip(t, e) : void 0;
        }
    }
    function Lp(t, e) {
        return function(t) {
            if (Bh(t)) return t;
        }(t) || function(t, e) {
            var r = null == t ? null : void 0 !== gf && Gh(t) || t["@@iterator"];
            if (null != r) {
                var n, o, i, a, u = [], s = !0, c = !1;
                try {
                    if (i = (r = r.call(t)).next, 0 === e) {
                        if (Object(r) !== r) return;
                        s = !1;
                    } else for(; !(s = (n = i.call(r)).done) && (sp(u).call(u, n.value), u.length !== e); s = !0);
                } catch (t) {
                    c = !0, o = t;
                } finally{
                    try {
                        if (!s && null != r.return && (a = r.return(), Object(a) !== a)) return;
                    } finally{
                        if (c) throw o;
                    }
                }
                return u;
            }
        }(t, e) || Dp(t, e) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
    }
    function Cp(t) {
        return function(t) {
            if (Bh(t)) return Ip(t);
        }(t) || function(t) {
            if (void 0 !== gf && null != Gh(t) || null != t["@@iterator"]) return Pp(t);
        }(t) || Dp(t) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
    }
    var Rp = n(Yc), Mp = nl("Array", "concat"), Np = ct, Fp = Mp, zp = Array.prototype, Up = n(function(t) {
        var e = t.concat;
        return t === zp || Np(zp, t) && e === zp.concat ? Fp : e;
    }), qp = n(kp), Wp = st, Yp = Jo, Gp = li, Xp = or, Vp = m([].concat), Bp = Wp("Reflect", "ownKeys") || function(t) {
        var e = Yp.f(Xp(t)), r = Gp.f;
        return r ? Vp(e, r(t)) : e;
    };
    Pr({
        target: "Reflect",
        stat: !0
    }, {
        ownKeys: Bp
    });
    var Hp = n(nt.Reflect.ownKeys), Kp = n(Vh), Jp = $t, $p = Oo;
    Pr({
        target: "Object",
        stat: !0,
        forced: u(function() {
            $p(1);
        })
    }, {
        keys: function(t) {
            return $p(Jp(t));
        }
    });
    var Qp = n(nt.Object.keys), Zp = ca.forEach, tv = ml("forEach") ? [].forEach : function(t) {
        return Zp(this, t, arguments.length > 1 ? arguments[1] : void 0);
    };
    Pr({
        target: "Array",
        proto: !0,
        forced: [].forEach !== tv
    }, {
        forEach: tv
    });
    var ev = nl("Array", "forEach"), rv = fn, nv = te, ov = ct, iv = ev, av = Array.prototype, uv = {
        DOMTokenList: !0,
        NodeList: !0
    }, sv = function(t) {
        var e = t.forEach;
        return t === av || ov(av, t) && e === av.forEach || nv(uv, rv(t)) ? iv : e;
    }, cv = n(sv), fv = Pr, lv = Ur, hv = m([].reverse), pv = [
        1,
        2
    ];
    fv({
        target: "Array",
        proto: !0,
        forced: String(pv) === String(pv.reverse())
    }, {
        reverse: function() {
            return lv(this) && (this.length = this.length), hv(this);
        }
    });
    var vv = nl("Array", "reverse"), dv = ct, yv = vv, gv = Array.prototype, mv = function(t) {
        var e = t.reverse;
        return t === gv || dv(gv, t) && e === gv.reverse ? yv : e;
    }, bv = n(mv), wv = At, _v = TypeError, Tv = function(t, e) {
        if (!delete t[e]) throw new _v("Cannot delete property " + wv(e) + " of " + wv(t));
    }, Ev = Pr, Ov = $t, Sv = uo, xv = Gr, kv = Hr, jv = Qh, Av = Jr, Pv = Rn, Iv = tn, Dv = Tv, Lv = zn("splice"), Cv = Math.max, Rv = Math.min;
    Ev({
        target: "Array",
        proto: !0,
        forced: !Lv
    }, {
        splice: function(t, e) {
            var r, n, o, i, a, u, s = Ov(this), c = kv(s), f = Sv(t, c), l = arguments.length;
            for(0 === l ? r = n = 0 : 1 === l ? (r = 0, n = c - f) : (r = l - 2, n = Rv(Cv(xv(e), 0), c - f)), Av(c + r - n), o = Pv(s, n), i = 0; i < n; i++)(a = f + i) in s && Iv(o, i, s[a]);
            if (o.length = n, r < n) {
                for(i = f; i < c - n; i++)u = i + r, (a = i + n) in s ? s[u] = s[a] : Dv(s, u);
                for(i = c; i > c - n + r; i--)Dv(s, i - 1);
            } else if (r > n) for(i = c - n; i > f; i--)u = i + r - 1, (a = i + n - 1) in s ? s[u] = s[a] : Dv(s, u);
            for(i = 0; i < r; i++)s[i + f] = arguments[i + 2];
            return jv(s, c - n + r), o;
        }
    });
    var Mv = nl("Array", "splice"), Nv = ct, Fv = Mv, zv = Array.prototype, Uv = n(function(t) {
        var e = t.splice;
        return t === zv || Nv(zv, t) && e === zv.splice ? Fv : e;
    }), qv = I, Wv = m, Yv = C, Gv = u, Xv = Oo, Vv = li, Bv = R, Hv = $t, Kv = V, Jv = Object.assign, $v = Object.defineProperty, Qv = Wv([].concat), Zv = !Jv || Gv(function() {
        if (qv && 1 !== Jv({
            b: 1
        }, Jv($v({}, "a", {
            enumerable: !0,
            get: function() {
                $v(this, "b", {
                    value: 3,
                    enumerable: !1
                });
            }
        }), {
            b: 2
        })).b) return !0;
        var t = {}, e = {}, r = Symbol("assign detection"), n = "abcdefghijklmnopqrst";
        return t[r] = 7, n.split("").forEach(function(t) {
            e[t] = t;
        }), 7 !== Jv({}, t)[r] || Xv(Jv({}, e)).join("") !== n;
    }) ? function(t, e) {
        for(var r = Hv(t), n = arguments.length, o = 1, i = Vv.f, a = Bv.f; n > o;)for(var u, s = Kv(arguments[o++]), c = i ? Qv(Xv(s), i(s)) : Xv(s), f = c.length, l = 0; f > l;)u = c[l++], qv && !Yv(a, s, u) || (r[u] = s[u]);
        return r;
    } : Jv, td = Zv;
    Pr({
        target: "Object",
        stat: !0,
        arity: 2,
        forced: Object.assign !== td
    }, {
        assign: td
    });
    var ed = n(nt.Object.assign), rd = $t, nd = Ms, od = js;
    Pr({
        target: "Object",
        stat: !0,
        forced: u(function() {
            nd(1);
        }),
        sham: !od
    }, {
        getPrototypeOf: function(t) {
            return nd(rd(t));
        }
    });
    var id = nt.Object.getPrototypeOf;
    Pr({
        target: "Object",
        stat: !0,
        sham: !I
    }, {
        create: Ko
    });
    var ad = nt.Object, ud = function(t, e) {
        return ad.create(t, e);
    }, sd = n(ud), cd = nt, fd = p;
    cd.JSON || (cd.JSON = {
        stringify: JSON.stringify
    });
    var ld = function(t, e, r) {
        return fd(cd.JSON.stringify, null, arguments);
    }, hd = n(ld), pd = "function" == typeof Bun && Bun && "string" == typeof Bun.version, vd = TypeError, dd = function(t, e) {
        if (t < e) throw new vd("Not enough arguments");
        return t;
    }, yd = a, gd = p, md = A, bd = pd, wd = ft, _d = Ru, Td = dd, Ed = yd.Function, Od = /MSIE .\./.test(wd) || bd && function() {
        var t = yd.Bun.version.split(".");
        return t.length < 3 || "0" === t[0] && (t[1] < 3 || "3" === t[1] && "0" === t[2]);
    }(), Sd = function(t, e) {
        var r = e ? 2 : 1;
        return Od ? function(n, o) {
            var i = Td(arguments.length, 1) > r, a = md(n) ? n : Ed(n), u = i ? _d(arguments, r) : [], s = i ? function() {
                gd(a, this, u);
            } : a;
            return e ? t(s, o) : t(s);
        } : t;
    }, xd = Pr, kd = a, jd = Sd(kd.setInterval, !0);
    xd({
        global: !0,
        bind: !0,
        forced: kd.setInterval !== jd
    }, {
        setInterval: jd
    });
    var Ad = Pr, Pd = a, Id = Sd(Pd.setTimeout, !0);
    Ad({
        global: !0,
        bind: !0,
        forced: Pd.setTimeout !== Id
    }, {
        setTimeout: Id
    });
    var Dd = n(nt.setTimeout), Ld = {
        exports: {}
    };
    !function(t) {
        function e(t) {
            if (t) return function(t) {
                return Object.assign(t, e.prototype), t._callbacks = new Map, t;
            }(t);
            this._callbacks = new Map;
        }
        e.prototype.on = function(t, e) {
            const r = this._callbacks.get(t) ?? [];
            return r.push(e), this._callbacks.set(t, r), this;
        }, e.prototype.once = function(t, e) {
            const r = (...n)=>{
                this.off(t, r), e.apply(this, n);
            };
            return r.fn = e, this.on(t, r), this;
        }, e.prototype.off = function(t, e) {
            if (void 0 === t && void 0 === e) return this._callbacks.clear(), this;
            if (void 0 === e) return this._callbacks.delete(t), this;
            const r = this._callbacks.get(t);
            if (r) {
                for (const [t, n] of r.entries())if (n === e || n.fn === e) {
                    r.splice(t, 1);
                    break;
                }
                0 === r.length ? this._callbacks.delete(t) : this._callbacks.set(t, r);
            }
            return this;
        }, e.prototype.emit = function(t, ...e) {
            const r = this._callbacks.get(t);
            if (r) {
                const t = [
                    ...r
                ];
                for (const r of t)r.apply(this, e);
            }
            return this;
        }, e.prototype.listeners = function(t) {
            return this._callbacks.get(t) ?? [];
        }, e.prototype.listenerCount = function(t) {
            if (t) return this.listeners(t).length;
            let e = 0;
            for (const t of this._callbacks.values())e += t.length;
            return e;
        }, e.prototype.hasListeners = function(t) {
            return this.listenerCount(t) > 0;
        }, e.prototype.addEventListener = e.prototype.on, e.prototype.removeListener = e.prototype.off, e.prototype.removeEventListener = e.prototype.off, e.prototype.removeAllListeners = e.prototype.off, t.exports = e;
    }(Ld);
    var Cd, Rd = n(Ld.exports);
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
   * http://naver.github.io/egjs
   *
   * Forked By Naver egjs
   * Copyright (c) hammerjs
   * Licensed under the MIT license */ function Md() {
        return Md = Object.assign || function(t) {
            for(var e = 1; e < arguments.length; e++){
                var r = arguments[e];
                for(var n in r)Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
            }
            return t;
        }, Md.apply(this, arguments);
    }
    function Nd(t, e) {
        t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
    }
    function Fd(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t;
    }
    Cd = "function" != typeof Object.assign ? function(t) {
        if (null == t) throw new TypeError("Cannot convert undefined or null to object");
        for(var e = Object(t), r = 1; r < arguments.length; r++){
            var n = arguments[r];
            if (null != n) for(var o in n)n.hasOwnProperty(o) && (e[o] = n[o]);
        }
        return e;
    } : Object.assign;
    var zd, Ud = Cd, qd = [
        "",
        "webkit",
        "Moz",
        "MS",
        "ms",
        "o"
    ], Wd = "undefined" == typeof document ? {
        style: {}
    } : document.createElement("div"), Yd = Math.round, Gd = Math.abs, Xd = Date.now;
    function Vd(t, e) {
        for(var r, n, o = e[0].toUpperCase() + e.slice(1), i = 0; i < qd.length;){
            if ((n = (r = qd[i]) ? r + o : e) in t) return n;
            i++;
        }
    }
    zd = "undefined" == typeof window ? {} : window;
    var Bd = Vd(Wd.style, "touchAction"), Hd = void 0 !== Bd;
    var Kd = "compute", Jd = "auto", $d = "manipulation", Qd = "none", Zd = "pan-x", ty = "pan-y", ey = function() {
        if (!Hd) return !1;
        var t = {}, e = zd.CSS && zd.CSS.supports;
        return [
            "auto",
            "manipulation",
            "pan-y",
            "pan-x",
            "pan-x pan-y",
            "none"
        ].forEach(function(r) {
            return t[r] = !e || zd.CSS.supports("touch-action", r);
        }), t;
    }(), ry = "ontouchstart" in zd, ny = void 0 !== Vd(zd, "PointerEvent"), oy = ry && /mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent), iy = "touch", ay = "mouse", uy = 25, sy = 1, cy = 4, fy = 8, ly = 1, hy = 2, py = 4, vy = 8, dy = 16, yy = hy | py, gy = vy | dy, my = yy | gy, by = [
        "x",
        "y"
    ], wy = [
        "clientX",
        "clientY"
    ];
    function _y(t, e, r) {
        var n;
        if (t) {
            if (t.forEach) t.forEach(e, r);
            else if (void 0 !== t.length) for(n = 0; n < t.length;)e.call(r, t[n], n, t), n++;
            else for(n in t)t.hasOwnProperty(n) && e.call(r, t[n], n, t);
        }
    }
    function Ty(t, e) {
        return "function" == typeof t ? t.apply(e && e[0] || void 0, e) : t;
    }
    function Ey(t, e) {
        return t.indexOf(e) > -1;
    }
    var Oy = function() {
        function t(t, e) {
            this.manager = t, this.set(e);
        }
        var e = t.prototype;
        return e.set = function(t) {
            t === Kd && (t = this.compute()), Hd && this.manager.element.style && ey[t] && (this.manager.element.style[Bd] = t), this.actions = t.toLowerCase().trim();
        }, e.update = function() {
            this.set(this.manager.options.touchAction);
        }, e.compute = function() {
            var t = [];
            return _y(this.manager.recognizers, function(e) {
                Ty(e.options.enable, [
                    e
                ]) && (t = t.concat(e.getTouchAction()));
            }), function(t) {
                if (Ey(t, Qd)) return Qd;
                var e = Ey(t, Zd), r = Ey(t, ty);
                return e && r ? Qd : e || r ? e ? Zd : ty : Ey(t, $d) ? $d : Jd;
            }(t.join(" "));
        }, e.preventDefaults = function(t) {
            var e = t.srcEvent, r = t.offsetDirection;
            if (this.manager.session.prevented) e.preventDefault();
            else {
                var n = this.actions, o = Ey(n, Qd) && !ey[Qd], i = Ey(n, ty) && !ey[ty], a = Ey(n, Zd) && !ey[Zd];
                if (o) {
                    var u = 1 === t.pointers.length, s = t.distance < 2, c = t.deltaTime < 250;
                    if (u && s && c) return;
                }
                if (!a || !i) return o || i && r & yy || a && r & gy ? this.preventSrc(e) : void 0;
            }
        }, e.preventSrc = function(t) {
            this.manager.session.prevented = !0, t.preventDefault();
        }, t;
    }();
    function Sy(t, e) {
        for(; t;){
            if (t === e) return !0;
            t = t.parentNode;
        }
        return !1;
    }
    function xy(t) {
        var e = t.length;
        if (1 === e) return {
            x: Yd(t[0].clientX),
            y: Yd(t[0].clientY)
        };
        for(var r = 0, n = 0, o = 0; o < e;)r += t[o].clientX, n += t[o].clientY, o++;
        return {
            x: Yd(r / e),
            y: Yd(n / e)
        };
    }
    function ky(t) {
        for(var e = [], r = 0; r < t.pointers.length;)e[r] = {
            clientX: Yd(t.pointers[r].clientX),
            clientY: Yd(t.pointers[r].clientY)
        }, r++;
        return {
            timeStamp: Xd(),
            pointers: e,
            center: xy(e),
            deltaX: t.deltaX,
            deltaY: t.deltaY
        };
    }
    function jy(t, e, r) {
        r || (r = by);
        var n = e[r[0]] - t[r[0]], o = e[r[1]] - t[r[1]];
        return Math.sqrt(n * n + o * o);
    }
    function Ay(t, e, r) {
        r || (r = by);
        var n = e[r[0]] - t[r[0]], o = e[r[1]] - t[r[1]];
        return 180 * Math.atan2(o, n) / Math.PI;
    }
    function Py(t, e) {
        return t === e ? ly : Gd(t) >= Gd(e) ? t < 0 ? hy : py : e < 0 ? vy : dy;
    }
    function Iy(t, e, r) {
        return {
            x: e / t || 0,
            y: r / t || 0
        };
    }
    function Dy(t, e) {
        var r = t.session, n = e.pointers, o = n.length;
        r.firstInput || (r.firstInput = ky(e)), o > 1 && !r.firstMultiple ? r.firstMultiple = ky(e) : 1 === o && (r.firstMultiple = !1);
        var i = r.firstInput, a = r.firstMultiple, u = a ? a.center : i.center, s = e.center = xy(n);
        e.timeStamp = Xd(), e.deltaTime = e.timeStamp - i.timeStamp, e.angle = Ay(u, s), e.distance = jy(u, s), function(t, e) {
            var r = e.center, n = t.offsetDelta || {}, o = t.prevDelta || {}, i = t.prevInput || {};
            e.eventType !== sy && i.eventType !== cy || (o = t.prevDelta = {
                x: i.deltaX || 0,
                y: i.deltaY || 0
            }, n = t.offsetDelta = {
                x: r.x,
                y: r.y
            }), e.deltaX = o.x + (r.x - n.x), e.deltaY = o.y + (r.y - n.y);
        }(r, e), e.offsetDirection = Py(e.deltaX, e.deltaY);
        var c, f, l = Iy(e.deltaTime, e.deltaX, e.deltaY);
        e.overallVelocityX = l.x, e.overallVelocityY = l.y, e.overallVelocity = Gd(l.x) > Gd(l.y) ? l.x : l.y, e.scale = a ? (c = a.pointers, jy((f = n)[0], f[1], wy) / jy(c[0], c[1], wy)) : 1, e.rotation = a ? function(t, e) {
            return Ay(e[1], e[0], wy) + Ay(t[1], t[0], wy);
        }(a.pointers, n) : 0, e.maxPointers = r.prevInput ? e.pointers.length > r.prevInput.maxPointers ? e.pointers.length : r.prevInput.maxPointers : e.pointers.length, function(t, e) {
            var r, n, o, i, a = t.lastInterval || e, u = e.timeStamp - a.timeStamp;
            if (e.eventType !== fy && (u > uy || void 0 === a.velocity)) {
                var s = e.deltaX - a.deltaX, c = e.deltaY - a.deltaY, f = Iy(u, s, c);
                n = f.x, o = f.y, r = Gd(f.x) > Gd(f.y) ? f.x : f.y, i = Py(s, c), t.lastInterval = e;
            } else r = a.velocity, n = a.velocityX, o = a.velocityY, i = a.direction;
            e.velocity = r, e.velocityX = n, e.velocityY = o, e.direction = i;
        }(r, e);
        var h, p = t.element, v = e.srcEvent;
        Sy(h = v.composedPath ? v.composedPath()[0] : v.path ? v.path[0] : v.target, p) && (p = h), e.target = p;
    }
    function Ly(t, e, r) {
        var n = r.pointers.length, o = r.changedPointers.length, i = e & sy && n - o == 0, a = e & (cy | fy) && n - o == 0;
        r.isFirst = !!i, r.isFinal = !!a, i && (t.session = {}), r.eventType = e, Dy(t, r), t.emit("hammer.input", r), t.recognize(r), t.session.prevInput = r;
    }
    function Cy(t) {
        return t.trim().split(/\s+/g);
    }
    function Ry(t, e, r) {
        _y(Cy(e), function(e) {
            t.addEventListener(e, r, !1);
        });
    }
    function My(t, e, r) {
        _y(Cy(e), function(e) {
            t.removeEventListener(e, r, !1);
        });
    }
    function Ny(t) {
        var e = t.ownerDocument || t;
        return e.defaultView || e.parentWindow || window;
    }
    var Fy = function() {
        function t(t, e) {
            var r = this;
            this.manager = t, this.callback = e, this.element = t.element, this.target = t.options.inputTarget, this.domHandler = function(e) {
                Ty(t.options.enable, [
                    t
                ]) && r.handler(e);
            }, this.init();
        }
        var e = t.prototype;
        return e.handler = function() {}, e.init = function() {
            this.evEl && Ry(this.element, this.evEl, this.domHandler), this.evTarget && Ry(this.target, this.evTarget, this.domHandler), this.evWin && Ry(Ny(this.element), this.evWin, this.domHandler);
        }, e.destroy = function() {
            this.evEl && My(this.element, this.evEl, this.domHandler), this.evTarget && My(this.target, this.evTarget, this.domHandler), this.evWin && My(Ny(this.element), this.evWin, this.domHandler);
        }, t;
    }();
    function zy(t, e, r) {
        if (t.indexOf && !r) return t.indexOf(e);
        for(var n = 0; n < t.length;){
            if (r && t[n][r] == e || !r && t[n] === e) return n;
            n++;
        }
        return -1;
    }
    var Uy = {
        pointerdown: sy,
        pointermove: 2,
        pointerup: cy,
        pointercancel: fy,
        pointerout: fy
    }, qy = {
        2: iy,
        3: "pen",
        4: ay,
        5: "kinect"
    }, Wy = "pointerdown", Yy = "pointermove pointerup pointercancel";
    zd.MSPointerEvent && !zd.PointerEvent && (Wy = "MSPointerDown", Yy = "MSPointerMove MSPointerUp MSPointerCancel");
    var Gy = function(t) {
        function e() {
            var r, n = e.prototype;
            return n.evEl = Wy, n.evWin = Yy, (r = t.apply(this, arguments) || this).store = r.manager.session.pointerEvents = [], r;
        }
        return Nd(e, t), e.prototype.handler = function(t) {
            var e = this.store, r = !1, n = t.type.toLowerCase().replace("ms", ""), o = Uy[n], i = qy[t.pointerType] || t.pointerType, a = i === iy, u = zy(e, t.pointerId, "pointerId");
            o & sy && (0 === t.button || a) ? u < 0 && (e.push(t), u = e.length - 1) : o & (cy | fy) && (r = !0), u < 0 || (e[u] = t, this.callback(this.manager, o, {
                pointers: e,
                changedPointers: [
                    t
                ],
                pointerType: i,
                srcEvent: t
            }), r && e.splice(u, 1));
        }, e;
    }(Fy);
    function Xy(t) {
        return Array.prototype.slice.call(t, 0);
    }
    function Vy(t, e, r) {
        for(var n = [], o = [], i = 0; i < t.length;){
            var a = e ? t[i][e] : t[i];
            zy(o, a) < 0 && n.push(t[i]), o[i] = a, i++;
        }
        return r && (n = e ? n.sort(function(t, r) {
            return t[e] > r[e];
        }) : n.sort()), n;
    }
    var By = {
        touchstart: sy,
        touchmove: 2,
        touchend: cy,
        touchcancel: fy
    }, Hy = function(t) {
        function e() {
            var r;
            return e.prototype.evTarget = "touchstart touchmove touchend touchcancel", (r = t.apply(this, arguments) || this).targetIds = {}, r;
        }
        return Nd(e, t), e.prototype.handler = function(t) {
            var e = By[t.type], r = Ky.call(this, t, e);
            r && this.callback(this.manager, e, {
                pointers: r[0],
                changedPointers: r[1],
                pointerType: iy,
                srcEvent: t
            });
        }, e;
    }(Fy);
    function Ky(t, e) {
        var r, n, o = Xy(t.touches), i = this.targetIds;
        if (e & (2 | sy) && 1 === o.length) return i[o[0].identifier] = !0, [
            o,
            o
        ];
        var a = Xy(t.changedTouches), u = [], s = this.target;
        if (n = o.filter(function(t) {
            return Sy(t.target, s);
        }), e === sy) for(r = 0; r < n.length;)i[n[r].identifier] = !0, r++;
        for(r = 0; r < a.length;)i[a[r].identifier] && u.push(a[r]), e & (cy | fy) && delete i[a[r].identifier], r++;
        return u.length ? [
            Vy(n.concat(u), "identifier", !0),
            u
        ] : void 0;
    }
    var Jy = {
        mousedown: sy,
        mousemove: 2,
        mouseup: cy
    }, $y = function(t) {
        function e() {
            var r, n = e.prototype;
            return n.evEl = "mousedown", n.evWin = "mousemove mouseup", (r = t.apply(this, arguments) || this).pressed = !1, r;
        }
        return Nd(e, t), e.prototype.handler = function(t) {
            var e = Jy[t.type];
            e & sy && 0 === t.button && (this.pressed = !0), 2 & e && 1 !== t.which && (e = cy), this.pressed && (e & cy && (this.pressed = !1), this.callback(this.manager, e, {
                pointers: [
                    t
                ],
                changedPointers: [
                    t
                ],
                pointerType: ay,
                srcEvent: t
            }));
        }, e;
    }(Fy), Qy = 2500;
    function Zy(t) {
        var e = t.changedPointers[0];
        if (e.identifier === this.primaryTouch) {
            var r = {
                x: e.clientX,
                y: e.clientY
            }, n = this.lastTouches;
            this.lastTouches.push(r);
            setTimeout(function() {
                var t = n.indexOf(r);
                t > -1 && n.splice(t, 1);
            }, Qy);
        }
    }
    function tg(t, e) {
        t & sy ? (this.primaryTouch = e.changedPointers[0].identifier, Zy.call(this, e)) : t & (cy | fy) && Zy.call(this, e);
    }
    function eg(t) {
        for(var e = t.srcEvent.clientX, r = t.srcEvent.clientY, n = 0; n < this.lastTouches.length; n++){
            var o = this.lastTouches[n], i = Math.abs(e - o.x), a = Math.abs(r - o.y);
            if (i <= 25 && a <= 25) return !0;
        }
        return !1;
    }
    var rg = function() {
        return function(t) {
            function e(e, r) {
                var n;
                return (n = t.call(this, e, r) || this).handler = function(t, e, r) {
                    var o = r.pointerType === iy, i = r.pointerType === ay;
                    if (!(i && r.sourceCapabilities && r.sourceCapabilities.firesTouchEvents)) {
                        if (o) tg.call(Fd(Fd(n)), e, r);
                        else if (i && eg.call(Fd(Fd(n)), r)) return;
                        n.callback(t, e, r);
                    }
                }, n.touch = new Hy(n.manager, n.handler), n.mouse = new $y(n.manager, n.handler), n.primaryTouch = null, n.lastTouches = [], n;
            }
            return Nd(e, t), e.prototype.destroy = function() {
                this.touch.destroy(), this.mouse.destroy();
            }, e;
        }(Fy);
    }();
    function ng(t, e, r) {
        return !!Array.isArray(t) && (_y(t, r[e], r), !0);
    }
    var og = 32, ig = 1;
    function ag(t, e) {
        var r = e.manager;
        return r ? r.get(t) : t;
    }
    function ug(t) {
        return 16 & t ? "cancel" : 8 & t ? "end" : 4 & t ? "move" : 2 & t ? "start" : "";
    }
    var sg = function() {
        function t(t) {
            void 0 === t && (t = {}), this.options = Md({
                enable: !0
            }, t), this.id = ig++, this.manager = null, this.state = 1, this.simultaneous = {}, this.requireFail = [];
        }
        var e = t.prototype;
        return e.set = function(t) {
            return Ud(this.options, t), this.manager && this.manager.touchAction.update(), this;
        }, e.recognizeWith = function(t) {
            if (ng(t, "recognizeWith", this)) return this;
            var e = this.simultaneous;
            return e[(t = ag(t, this)).id] || (e[t.id] = t, t.recognizeWith(this)), this;
        }, e.dropRecognizeWith = function(t) {
            return ng(t, "dropRecognizeWith", this) || (t = ag(t, this), delete this.simultaneous[t.id]), this;
        }, e.requireFailure = function(t) {
            if (ng(t, "requireFailure", this)) return this;
            var e = this.requireFail;
            return -1 === zy(e, t = ag(t, this)) && (e.push(t), t.requireFailure(this)), this;
        }, e.dropRequireFailure = function(t) {
            if (ng(t, "dropRequireFailure", this)) return this;
            t = ag(t, this);
            var e = zy(this.requireFail, t);
            return e > -1 && this.requireFail.splice(e, 1), this;
        }, e.hasRequireFailures = function() {
            return this.requireFail.length > 0;
        }, e.canRecognizeWith = function(t) {
            return !!this.simultaneous[t.id];
        }, e.emit = function(t) {
            var e = this, r = this.state;
            function n(r) {
                e.manager.emit(r, t);
            }
            r < 8 && n(e.options.event + ug(r)), n(e.options.event), t.additionalEvent && n(t.additionalEvent), r >= 8 && n(e.options.event + ug(r));
        }, e.tryEmit = function(t) {
            if (this.canEmit()) return this.emit(t);
            this.state = og;
        }, e.canEmit = function() {
            for(var t = 0; t < this.requireFail.length;){
                if (!(33 & this.requireFail[t].state)) return !1;
                t++;
            }
            return !0;
        }, e.recognize = function(t) {
            var e = Ud({}, t);
            if (!Ty(this.options.enable, [
                this,
                e
            ])) return this.reset(), void (this.state = og);
            56 & this.state && (this.state = 1), this.state = this.process(e), 30 & this.state && this.tryEmit(e);
        }, e.process = function(t) {}, e.getTouchAction = function() {}, e.reset = function() {}, t;
    }(), cg = function(t) {
        function e(e) {
            var r;
            return void 0 === e && (e = {}), (r = t.call(this, Md({
                event: "tap",
                pointers: 1,
                taps: 1,
                interval: 300,
                time: 250,
                threshold: 9,
                posThreshold: 10
            }, e)) || this).pTime = !1, r.pCenter = !1, r._timer = null, r._input = null, r.count = 0, r;
        }
        Nd(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            return [
                $d
            ];
        }, r.process = function(t) {
            var e = this, r = this.options, n = t.pointers.length === r.pointers, o = t.distance < r.threshold, i = t.deltaTime < r.time;
            if (this.reset(), t.eventType & sy && 0 === this.count) return this.failTimeout();
            if (o && i && n) {
                if (t.eventType !== cy) return this.failTimeout();
                var a = !this.pTime || t.timeStamp - this.pTime < r.interval, u = !this.pCenter || jy(this.pCenter, t.center) < r.posThreshold;
                if (this.pTime = t.timeStamp, this.pCenter = t.center, u && a ? this.count += 1 : this.count = 1, this._input = t, 0 === this.count % r.taps) return this.hasRequireFailures() ? (this._timer = setTimeout(function() {
                    e.state = 8, e.tryEmit();
                }, r.interval), 2) : 8;
            }
            return og;
        }, r.failTimeout = function() {
            var t = this;
            return this._timer = setTimeout(function() {
                t.state = og;
            }, this.options.interval), og;
        }, r.reset = function() {
            clearTimeout(this._timer);
        }, r.emit = function() {
            8 === this.state && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
        }, e;
    }(sg), fg = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Md({
                pointers: 1
            }, e)) || this;
        }
        Nd(e, t);
        var r = e.prototype;
        return r.attrTest = function(t) {
            var e = this.options.pointers;
            return 0 === e || t.pointers.length === e;
        }, r.process = function(t) {
            var e = this.state, r = t.eventType, n = 6 & e, o = this.attrTest(t);
            return n && (r & fy || !o) ? 16 | e : n || o ? r & cy ? 8 | e : 2 & e ? 4 | e : 2 : og;
        }, e;
    }(sg);
    function lg(t) {
        return t === dy ? "down" : t === vy ? "up" : t === hy ? "left" : t === py ? "right" : "";
    }
    var hg = function(t) {
        function e(e) {
            var r;
            return void 0 === e && (e = {}), (r = t.call(this, Md({
                event: "pan",
                threshold: 10,
                pointers: 1,
                direction: my
            }, e)) || this).pX = null, r.pY = null, r;
        }
        Nd(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            var t = this.options.direction, e = [];
            return t & yy && e.push(ty), t & gy && e.push(Zd), e;
        }, r.directionTest = function(t) {
            var e = this.options, r = !0, n = t.distance, o = t.direction, i = t.deltaX, a = t.deltaY;
            return o & e.direction || (e.direction & yy ? (o = 0 === i ? ly : i < 0 ? hy : py, r = i !== this.pX, n = Math.abs(t.deltaX)) : (o = 0 === a ? ly : a < 0 ? vy : dy, r = a !== this.pY, n = Math.abs(t.deltaY))), t.direction = o, r && n > e.threshold && o & e.direction;
        }, r.attrTest = function(t) {
            return fg.prototype.attrTest.call(this, t) && (2 & this.state || !(2 & this.state) && this.directionTest(t));
        }, r.emit = function(e) {
            this.pX = e.deltaX, this.pY = e.deltaY;
            var r = lg(e.direction);
            r && (e.additionalEvent = this.options.event + r), t.prototype.emit.call(this, e);
        }, e;
    }(fg), pg = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Md({
                event: "swipe",
                threshold: 10,
                velocity: .3,
                direction: yy | gy,
                pointers: 1
            }, e)) || this;
        }
        Nd(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            return hg.prototype.getTouchAction.call(this);
        }, r.attrTest = function(e) {
            var r, n = this.options.direction;
            return n & (yy | gy) ? r = e.overallVelocity : n & yy ? r = e.overallVelocityX : n & gy && (r = e.overallVelocityY), t.prototype.attrTest.call(this, e) && n & e.offsetDirection && e.distance > this.options.threshold && e.maxPointers === this.options.pointers && Gd(r) > this.options.velocity && e.eventType & cy;
        }, r.emit = function(t) {
            var e = lg(t.offsetDirection);
            e && this.manager.emit(this.options.event + e, t), this.manager.emit(this.options.event, t);
        }, e;
    }(fg), vg = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Md({
                event: "pinch",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        Nd(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            return [
                Qd
            ];
        }, r.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.scale - 1) > this.options.threshold || 2 & this.state);
        }, r.emit = function(e) {
            if (1 !== e.scale) {
                var r = e.scale < 1 ? "in" : "out";
                e.additionalEvent = this.options.event + r;
            }
            t.prototype.emit.call(this, e);
        }, e;
    }(fg), dg = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Md({
                event: "rotate",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        Nd(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            return [
                Qd
            ];
        }, r.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.rotation) > this.options.threshold || 2 & this.state);
        }, e;
    }(fg), yg = function(t) {
        function e(e) {
            var r;
            return void 0 === e && (e = {}), (r = t.call(this, Md({
                event: "press",
                pointers: 1,
                time: 251,
                threshold: 9
            }, e)) || this)._timer = null, r._input = null, r;
        }
        Nd(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            return [
                Jd
            ];
        }, r.process = function(t) {
            var e = this, r = this.options, n = t.pointers.length === r.pointers, o = t.distance < r.threshold, i = t.deltaTime > r.time;
            if (this._input = t, !o || !n || t.eventType & (cy | fy) && !i) this.reset();
            else if (t.eventType & sy) this.reset(), this._timer = setTimeout(function() {
                e.state = 8, e.tryEmit();
            }, r.time);
            else if (t.eventType & cy) return 8;
            return og;
        }, r.reset = function() {
            clearTimeout(this._timer);
        }, r.emit = function(t) {
            8 === this.state && (t && t.eventType & cy ? this.manager.emit(this.options.event + "up", t) : (this._input.timeStamp = Xd(), this.manager.emit(this.options.event, this._input)));
        }, e;
    }(sg), gg = {
        domEvents: !1,
        touchAction: Kd,
        enable: !0,
        inputTarget: null,
        inputClass: null,
        cssProps: {
            userSelect: "none",
            touchSelect: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
        }
    }, mg = [
        [
            dg,
            {
                enable: !1
            }
        ],
        [
            vg,
            {
                enable: !1
            },
            [
                "rotate"
            ]
        ],
        [
            pg,
            {
                direction: yy
            }
        ],
        [
            hg,
            {
                direction: yy
            },
            [
                "swipe"
            ]
        ],
        [
            cg
        ],
        [
            cg,
            {
                event: "doubletap",
                taps: 2
            },
            [
                "tap"
            ]
        ],
        [
            yg
        ]
    ];
    function bg(t, e) {
        var r, n = t.element;
        n.style && (_y(t.options.cssProps, function(o, i) {
            r = Vd(n.style, i), e ? (t.oldCssProps[r] = n.style[r], n.style[r] = o) : n.style[r] = t.oldCssProps[r] || "";
        }), e || (t.oldCssProps = {}));
    }
    var wg = function() {
        function t(t, e) {
            var r, n = this;
            this.options = Ud({}, gg, e || {}), this.options.inputTarget = this.options.inputTarget || t, this.handlers = {}, this.session = {}, this.recognizers = [], this.oldCssProps = {}, this.element = t, this.input = new ((r = this).options.inputClass || (ny ? Gy : oy ? Hy : ry ? rg : $y))(r, Ly), this.touchAction = new Oy(this, this.options.touchAction), bg(this, !0), _y(this.options.recognizers, function(t) {
                var e = n.add(new t[0](t[1]));
                t[2] && e.recognizeWith(t[2]), t[3] && e.requireFailure(t[3]);
            }, this);
        }
        var e = t.prototype;
        return e.set = function(t) {
            return Ud(this.options, t), t.touchAction && this.touchAction.update(), t.inputTarget && (this.input.destroy(), this.input.target = t.inputTarget, this.input.init()), this;
        }, e.stop = function(t) {
            this.session.stopped = t ? 2 : 1;
        }, e.recognize = function(t) {
            var e = this.session;
            if (!e.stopped) {
                var r;
                this.touchAction.preventDefaults(t);
                var n = this.recognizers, o = e.curRecognizer;
                (!o || o && 8 & o.state) && (e.curRecognizer = null, o = null);
                for(var i = 0; i < n.length;)r = n[i], 2 === e.stopped || o && r !== o && !r.canRecognizeWith(o) ? r.reset() : r.recognize(t), !o && 14 & r.state && (e.curRecognizer = r, o = r), i++;
            }
        }, e.get = function(t) {
            if (t instanceof sg) return t;
            for(var e = this.recognizers, r = 0; r < e.length; r++)if (e[r].options.event === t) return e[r];
            return null;
        }, e.add = function(t) {
            if (ng(t, "add", this)) return this;
            var e = this.get(t.options.event);
            return e && this.remove(e), this.recognizers.push(t), t.manager = this, this.touchAction.update(), t;
        }, e.remove = function(t) {
            if (ng(t, "remove", this)) return this;
            var e = this.get(t);
            if (t) {
                var r = this.recognizers, n = zy(r, e);
                -1 !== n && (r.splice(n, 1), this.touchAction.update());
            }
            return this;
        }, e.on = function(t, e) {
            if (void 0 === t || void 0 === e) return this;
            var r = this.handlers;
            return _y(Cy(t), function(t) {
                r[t] = r[t] || [], r[t].push(e);
            }), this;
        }, e.off = function(t, e) {
            if (void 0 === t) return this;
            var r = this.handlers;
            return _y(Cy(t), function(t) {
                e ? r[t] && r[t].splice(zy(r[t], e), 1) : delete r[t];
            }), this;
        }, e.emit = function(t, e) {
            this.options.domEvents && function(t, e) {
                var r = document.createEvent("Event");
                r.initEvent(t, !0, !0), r.gesture = e, e.target.dispatchEvent(r);
            }(t, e);
            var r = this.handlers[t] && this.handlers[t].slice();
            if (r && r.length) {
                e.type = t, e.preventDefault = function() {
                    e.srcEvent.preventDefault();
                };
                for(var n = 0; n < r.length;)r[n](e), n++;
            }
        }, e.destroy = function() {
            this.element && bg(this, !1), this.handlers = {}, this.session = {}, this.input.destroy(), this.element = null;
        }, t;
    }(), _g = {
        touchstart: sy,
        touchmove: 2,
        touchend: cy,
        touchcancel: fy
    }, Tg = function(t) {
        function e() {
            var r, n = e.prototype;
            return n.evTarget = "touchstart", n.evWin = "touchstart touchmove touchend touchcancel", (r = t.apply(this, arguments) || this).started = !1, r;
        }
        return Nd(e, t), e.prototype.handler = function(t) {
            var e = _g[t.type];
            if (e === sy && (this.started = !0), this.started) {
                var r = Eg.call(this, t, e);
                e & (cy | fy) && r[0].length - r[1].length == 0 && (this.started = !1), this.callback(this.manager, e, {
                    pointers: r[0],
                    changedPointers: r[1],
                    pointerType: iy,
                    srcEvent: t
                });
            }
        }, e;
    }(Fy);
    function Eg(t, e) {
        var r = Xy(t.touches), n = Xy(t.changedTouches);
        return e & (cy | fy) && (r = Vy(r.concat(n), "identifier", !0)), [
            r,
            n
        ];
    }
    function Og(t, e, r) {
        var n = "DEPRECATED METHOD: " + e + "\n" + r + " AT \n";
        return function() {
            var e = new Error("get-stack-trace"), r = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace", o = window.console && (window.console.warn || window.console.log);
            return o && o.call(window.console, n, r), t.apply(this, arguments);
        };
    }
    var Sg = Og(function(t, e, r) {
        for(var n = Object.keys(e), o = 0; o < n.length;)(!r || r && void 0 === t[n[o]]) && (t[n[o]] = e[n[o]]), o++;
        return t;
    }, "extend", "Use `assign`."), xg = Og(function(t, e) {
        return Sg(t, e, !0);
    }, "merge", "Use `assign`.");
    function kg(t, e, r) {
        var n, o = e.prototype;
        (n = t.prototype = Object.create(o)).constructor = t, n._super = o, r && Ud(n, r);
    }
    function jg(t, e) {
        return function() {
            return t.apply(e, arguments);
        };
    }
    var Ag = function() {
        var t = function(t, e) {
            return void 0 === e && (e = {}), new wg(t, Md({
                recognizers: mg.concat()
            }, e));
        };
        return t.VERSION = "2.0.17-rc", t.DIRECTION_ALL = my, t.DIRECTION_DOWN = dy, t.DIRECTION_LEFT = hy, t.DIRECTION_RIGHT = py, t.DIRECTION_UP = vy, t.DIRECTION_HORIZONTAL = yy, t.DIRECTION_VERTICAL = gy, t.DIRECTION_NONE = ly, t.DIRECTION_DOWN = dy, t.INPUT_START = sy, t.INPUT_MOVE = 2, t.INPUT_END = cy, t.INPUT_CANCEL = fy, t.STATE_POSSIBLE = 1, t.STATE_BEGAN = 2, t.STATE_CHANGED = 4, t.STATE_ENDED = 8, t.STATE_RECOGNIZED = 8, t.STATE_CANCELLED = 16, t.STATE_FAILED = og, t.Manager = wg, t.Input = Fy, t.TouchAction = Oy, t.TouchInput = Hy, t.MouseInput = $y, t.PointerEventInput = Gy, t.TouchMouseInput = rg, t.SingleTouchInput = Tg, t.Recognizer = sg, t.AttrRecognizer = fg, t.Tap = cg, t.Pan = hg, t.Swipe = pg, t.Pinch = vg, t.Rotate = dg, t.Press = yg, t.on = Ry, t.off = My, t.each = _y, t.merge = xg, t.extend = Sg, t.bindFn = jg, t.assign = Ud, t.inherit = kg, t.bindFn = jg, t.prefixed = Vd, t.toArray = Xy, t.inArray = zy, t.uniqueArray = Vy, t.splitStr = Cy, t.boolOrFn = Ty, t.hasParent = Sy, t.addEventListeners = Ry, t.removeEventListeners = My, t.defaults = Ud({}, gg, {
            preset: mg
        }), t;
    }();
    function Pg(t, e) {
        var r = void 0 !== Rp && Xh(t) || t["@@iterator"];
        if (!r) {
            if (Kp(t) || (r = function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return Ig(t, e);
                var n = qp(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return Wh(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Ig(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                r && (t = r);
                var n = 0, o = function() {};
                return {
                    s: o,
                    n: function() {
                        return n >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[n++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: o
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var i, a = !0, u = !1;
        return {
            s: function() {
                r = r.call(t);
            },
            n: function() {
                var t = r.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, i = t;
            },
            f: function() {
                try {
                    a || null == r.return || r.return();
                } finally{
                    if (u) throw i;
                }
            }
        };
    }
    function Ig(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    var Dg = Rp("DELETE");
    function Lg() {
        var t = Cg.apply(void 0, arguments);
        return Mg(t), t;
    }
    function Cg() {
        for(var t = arguments.length, e = new Array(t), r = 0; r < t; r++)e[r] = arguments[r];
        if (e.length < 2) return e[0];
        var n;
        if (e.length > 2) return Cg.apply(void 0, Up(n = [
            Lg(e[0], e[1])
        ]).call(n, Cp(qp(e).call(e, 2))));
        var o = e[0], i = e[1];
        if (o instanceof Date && i instanceof Date) return o.setTime(i.getTime()), o;
        var a, u = Pg(Hp(i));
        try {
            for(u.s(); !(a = u.n()).done;){
                var s = a.value;
                Object.prototype.propertyIsEnumerable.call(i, s) && (i[s] === Dg ? delete o[s] : null === o[s] || null === i[s] || "object" != typeof o[s] || "object" != typeof i[s] || Kp(o[s]) || Kp(i[s]) ? o[s] = Rg(i[s]) : o[s] = Cg(o[s], i[s]));
            }
        } catch (t) {
            u.e(t);
        } finally{
            u.f();
        }
        return o;
    }
    function Rg(t) {
        return Kp(t) ? Nl(t).call(t, function(t) {
            return Rg(t);
        }) : "object" == typeof t && null !== t ? t instanceof Date ? new Date(t.getTime()) : Cg({}, t) : t;
    }
    function Mg(t) {
        for(var e = 0, r = Qp(t); e < r.length; e++){
            var n = r[e];
            t[n] === Dg ? delete t[n] : "object" == typeof t[n] && null !== t[n] && Mg(t[n]);
        }
    }
    var Ng = "undefined" != typeof window ? window.Hammer || Ag : function() {
        return function() {
            var t = function() {};
            return {
                on: t,
                off: t,
                destroy: t,
                emit: t,
                get: ()=>({
                        set: t
                    })
            };
        }();
    };
    function Fg(t) {
        var e, r = this;
        this._cleanupQueue = [], this.active = !1, this._dom = {
            container: t,
            overlay: document.createElement("div")
        }, this._dom.overlay.classList.add("vis-overlay"), this._dom.container.appendChild(this._dom.overlay), this._cleanupQueue.push(function() {
            r._dom.overlay.parentNode.removeChild(r._dom.overlay);
        });
        var n = Ng(this._dom.overlay);
        n.on("tap", cl(e = this._onTapOverlay).call(e, this)), this._cleanupQueue.push(function() {
            n.destroy();
        });
        var o = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        cv(o).call(o, function(t) {
            n.on(t, function(t) {
                t.srcEvent.stopPropagation();
            });
        }), document && document.body && (this._onClick = function(e) {
            (function(t, e) {
                for(; t;){
                    if (t === e) return !0;
                    t = t.parentNode;
                }
                return !1;
            })(e.target, t) || r.deactivate();
        }, document.body.addEventListener("click", this._onClick), this._cleanupQueue.push(function() {
            document.body.removeEventListener("click", r._onClick);
        })), this._escListener = function(t) {
            ("key" in t ? "Escape" === t.key : 27 === t.keyCode) && r.deactivate();
        };
    }
    Rd(Fg.prototype), Fg.current = null, Fg.prototype.destroy = function() {
        var t, e;
        this.deactivate();
        var r, n = Pg(bv(t = Uv(e = this._cleanupQueue).call(e, 0)).call(t));
        try {
            for(n.s(); !(r = n.n()).done;)(0, r.value)();
        } catch (t) {
            n.e(t);
        } finally{
            n.f();
        }
    }, Fg.prototype.activate = function() {
        Fg.current && Fg.current.deactivate(), Fg.current = this, this.active = !0, this._dom.overlay.style.display = "none", this._dom.container.classList.add("vis-active"), this.emit("change"), this.emit("activate"), document.body.addEventListener("keydown", this._escListener);
    }, Fg.prototype.deactivate = function() {
        this.active = !1, this._dom.overlay.style.display = "block", this._dom.container.classList.remove("vis-active"), document.body.removeEventListener("keydown", this._escListener), this.emit("change"), this.emit("deactivate");
    }, Fg.prototype._onTapOverlay = function(t) {
        this.activate(), t.srcEvent.stopPropagation();
    };
    var zg = jn, Ug = At, qg = TypeError, Wg = function(t) {
        if (zg(t)) return t;
        throw new qg(Ug(t) + " is not a constructor");
    }, Yg = Pr, Gg = p, Xg = Zf, Vg = Wg, Bg = or, Hg = rt, Kg = Ko, Jg = u, $g = st("Reflect", "construct"), Qg = Object.prototype, Zg = [].push, tm = Jg(function() {
        function t() {}
        return !($g(function() {}, [], t) instanceof t);
    }), em = !Jg(function() {
        $g(function() {});
    }), rm = tm || em;
    Yg({
        target: "Reflect",
        stat: !0,
        forced: rm,
        sham: rm
    }, {
        construct: function(t, e) {
            Vg(t), Bg(e);
            var r = arguments.length < 3 ? t : Vg(arguments[2]);
            if (em && !tm) return $g(t, e, r);
            if (t === r) {
                switch(e.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(e[0]);
                    case 2:
                        return new t(e[0], e[1]);
                    case 3:
                        return new t(e[0], e[1], e[2]);
                    case 4:
                        return new t(e[0], e[1], e[2], e[3]);
                }
                var n = [
                    null
                ];
                return Gg(Zg, n, e), new (Gg(Xg, t, n));
            }
            var o = r.prototype, i = Kg(Hg(o) ? o : Qg), a = Gg(t, i, e);
            return Hg(a) ? a : i;
        }
    });
    var nm = n(nt.Reflect.construct), om = n(nt.Object.getOwnPropertySymbols), im = {
        exports: {}
    }, am = Pr, um = u, sm = Z, cm = P.f, fm = I;
    am({
        target: "Object",
        stat: !0,
        forced: !fm || um(function() {
            cm(1);
        }),
        sham: !fm
    }, {
        getOwnPropertyDescriptor: function(t, e) {
            return cm(sm(t), e);
        }
    });
    var lm = nt.Object, hm = im.exports = function(t, e) {
        return lm.getOwnPropertyDescriptor(t, e);
    };
    lm.getOwnPropertyDescriptor.sham && (hm.sham = !0);
    var pm = n(im.exports), vm = Bp, dm = Z, ym = P, gm = tn;
    Pr({
        target: "Object",
        stat: !0,
        sham: !I
    }, {
        getOwnPropertyDescriptors: function(t) {
            for(var e, r, n = dm(t), o = ym.f, i = vm(n), a = {}, u = 0; i.length > u;)void 0 !== (r = o(n, e = i[u++])) && gm(a, e, r);
            return a;
        }
    });
    var mm = n(nt.Object.getOwnPropertyDescriptors), bm = {
        exports: {}
    }, wm = Pr, _m = I, Tm = no.f;
    wm({
        target: "Object",
        stat: !0,
        forced: Object.defineProperties !== Tm,
        sham: !_m
    }, {
        defineProperties: Tm
    });
    var Em = nt.Object, Om = bm.exports = function(t, e) {
        return Em.defineProperties(t, e);
    };
    Em.defineProperties.sham && (Om.sham = !0);
    var Sm = n(bm.exports), xm = n(Mr);
    function km(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t;
    }
    var jm = ud, Am = n(jm);
    Pr({
        target: "Object",
        stat: !0
    }, {
        setPrototypeOf: uc
    });
    var Pm = nt.Object.setPrototypeOf, Im = n(Pm), Dm = n(sl);
    function Lm(t, e) {
        var r;
        return Lm = Im ? Dm(r = Im).call(r) : function(t, e) {
            return t.__proto__ = e, t;
        }, Lm(t, e);
    }
    function Cm(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Am(e && e.prototype, {
            constructor: {
                value: t,
                writable: !0,
                configurable: !0
            }
        }), Fr(t, "prototype", {
            writable: !1
        }), e && Lm(t, e);
    }
    function Rm(t, e) {
        if (e && ("object" === Nf(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return km(t);
    }
    var Mm = id, Nm = n(Mm);
    function Fm(t) {
        var e;
        return Fm = Im ? Dm(e = Nm).call(e) : function(t) {
            return t.__proto__ || Nm(t);
        }, Fm(t);
    }
    var zm = {
        exports: {}
    }, Um = {
        exports: {}
    };
    !function(t) {
        var e = yf, r = Rf;
        function n(o) {
            return t.exports = n = "function" == typeof e && "symbol" == typeof r ? function(t) {
                return typeof t;
            } : function(t) {
                return t && "function" == typeof e && t.constructor === e && t !== e.prototype ? "symbol" : typeof t;
            }, t.exports.__esModule = !0, t.exports.default = t.exports, n(o);
        }
        t.exports = n, t.exports.__esModule = !0, t.exports.default = t.exports;
    }(Um);
    var qm = Um.exports, Wm = sv, Ym = te, Gm = Bp, Xm = P, Vm = Ze, Bm = rt, Hm = mr, Km = Error, Jm = m("".replace), $m = String(new Km("zxcasd").stack), Qm = /\n\s*at [^:]*:[^\n]*/, Zm = Qm.test($m), tb = q, eb = !u(function() {
        var t = new Error("a");
        return !("stack" in t) || (Object.defineProperty(t, "stack", tb(1, 7)), 7 !== t.stack);
    }), rb = mr, nb = function(t, e) {
        if (Zm && "string" == typeof t && !Km.prepareStackTrace) for(; e--;)t = Jm(t, Qm, "");
        return t;
    }, ob = eb, ib = Error.captureStackTrace, ab = Qe, ub = C, sb = or, cb = At, fb = fh, lb = Hr, hb = ct, pb = Eh, vb = yh, db = oh, yb = TypeError, gb = function(t, e) {
        this.stopped = t, this.result = e;
    }, mb = gb.prototype, bb = function(t, e, r) {
        var n, o, i, a, u, s, c, f = r && r.that, l = !(!r || !r.AS_ENTRIES), h = !(!r || !r.IS_RECORD), p = !(!r || !r.IS_ITERATOR), v = !(!r || !r.INTERRUPTED), d = ab(e, f), y = function(t) {
            return n && db(n, "normal", t), new gb(!0, t);
        }, g = function(t) {
            return l ? (sb(t), v ? d(t[0], t[1], y) : d(t[0], t[1])) : v ? d(t, y) : d(t);
        };
        if (h) n = t.iterator;
        else if (p) n = t;
        else {
            if (!(o = vb(t))) throw new yb(cb(t) + " is not iterable");
            if (fb(o)) {
                for(i = 0, a = lb(t); a > i; i++)if ((u = g(t[i])) && hb(mb, u)) return u;
                return new gb(!1);
            }
            n = pb(t, o);
        }
        for(s = h ? t.next : n.next; !(c = ub(s, n)).done;){
            try {
                u = g(c.value);
            } catch (t) {
                db(n, "throw", t);
            }
            if ("object" == typeof u && u && hb(mb, u)) return u;
        }
        return new gb(!1);
    }, wb = ro, _b = Pr, Tb = ct, Eb = Ms, Ob = uc, Sb = function(t, e, r) {
        for(var n = Gm(e), o = Vm.f, i = Xm.f, a = 0; a < n.length; a++){
            var u = n[a];
            Ym(t, u) || r && Ym(r, u) || o(t, u, i(e, u));
        }
    }, xb = Ko, kb = mr, jb = q, Ab = function(t, e) {
        Bm(e) && "cause" in e && Hm(t, "cause", e.cause);
    }, Pb = function(t, e, r, n) {
        ob && (ib ? ib(t, e) : rb(t, "stack", nb(r, n)));
    }, Ib = bb, Db = function(t, e) {
        return void 0 === t ? arguments.length < 2 ? "" : e : wb(t);
    }, Lb = ve("toStringTag"), Cb = Error, Rb = [].push, Mb = function(t, e) {
        var r, n = Tb(Nb, this);
        Ob ? r = Ob(new Cb, n ? Eb(this) : Nb) : (r = n ? this : xb(Nb), kb(r, Lb, "Error")), void 0 !== e && kb(r, "message", Db(e)), Pb(r, Mb, r.stack, 1), arguments.length > 2 && Ab(r, arguments[2]);
        var o = [];
        return Ib(t, Rb, {
            that: o
        }), kb(r, "errors", o), r;
    };
    Ob ? Ob(Mb, Cb) : Sb(Mb, Cb, {
        name: !0
    });
    var Nb = Mb.prototype = xb(Cb.prototype, {
        constructor: jb(1, Mb),
        message: jb(1, ""),
        name: jb(1, "AggregateError")
    });
    _b({
        global: !0,
        constructor: !0,
        arity: 2
    }, {
        AggregateError: Mb
    });
    var Fb, zb, Ub, qb, Wb = st, Yb = di, Gb = I, Xb = ve("species"), Vb = function(t) {
        var e = Wb(t);
        Gb && e && !e[Xb] && Yb(e, Xb, {
            configurable: !0,
            get: function() {
                return this;
            }
        });
    }, Bb = ct, Hb = TypeError, Kb = function(t, e) {
        if (Bb(e, t)) return t;
        throw new Hb("Incorrect invocation");
    }, Jb = or, $b = Wg, Qb = B, Zb = ve("species"), tw = function(t, e) {
        var r, n = Jb(t).constructor;
        return void 0 === n || Qb(r = Jb(n)[Zb]) ? e : $b(r);
    }, ew = /(?:ipad|iphone|ipod).*applewebkit/i.test(ft), rw = a, nw = p, ow = Qe, iw = A, aw = te, uw = u, sw = Do, cw = Ru, fw = je, lw = dd, hw = ew, pw = bl, vw = rw.setImmediate, dw = rw.clearImmediate, yw = rw.process, gw = rw.Dispatch, mw = rw.Function, bw = rw.MessageChannel, ww = rw.String, _w = 0, Tw = {}, Ew = "onreadystatechange";
    uw(function() {
        Fb = rw.location;
    });
    var Ow = function(t) {
        if (aw(Tw, t)) {
            var e = Tw[t];
            delete Tw[t], e();
        }
    }, Sw = function(t) {
        return function() {
            Ow(t);
        };
    }, xw = function(t) {
        Ow(t.data);
    }, kw = function(t) {
        rw.postMessage(ww(t), Fb.protocol + "//" + Fb.host);
    };
    vw && dw || (vw = function(t) {
        lw(arguments.length, 1);
        var e = iw(t) ? t : mw(t), r = cw(arguments, 1);
        return Tw[++_w] = function() {
            nw(e, void 0, r);
        }, zb(_w), _w;
    }, dw = function(t) {
        delete Tw[t];
    }, pw ? zb = function(t) {
        yw.nextTick(Sw(t));
    } : gw && gw.now ? zb = function(t) {
        gw.now(Sw(t));
    } : bw && !hw ? (qb = (Ub = new bw).port2, Ub.port1.onmessage = xw, zb = ow(qb.postMessage, qb)) : rw.addEventListener && iw(rw.postMessage) && !rw.importScripts && Fb && "file:" !== Fb.protocol && !uw(kw) ? (zb = kw, rw.addEventListener("message", xw, !1)) : zb = Ew in fw("script") ? function(t) {
        sw.appendChild(fw("script"))[Ew] = function() {
            sw.removeChild(this), Ow(t);
        };
    } : function(t) {
        setTimeout(Sw(t), 0);
    });
    var jw = {
        set: vw,
        clear: dw
    }, Aw = function() {
        this.head = null, this.tail = null;
    };
    Aw.prototype = {
        add: function(t) {
            var e = {
                item: t,
                next: null
            }, r = this.tail;
            r ? r.next = e : this.head = e, this.tail = e;
        },
        get: function() {
            var t = this.head;
            if (t) return null === (this.head = t.next) && (this.tail = null), t.item;
        }
    };
    var Pw, Iw, Dw, Lw, Cw, Rw = Aw, Mw = /ipad|iphone|ipod/i.test(ft) && "undefined" != typeof Pebble, Nw = /web0s(?!.*chrome)/i.test(ft), Fw = a, zw = Qe, Uw = P.f, qw = jw.set, Ww = Rw, Yw = ew, Gw = Mw, Xw = Nw, Vw = bl, Bw = Fw.MutationObserver || Fw.WebKitMutationObserver, Hw = Fw.document, Kw = Fw.process, Jw = Fw.Promise, $w = Uw(Fw, "queueMicrotask"), Qw = $w && $w.value;
    if (!Qw) {
        var Zw = new Ww, t_ = function() {
            var t, e;
            for(Vw && (t = Kw.domain) && t.exit(); e = Zw.get();)try {
                e();
            } catch (t) {
                throw Zw.head && Pw(), t;
            }
            t && t.enter();
        };
        Yw || Vw || Xw || !Bw || !Hw ? !Gw && Jw && Jw.resolve ? ((Lw = Jw.resolve(void 0)).constructor = Jw, Cw = zw(Lw.then, Lw), Pw = function() {
            Cw(t_);
        }) : Vw ? Pw = function() {
            Kw.nextTick(t_);
        } : (qw = zw(qw, Fw), Pw = function() {
            qw(t_);
        }) : (Iw = !0, Dw = Hw.createTextNode(""), new Bw(t_).observe(Dw, {
            characterData: !0
        }), Pw = function() {
            Dw.data = Iw = !Iw;
        }), Qw = function(t) {
            Zw.head || Pw(), Zw.add(t);
        };
    }
    var e_ = Qw, r_ = function(t) {
        try {
            return {
                error: !1,
                value: t()
            };
        } catch (t) {
            return {
                error: !0,
                value: t
            };
        }
    }, n_ = a.Promise, o_ = "object" == typeof Deno && Deno && "object" == typeof Deno.version, i_ = !o_ && !bl && "object" == typeof window && "object" == typeof document, a_ = a, u_ = n_, s_ = A, c_ = He, f_ = vn, l_ = ve, h_ = i_, p_ = o_, v_ = gt, d_ = u_ && u_.prototype, y_ = l_("species"), g_ = !1, m_ = s_(a_.PromiseRejectionEvent), b_ = c_("Promise", function() {
        var t = f_(u_), e = t !== String(u_);
        if (!e && 66 === v_) return !0;
        if (!d_.catch || !d_.finally) return !0;
        if (!v_ || v_ < 51 || !/native code/.test(t)) {
            var r = new u_(function(t) {
                t(1);
            }), n = function(t) {
                t(function() {}, function() {});
            };
            if ((r.constructor = {})[y_] = n, !(g_ = r.then(function() {}) instanceof n)) return !0;
        }
        return !e && (h_ || p_) && !m_;
    }), w_ = {
        CONSTRUCTOR: b_,
        REJECTION_EVENT: m_,
        SUBCLASSING: g_
    }, __ = {}, T_ = Lt, E_ = TypeError, O_ = function(t) {
        var e, r;
        this.promise = new t(function(t, n) {
            if (void 0 !== e || void 0 !== r) throw new E_("Bad Promise constructor");
            e = t, r = n;
        }), this.resolve = T_(e), this.reject = T_(r);
    };
    __.f = function(t) {
        return new O_(t);
    };
    var S_, x_, k_ = Pr, j_ = bl, A_ = a, P_ = C, I_ = pi, D_ = zi, L_ = Vb, C_ = Lt, R_ = A, M_ = rt, N_ = Kb, F_ = tw, z_ = jw.set, U_ = e_, q_ = function(t, e) {
        try {
            1 === arguments.length ? console.error(t) : console.error(t, e);
        } catch (t) {}
    }, W_ = r_, Y_ = Rw, G_ = ea, X_ = n_, V_ = w_, B_ = __, H_ = "Promise", K_ = V_.CONSTRUCTOR, J_ = V_.REJECTION_EVENT, $_ = G_.getterFor(H_), Q_ = G_.set, Z_ = X_ && X_.prototype, tT = X_, eT = Z_, rT = A_.TypeError, nT = A_.document, oT = A_.process, iT = B_.f, aT = iT, uT = !!(nT && nT.createEvent && A_.dispatchEvent), sT = "unhandledrejection", cT = function(t) {
        var e;
        return !(!M_(t) || !R_(e = t.then)) && e;
    }, fT = function(t, e) {
        var r, n, o, i = e.value, a = 1 === e.state, u = a ? t.ok : t.fail, s = t.resolve, c = t.reject, f = t.domain;
        try {
            u ? (a || (2 === e.rejection && dT(e), e.rejection = 1), !0 === u ? r = i : (f && f.enter(), r = u(i), f && (f.exit(), o = !0)), r === t.promise ? c(new rT("Promise-chain cycle")) : (n = cT(r)) ? P_(n, r, s, c) : s(r)) : c(i);
        } catch (t) {
            f && !o && f.exit(), c(t);
        }
    }, lT = function(t, e) {
        t.notified || (t.notified = !0, U_(function() {
            for(var r, n = t.reactions; r = n.get();)fT(r, t);
            t.notified = !1, e && !t.rejection && pT(t);
        }));
    }, hT = function(t, e, r) {
        var n, o;
        uT ? ((n = nT.createEvent("Event")).promise = e, n.reason = r, n.initEvent(t, !1, !0), A_.dispatchEvent(n)) : n = {
            promise: e,
            reason: r
        }, !J_ && (o = A_["on" + t]) ? o(n) : t === sT && q_("Unhandled promise rejection", r);
    }, pT = function(t) {
        P_(z_, A_, function() {
            var e, r = t.facade, n = t.value;
            if (vT(t) && (e = W_(function() {
                j_ ? oT.emit("unhandledRejection", n, r) : hT(sT, r, n);
            }), t.rejection = j_ || vT(t) ? 2 : 1, e.error)) throw e.value;
        });
    }, vT = function(t) {
        return 1 !== t.rejection && !t.parent;
    }, dT = function(t) {
        P_(z_, A_, function() {
            var e = t.facade;
            j_ ? oT.emit("rejectionHandled", e) : hT("rejectionhandled", e, t.value);
        });
    }, yT = function(t, e, r) {
        return function(n) {
            t(e, n, r);
        };
    }, gT = function(t, e, r) {
        t.done || (t.done = !0, r && (t = r), t.value = e, t.state = 2, lT(t, !0));
    }, mT = function(t, e, r) {
        if (!t.done) {
            t.done = !0, r && (t = r);
            try {
                if (t.facade === e) throw new rT("Promise can't be resolved itself");
                var n = cT(e);
                n ? U_(function() {
                    var r = {
                        done: !1
                    };
                    try {
                        P_(n, e, yT(mT, r, t), yT(gT, r, t));
                    } catch (e) {
                        gT(r, e, t);
                    }
                }) : (t.value = e, t.state = 1, lT(t, !1));
            } catch (e) {
                gT({
                    done: !1
                }, e, t);
            }
        }
    };
    K_ && (eT = (tT = function(t) {
        N_(this, eT), C_(t), P_(S_, this);
        var e = $_(this);
        try {
            t(yT(mT, e), yT(gT, e));
        } catch (t) {
            gT(e, t);
        }
    }).prototype, (S_ = function(t) {
        Q_(this, {
            type: H_,
            done: !1,
            notified: !1,
            parent: !1,
            reactions: new Y_,
            rejection: !1,
            state: 0,
            value: void 0
        });
    }).prototype = I_(eT, "then", function(t, e) {
        var r = $_(this), n = iT(F_(this, tT));
        return r.parent = !0, n.ok = !R_(t) || t, n.fail = R_(e) && e, n.domain = j_ ? oT.domain : void 0, 0 === r.state ? r.reactions.add(n) : U_(function() {
            fT(n, r);
        }), n.promise;
    }), x_ = function() {
        var t = new S_, e = $_(t);
        this.promise = t, this.resolve = yT(mT, e), this.reject = yT(gT, e);
    }, B_.f = iT = function(t) {
        return t === tT || undefined === t ? new x_(t) : aT(t);
    }), k_({
        global: !0,
        constructor: !0,
        wrap: !0,
        forced: K_
    }, {
        Promise: tT
    }), D_(tT, H_, !1, !0), L_(H_);
    var bT = n_, wT = w_.CONSTRUCTOR || !zh(function(t) {
        bT.all(t).then(void 0, function() {});
    }), _T = C, TT = Lt, ET = __, OT = r_, ST = bb;
    Pr({
        target: "Promise",
        stat: !0,
        forced: wT
    }, {
        all: function(t) {
            var e = this, r = ET.f(e), n = r.resolve, o = r.reject, i = OT(function() {
                var r = TT(e.resolve), i = [], a = 0, u = 1;
                ST(t, function(t) {
                    var s = a++, c = !1;
                    u++, _T(r, e, t).then(function(t) {
                        c || (c = !0, i[s] = t, --u || n(i));
                    }, o);
                }), --u || n(i);
            });
            return i.error && o(i.value), r.promise;
        }
    });
    var xT = Pr, kT = w_.CONSTRUCTOR;
    n_ && n_.prototype, xT({
        target: "Promise",
        proto: !0,
        forced: kT,
        real: !0
    }, {
        catch: function(t) {
            return this.then(void 0, t);
        }
    });
    var jT = C, AT = Lt, PT = __, IT = r_, DT = bb;
    Pr({
        target: "Promise",
        stat: !0,
        forced: wT
    }, {
        race: function(t) {
            var e = this, r = PT.f(e), n = r.reject, o = IT(function() {
                var o = AT(e.resolve);
                DT(t, function(t) {
                    jT(o, e, t).then(r.resolve, n);
                });
            });
            return o.error && n(o.value), r.promise;
        }
    });
    var LT = C, CT = __;
    Pr({
        target: "Promise",
        stat: !0,
        forced: w_.CONSTRUCTOR
    }, {
        reject: function(t) {
            var e = CT.f(this);
            return LT(e.reject, void 0, t), e.promise;
        }
    });
    var RT = or, MT = rt, NT = __, FT = function(t, e) {
        if (RT(t), MT(e) && e.constructor === t) return e;
        var r = NT.f(t);
        return (0, r.resolve)(e), r.promise;
    }, zT = Pr, UT = n_, qT = w_.CONSTRUCTOR, WT = FT, YT = st("Promise"), GT = !qT;
    zT({
        target: "Promise",
        stat: !0,
        forced: true
    }, {
        resolve: function(t) {
            return WT(GT && this === YT ? UT : this, t);
        }
    });
    var XT = C, VT = Lt, BT = __, HT = r_, KT = bb;
    Pr({
        target: "Promise",
        stat: !0,
        forced: wT
    }, {
        allSettled: function(t) {
            var e = this, r = BT.f(e), n = r.resolve, o = r.reject, i = HT(function() {
                var r = VT(e.resolve), o = [], i = 0, a = 1;
                KT(t, function(t) {
                    var u = i++, s = !1;
                    a++, XT(r, e, t).then(function(t) {
                        s || (s = !0, o[u] = {
                            status: "fulfilled",
                            value: t
                        }, --a || n(o));
                    }, function(t) {
                        s || (s = !0, o[u] = {
                            status: "rejected",
                            reason: t
                        }, --a || n(o));
                    });
                }), --a || n(o);
            });
            return i.error && o(i.value), r.promise;
        }
    });
    var JT = C, $T = Lt, QT = st, ZT = __, tE = r_, eE = bb, rE = "No one promise resolved";
    Pr({
        target: "Promise",
        stat: !0,
        forced: wT
    }, {
        any: function(t) {
            var e = this, r = QT("AggregateError"), n = ZT.f(e), o = n.resolve, i = n.reject, a = tE(function() {
                var n = $T(e.resolve), a = [], u = 0, s = 1, c = !1;
                eE(t, function(t) {
                    var f = u++, l = !1;
                    s++, JT(n, e, t).then(function(t) {
                        l || c || (c = !0, o(t));
                    }, function(t) {
                        l || c || (l = !0, a[f] = t, --s || i(new r(a, rE)));
                    });
                }), --s || i(new r(a, rE));
            });
            return a.error && i(a.value), n.promise;
        }
    });
    var nE = Pr, oE = n_, iE = u, aE = st, uE = A, sE = tw, cE = FT, fE = oE && oE.prototype;
    nE({
        target: "Promise",
        proto: !0,
        real: !0,
        forced: !!oE && iE(function() {
            fE.finally.call({
                then: function() {}
            }, function() {});
        })
    }, {
        finally: function(t) {
            var e = sE(this, aE("Promise")), r = uE(t);
            return this.then(r ? function(r) {
                return cE(e, t()).then(function() {
                    return r;
                });
            } : t, r ? function(r) {
                return cE(e, t()).then(function() {
                    throw r;
                });
            } : t);
        }
    });
    var lE = nt.Promise, hE = __;
    Pr({
        target: "Promise",
        stat: !0
    }, {
        withResolvers: function() {
            var t = hE.f(this);
            return {
                promise: t.promise,
                resolve: t.resolve,
                reject: t.reject
            };
        }
    });
    var pE = lE, vE = __, dE = r_;
    Pr({
        target: "Promise",
        stat: !0,
        forced: !0
    }, {
        try: function(t) {
            var e = vE.f(this), r = dE(t);
            return (r.error ? e.reject : e.resolve)(r.value), e.promise;
        }
    });
    var yE = pE, gE = mv;
    !function(t) {
        var e = qm.default, r = Nr, n = yf, o = jm, i = Mm, a = Wm, u = up, s = Pm, c = yE, f = gE, l = jp;
        function h() {
            t.exports = h = function() {
                return v;
            }, t.exports.__esModule = !0, t.exports.default = t.exports;
            var p, v = {}, d = Object.prototype, y = d.hasOwnProperty, g = r || function(t, e, r) {
                t[e] = r.value;
            }, m = "function" == typeof n ? n : {}, b = m.iterator || "@@iterator", w = m.asyncIterator || "@@asyncIterator", _ = m.toStringTag || "@@toStringTag";
            function T(t, e, n) {
                return r(t, e, {
                    value: n,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }), t[e];
            }
            try {
                T({}, "");
            } catch (p) {
                T = function(t, e, r) {
                    return t[e] = r;
                };
            }
            function E(t, e, r, n) {
                var i = e && e.prototype instanceof P ? e : P, a = o(i.prototype), u = new W(n || []);
                return g(a, "_invoke", {
                    value: F(t, r, u)
                }), a;
            }
            function O(t, e, r) {
                try {
                    return {
                        type: "normal",
                        arg: t.call(e, r)
                    };
                } catch (t) {
                    return {
                        type: "throw",
                        arg: t
                    };
                }
            }
            v.wrap = E;
            var S = "suspendedStart", x = "suspendedYield", k = "executing", j = "completed", A = {};
            function P() {}
            function I() {}
            function D() {}
            var L = {};
            T(L, b, function() {
                return this;
            });
            var C = i && i(i(Y([])));
            C && C !== d && y.call(C, b) && (L = C);
            var R = D.prototype = P.prototype = o(L);
            function M(t) {
                var e;
                a(e = [
                    "next",
                    "throw",
                    "return"
                ]).call(e, function(e) {
                    T(t, e, function(t) {
                        return this._invoke(e, t);
                    });
                });
            }
            function N(t, r) {
                function n(o, i, a, u) {
                    var s = O(t[o], t, i);
                    if ("throw" !== s.type) {
                        var c = s.arg, f = c.value;
                        return f && "object" == e(f) && y.call(f, "__await") ? r.resolve(f.__await).then(function(t) {
                            n("next", t, a, u);
                        }, function(t) {
                            n("throw", t, a, u);
                        }) : r.resolve(f).then(function(t) {
                            c.value = t, a(c);
                        }, function(t) {
                            return n("throw", t, a, u);
                        });
                    }
                    u(s.arg);
                }
                var o;
                g(this, "_invoke", {
                    value: function(t, e) {
                        function i() {
                            return new r(function(r, o) {
                                n(t, e, r, o);
                            });
                        }
                        return o = o ? o.then(i, i) : i();
                    }
                });
            }
            function F(t, e, r) {
                var n = S;
                return function(o, i) {
                    if (n === k) throw new Error("Generator is already running");
                    if (n === j) {
                        if ("throw" === o) throw i;
                        return {
                            value: p,
                            done: !0
                        };
                    }
                    for(r.method = o, r.arg = i;;){
                        var a = r.delegate;
                        if (a) {
                            var u = z(a, r);
                            if (u) {
                                if (u === A) continue;
                                return u;
                            }
                        }
                        if ("next" === r.method) r.sent = r._sent = r.arg;
                        else if ("throw" === r.method) {
                            if (n === S) throw n = j, r.arg;
                            r.dispatchException(r.arg);
                        } else "return" === r.method && r.abrupt("return", r.arg);
                        n = k;
                        var s = O(t, e, r);
                        if ("normal" === s.type) {
                            if (n = r.done ? j : x, s.arg === A) continue;
                            return {
                                value: s.arg,
                                done: r.done
                            };
                        }
                        "throw" === s.type && (n = j, r.method = "throw", r.arg = s.arg);
                    }
                };
            }
            function z(t, e) {
                var r = e.method, n = t.iterator[r];
                if (n === p) return e.delegate = null, "throw" === r && t.iterator.return && (e.method = "return", e.arg = p, z(t, e), "throw" === e.method) || "return" !== r && (e.method = "throw", e.arg = new TypeError("The iterator does not provide a '" + r + "' method")), A;
                var o = O(n, t.iterator, e.arg);
                if ("throw" === o.type) return e.method = "throw", e.arg = o.arg, e.delegate = null, A;
                var i = o.arg;
                return i ? i.done ? (e[t.resultName] = i.value, e.next = t.nextLoc, "return" !== e.method && (e.method = "next", e.arg = p), e.delegate = null, A) : i : (e.method = "throw", e.arg = new TypeError("iterator result is not an object"), e.delegate = null, A);
            }
            function U(t) {
                var e, r = {
                    tryLoc: t[0]
                };
                1 in t && (r.catchLoc = t[1]), 2 in t && (r.finallyLoc = t[2], r.afterLoc = t[3]), u(e = this.tryEntries).call(e, r);
            }
            function q(t) {
                var e = t.completion || {};
                e.type = "normal", delete e.arg, t.completion = e;
            }
            function W(t) {
                this.tryEntries = [
                    {
                        tryLoc: "root"
                    }
                ], a(t).call(t, U, this), this.reset(!0);
            }
            function Y(t) {
                if (t || "" === t) {
                    var r = t[b];
                    if (r) return r.call(t);
                    if ("function" == typeof t.next) return t;
                    if (!isNaN(t.length)) {
                        var n = -1, o = function e() {
                            for(; ++n < t.length;)if (y.call(t, n)) return e.value = t[n], e.done = !1, e;
                            return e.value = p, e.done = !0, e;
                        };
                        return o.next = o;
                    }
                }
                throw new TypeError(e(t) + " is not iterable");
            }
            return I.prototype = D, g(R, "constructor", {
                value: D,
                configurable: !0
            }), g(D, "constructor", {
                value: I,
                configurable: !0
            }), I.displayName = T(D, _, "GeneratorFunction"), v.isGeneratorFunction = function(t) {
                var e = "function" == typeof t && t.constructor;
                return !!e && (e === I || "GeneratorFunction" === (e.displayName || e.name));
            }, v.mark = function(t) {
                return s ? s(t, D) : (t.__proto__ = D, T(t, _, "GeneratorFunction")), t.prototype = o(R), t;
            }, v.awrap = function(t) {
                return {
                    __await: t
                };
            }, M(N.prototype), T(N.prototype, w, function() {
                return this;
            }), v.AsyncIterator = N, v.async = function(t, e, r, n, o) {
                void 0 === o && (o = c);
                var i = new N(E(t, e, r, n), o);
                return v.isGeneratorFunction(e) ? i : i.next().then(function(t) {
                    return t.done ? t.value : i.next();
                });
            }, M(R), T(R, _, "Generator"), T(R, b, function() {
                return this;
            }), T(R, "toString", function() {
                return "[object Generator]";
            }), v.keys = function(t) {
                var e = Object(t), r = [];
                for(var n in e)u(r).call(r, n);
                return f(r).call(r), function t() {
                    for(; r.length;){
                        var n = r.pop();
                        if (n in e) return t.value = n, t.done = !1, t;
                    }
                    return t.done = !0, t;
                };
            }, v.values = Y, W.prototype = {
                constructor: W,
                reset: function(t) {
                    var e;
                    if (this.prev = 0, this.next = 0, this.sent = this._sent = p, this.done = !1, this.delegate = null, this.method = "next", this.arg = p, a(e = this.tryEntries).call(e, q), !t) for(var r in this)"t" === r.charAt(0) && y.call(this, r) && !isNaN(+l(r).call(r, 1)) && (this[r] = p);
                },
                stop: function() {
                    this.done = !0;
                    var t = this.tryEntries[0].completion;
                    if ("throw" === t.type) throw t.arg;
                    return this.rval;
                },
                dispatchException: function(t) {
                    if (this.done) throw t;
                    var e = this;
                    function r(r, n) {
                        return i.type = "throw", i.arg = t, e.next = r, n && (e.method = "next", e.arg = p), !!n;
                    }
                    for(var n = this.tryEntries.length - 1; n >= 0; --n){
                        var o = this.tryEntries[n], i = o.completion;
                        if ("root" === o.tryLoc) return r("end");
                        if (o.tryLoc <= this.prev) {
                            var a = y.call(o, "catchLoc"), u = y.call(o, "finallyLoc");
                            if (a && u) {
                                if (this.prev < o.catchLoc) return r(o.catchLoc, !0);
                                if (this.prev < o.finallyLoc) return r(o.finallyLoc);
                            } else if (a) {
                                if (this.prev < o.catchLoc) return r(o.catchLoc, !0);
                            } else {
                                if (!u) throw new Error("try statement without catch or finally");
                                if (this.prev < o.finallyLoc) return r(o.finallyLoc);
                            }
                        }
                    }
                },
                abrupt: function(t, e) {
                    for(var r = this.tryEntries.length - 1; r >= 0; --r){
                        var n = this.tryEntries[r];
                        if (n.tryLoc <= this.prev && y.call(n, "finallyLoc") && this.prev < n.finallyLoc) {
                            var o = n;
                            break;
                        }
                    }
                    o && ("break" === t || "continue" === t) && o.tryLoc <= e && e <= o.finallyLoc && (o = null);
                    var i = o ? o.completion : {};
                    return i.type = t, i.arg = e, o ? (this.method = "next", this.next = o.finallyLoc, A) : this.complete(i);
                },
                complete: function(t, e) {
                    if ("throw" === t.type) throw t.arg;
                    return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), A;
                },
                finish: function(t) {
                    for(var e = this.tryEntries.length - 1; e >= 0; --e){
                        var r = this.tryEntries[e];
                        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), q(r), A;
                    }
                },
                catch: function(t) {
                    for(var e = this.tryEntries.length - 1; e >= 0; --e){
                        var r = this.tryEntries[e];
                        if (r.tryLoc === t) {
                            var n = r.completion;
                            if ("throw" === n.type) {
                                var o = n.arg;
                                q(r);
                            }
                            return o;
                        }
                    }
                    throw new Error("illegal catch attempt");
                },
                delegateYield: function(t, e, r) {
                    return this.delegate = {
                        iterator: Y(t),
                        resultName: e,
                        nextLoc: r
                    }, "next" === this.method && (this.arg = p), A;
                }
            }, v;
        }
        t.exports = h, t.exports.__esModule = !0, t.exports.default = t.exports;
    }(zm);
    var mE = (0, zm.exports)(), bE = mE;
    try {
        regeneratorRuntime = mE;
    } catch (t) {
        "object" == typeof globalThis ? globalThis.regeneratorRuntime = mE : Function("r", "regeneratorRuntime = r")(mE);
    }
    var wE = n(bE), _E = {
        exports: {}
    }, TE = u(function() {
        if ("function" == typeof ArrayBuffer) {
            var t = new ArrayBuffer(8);
            Object.isExtensible(t) && Object.defineProperty(t, "a", {
                value: 8
            });
        }
    }), EE = u, OE = rt, SE = T, xE = TE, kE = Object.isExtensible, jE = EE(function() {
        kE(1);
    }) || xE ? function(t) {
        return !!OE(t) && (!xE || "ArrayBuffer" !== SE(t)) && (!kE || kE(t));
    } : kE, AE = !u(function() {
        return Object.isExtensible(Object.preventExtensions({}));
    }), PE = Pr, IE = m, DE = po, LE = rt, CE = te, RE = Ze.f, ME = Jo, NE = Zo, FE = jE, zE = AE, UE = !1, qE = ie("meta"), WE = 0, YE = function(t) {
        RE(t, qE, {
            value: {
                objectID: "O" + WE++,
                weakData: {}
            }
        });
    }, GE = _E.exports = {
        enable: function() {
            GE.enable = function() {}, UE = !0;
            var t = ME.f, e = IE([].splice), r = {};
            r[qE] = 1, t(r).length && (ME.f = function(r) {
                for(var n = t(r), o = 0, i = n.length; o < i; o++)if (n[o] === qE) {
                    e(n, o, 1);
                    break;
                }
                return n;
            }, PE({
                target: "Object",
                stat: !0,
                forced: !0
            }, {
                getOwnPropertyNames: NE.f
            }));
        },
        fastKey: function(t, e) {
            if (!LE(t)) return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;
            if (!CE(t, qE)) {
                if (!FE(t)) return "F";
                if (!e) return "E";
                YE(t);
            }
            return t[qE].objectID;
        },
        getWeakData: function(t, e) {
            if (!CE(t, qE)) {
                if (!FE(t)) return !0;
                if (!e) return !1;
                YE(t);
            }
            return t[qE].weakData;
        },
        onFreeze: function(t) {
            return zE && UE && FE(t) && !CE(t, qE) && YE(t), t;
        }
    };
    DE[qE] = !0;
    var XE = _E.exports, VE = Pr, BE = a, HE = XE, KE = u, JE = mr, $E = bb, QE = Kb, ZE = A, tO = rt, eO = B, rO = zi, nO = Ze.f, oO = ca.forEach, iO = I, aO = ea.set, uO = ea.getterFor, sO = function(t, e, r) {
        var n, o = -1 !== t.indexOf("Map"), i = -1 !== t.indexOf("Weak"), a = o ? "set" : "add", u = BE[t], s = u && u.prototype, c = {};
        if (iO && ZE(u) && (i || s.forEach && !KE(function() {
            (new u).entries().next();
        }))) {
            var f = (n = e(function(e, r) {
                aO(QE(e, f), {
                    type: t,
                    collection: new u
                }), eO(r) || $E(r, e[a], {
                    that: e,
                    AS_ENTRIES: o
                });
            })).prototype, l = uO(t);
            oO([
                "add",
                "clear",
                "delete",
                "forEach",
                "get",
                "has",
                "set",
                "keys",
                "values",
                "entries"
            ], function(t) {
                var e = "add" === t || "set" === t;
                !(t in s) || i && "clear" === t || JE(f, t, function(r, n) {
                    var o = l(this).collection;
                    if (!e && i && !tO(r)) return "get" === t && void 0;
                    var a = o[t](0 === r ? 0 : r, n);
                    return e ? this : a;
                });
            }), i || nO(f, "size", {
                configurable: !0,
                get: function() {
                    return l(this).collection.size;
                }
            });
        } else n = r.getConstructor(e, t, o, a), HE.enable();
        return rO(n, t, !1, !0), c[t] = n, VE({
            global: !0,
            forced: !0
        }, c), i || r.setStrong(n, t, o), n;
    }, cO = pi, fO = Ko, lO = di, hO = function(t, e, r) {
        for(var n in e)r && r.unsafe && t[n] ? t[n] = e[n] : cO(t, n, e[n], r);
        return t;
    }, pO = Qe, vO = Kb, dO = B, yO = bb, gO = Oc, mO = Sc, bO = Vb, wO = I, _O = XE.fastKey, TO = ea.set, EO = ea.getterFor, OO = {
        getConstructor: function(t, e, r, n) {
            var o = t(function(t, o) {
                vO(t, i), TO(t, {
                    type: e,
                    index: fO(null),
                    first: void 0,
                    last: void 0,
                    size: 0
                }), wO || (t.size = 0), dO(o) || yO(o, t[n], {
                    that: t,
                    AS_ENTRIES: r
                });
            }), i = o.prototype, a = EO(e), u = function(t, e, r) {
                var n, o, i = a(t), u = s(t, e);
                return u ? u.value = r : (i.last = u = {
                    index: o = _O(e, !0),
                    key: e,
                    value: r,
                    previous: n = i.last,
                    next: void 0,
                    removed: !1
                }, i.first || (i.first = u), n && (n.next = u), wO ? i.size++ : t.size++, "F" !== o && (i.index[o] = u)), t;
            }, s = function(t, e) {
                var r, n = a(t), o = _O(e);
                if ("F" !== o) return n.index[o];
                for(r = n.first; r; r = r.next)if (r.key === e) return r;
            };
            return hO(i, {
                clear: function() {
                    for(var t = a(this), e = t.index, r = t.first; r;)r.removed = !0, r.previous && (r.previous = r.previous.next = void 0), delete e[r.index], r = r.next;
                    t.first = t.last = void 0, wO ? t.size = 0 : this.size = 0;
                },
                delete: function(t) {
                    var e = this, r = a(e), n = s(e, t);
                    if (n) {
                        var o = n.next, i = n.previous;
                        delete r.index[n.index], n.removed = !0, i && (i.next = o), o && (o.previous = i), r.first === n && (r.first = o), r.last === n && (r.last = i), wO ? r.size-- : e.size--;
                    }
                    return !!n;
                },
                forEach: function(t) {
                    for(var e, r = a(this), n = pO(t, arguments.length > 1 ? arguments[1] : void 0); e = e ? e.next : r.first;)for(n(e.value, e.key, this); e && e.removed;)e = e.previous;
                },
                has: function(t) {
                    return !!s(this, t);
                }
            }), hO(i, r ? {
                get: function(t) {
                    var e = s(this, t);
                    return e && e.value;
                },
                set: function(t, e) {
                    return u(this, 0 === t ? 0 : t, e);
                }
            } : {
                add: function(t) {
                    return u(this, t = 0 === t ? 0 : t, t);
                }
            }), wO && lO(i, "size", {
                configurable: !0,
                get: function() {
                    return a(this).size;
                }
            }), o;
        },
        setStrong: function(t, e, r) {
            var n = e + " Iterator", o = EO(e), i = EO(n);
            gO(t, e, function(t, e) {
                TO(this, {
                    type: n,
                    target: t,
                    state: o(t),
                    kind: e,
                    last: void 0
                });
            }, function() {
                for(var t = i(this), e = t.kind, r = t.last; r && r.removed;)r = r.previous;
                return t.target && (t.last = r = r ? r.next : t.state.first) ? mO("keys" === e ? r.key : "values" === e ? r.value : [
                    r.key,
                    r.value
                ], !1) : (t.target = void 0, mO(void 0, !0));
            }, r ? "entries" : "values", !r, !0), bO(e);
        }
    };
    sO("Map", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, OO);
    var SO = n(nt.Map), xO = ca.some;
    Pr({
        target: "Array",
        proto: !0,
        forced: !ml("some")
    }, {
        some: function(t) {
            return xO(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var kO = nl("Array", "some"), jO = ct, AO = kO, PO = Array.prototype, IO = n(function(t) {
        var e = t.some;
        return t === PO || jO(PO, t) && e === PO.some ? AO : e;
    }), DO = nl("Array", "keys"), LO = fn, CO = te, RO = ct, MO = DO, NO = Array.prototype, FO = {
        DOMTokenList: !0,
        NodeList: !0
    }, zO = n(function(t) {
        var e = t.keys;
        return t === NO || RO(NO, t) && e === NO.keys || CO(FO, LO(t)) ? MO : e;
    }), UO = ii, qO = Math.floor, WO = function(t, e) {
        var r = t.length, n = qO(r / 2);
        return r < 8 ? YO(t, e) : GO(t, WO(UO(t, 0, n), e), WO(UO(t, n), e), e);
    }, YO = function(t, e) {
        for(var r, n, o = t.length, i = 1; i < o;){
            for(n = i, r = t[i]; n && e(t[n - 1], r) > 0;)t[n] = t[--n];
            n !== i++ && (t[n] = r);
        }
        return t;
    }, GO = function(t, e, r, n) {
        for(var o = e.length, i = r.length, a = 0, u = 0; a < o || u < i;)t[a + u] = a < o && u < i ? n(e[a], r[u]) <= 0 ? e[a++] : r[u++] : a < o ? e[a++] : r[u++];
        return t;
    }, XO = WO, VO = ft.match(/firefox\/(\d+)/i), BO = !!VO && +VO[1], HO = /MSIE|Trident/.test(ft), KO = ft.match(/AppleWebKit\/(\d+)\./), JO = !!KO && +KO[1], $O = Pr, QO = m, ZO = Lt, tS = $t, eS = Hr, rS = Tv, nS = ro, oS = u, iS = XO, aS = ml, uS = BO, sS = HO, cS = gt, fS = JO, lS = [], hS = QO(lS.sort), pS = QO(lS.push), vS = oS(function() {
        lS.sort(void 0);
    }), dS = oS(function() {
        lS.sort(null);
    }), yS = aS("sort"), gS = !oS(function() {
        if (cS) return cS < 70;
        if (!(uS && uS > 3)) {
            if (sS) return !0;
            if (fS) return fS < 603;
            var t, e, r, n, o = "";
            for(t = 65; t < 76; t++){
                switch(e = String.fromCharCode(t), t){
                    case 66:
                    case 69:
                    case 70:
                    case 72:
                        r = 3;
                        break;
                    case 68:
                    case 71:
                        r = 4;
                        break;
                    default:
                        r = 2;
                }
                for(n = 0; n < 47; n++)lS.push({
                    k: e + n,
                    v: r
                });
            }
            for(lS.sort(function(t, e) {
                return e.v - t.v;
            }), n = 0; n < lS.length; n++)e = lS[n].k.charAt(0), o.charAt(o.length - 1) !== e && (o += e);
            return "DGBEFHACIJK" !== o;
        }
    });
    $O({
        target: "Array",
        proto: !0,
        forced: vS || !dS || !yS || !gS
    }, {
        sort: function(t) {
            void 0 !== t && ZO(t);
            var e = tS(this);
            if (gS) return void 0 === t ? hS(e) : hS(e, t);
            var r, n, o = [], i = eS(e);
            for(n = 0; n < i; n++)n in e && pS(o, e[n]);
            for(iS(o, function(t) {
                return function(e, r) {
                    return void 0 === r ? -1 : void 0 === e ? 1 : void 0 !== t ? +t(e, r) || 0 : nS(e) > nS(r) ? 1 : -1;
                };
            }(t)), r = eS(o), n = 0; n < r;)e[n] = o[n++];
            for(; n < i;)rS(e, n++);
            return e;
        }
    });
    var mS = nl("Array", "sort"), bS = ct, wS = mS, _S = Array.prototype, TS = n(function(t) {
        var e = t.sort;
        return t === _S || bS(_S, t) && e === _S.sort ? wS : e;
    }), ES = nl("Array", "values"), OS = fn, SS = te, xS = ct, kS = ES, jS = Array.prototype, AS = {
        DOMTokenList: !0,
        NodeList: !0
    }, PS = n(function(t) {
        var e = t.values;
        return t === jS || xS(jS, t) && e === jS.values || SS(AS, OS(t)) ? kS : e;
    }), IS = n(Cf), DS = nl("Array", "entries"), LS = fn, CS = te, RS = ct, MS = DS, NS = Array.prototype, FS = {
        DOMTokenList: !0,
        NodeList: !0
    }, zS = n(function(t) {
        var e = t.entries;
        return t === NS || RS(NS, t) && e === NS.entries || CS(FS, LS(t)) ? MS : e;
    });
    let US;
    const qS = new Uint8Array(16);
    function WS() {
        if (!US && (US = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !US)) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        return US(qS);
    }
    const YS = [];
    for(let t = 0; t < 256; ++t)YS.push((t + 256).toString(16).slice(1));
    var GS = {
        randomUUID: "undefined" != typeof crypto && crypto.randomUUID && crypto.randomUUID.bind(crypto)
    };
    function XS(t, e, r) {
        if (GS.randomUUID && !e && !t) return GS.randomUUID();
        const n = (t = t || {}).random || (t.rng || WS)();
        if (n[6] = 15 & n[6] | 64, n[8] = 63 & n[8] | 128, e) {
            r = r || 0;
            for(let t = 0; t < 16; ++t)e[r + t] = n[t];
            return e;
        }
        return function(t, e = 0) {
            return YS[t[e + 0]] + YS[t[e + 1]] + YS[t[e + 2]] + YS[t[e + 3]] + "-" + YS[t[e + 4]] + YS[t[e + 5]] + "-" + YS[t[e + 6]] + YS[t[e + 7]] + "-" + YS[t[e + 8]] + YS[t[e + 9]] + "-" + YS[t[e + 10]] + YS[t[e + 11]] + YS[t[e + 12]] + YS[t[e + 13]] + YS[t[e + 14]] + YS[t[e + 15]];
        }(n);
    }
    function VS(t) {
        return "string" == typeof t || "number" == typeof t;
    }
    var BS = function() {
        function t(r) {
            e(this, t), Wf(this, "_queue", []), Wf(this, "_timeout", null), Wf(this, "_extended", null), this.delay = null, this.max = 1 / 0, this.setOptions(r);
        }
        return qf(t, [
            {
                key: "setOptions",
                value: function(t) {
                    t && void 0 !== t.delay && (this.delay = t.delay), t && void 0 !== t.max && (this.max = t.max), this._flushIfNeeded();
                }
            },
            {
                key: "destroy",
                value: function() {
                    if (this.flush(), this._extended) {
                        for(var t = this._extended.object, e = this._extended.methods, r = 0; r < e.length; r++){
                            var n = e[r];
                            n.original ? t[n.name] = n.original : delete t[n.name];
                        }
                        this._extended = null;
                    }
                }
            },
            {
                key: "replace",
                value: function(t, e) {
                    var r = this, n = t[e];
                    if (!n) throw new Error("Method " + e + " undefined");
                    t[e] = function() {
                        for(var t = arguments.length, e = new Array(t), o = 0; o < t; o++)e[o] = arguments[o];
                        r.queue({
                            args: e,
                            fn: n,
                            context: this
                        });
                    };
                }
            },
            {
                key: "queue",
                value: function(t) {
                    "function" == typeof t ? this._queue.push({
                        fn: t
                    }) : this._queue.push(t), this._flushIfNeeded();
                }
            },
            {
                key: "_flushIfNeeded",
                value: function() {
                    var t = this;
                    this._queue.length > this.max && this.flush(), null != this._timeout && (clearTimeout(this._timeout), this._timeout = null), this.queue.length > 0 && "number" == typeof this.delay && (this._timeout = Dd(function() {
                        t.flush();
                    }, this.delay));
                }
            },
            {
                key: "flush",
                value: function() {
                    var t, e;
                    cv(t = Uv(e = this._queue).call(e, 0)).call(t, function(t) {
                        t.fn.apply(t.context || t.fn, t.args || []);
                    });
                }
            }
        ], [
            {
                key: "extend",
                value: function(e, r) {
                    var n = new t(r);
                    if (void 0 !== e.flush) throw new Error("Target object already has a property flush");
                    e.flush = function() {
                        n.flush();
                    };
                    var o = [
                        {
                            name: "flush",
                            original: void 0
                        }
                    ];
                    if (r && r.replace) for(var i = 0; i < r.replace.length; i++){
                        var a = r.replace[i];
                        o.push({
                            name: a,
                            original: e[a]
                        }), n.replace(e, a);
                    }
                    return n._extended = {
                        object: e,
                        methods: o
                    }, n;
                }
            }
        ]), t;
    }(), HS = function() {
        function t() {
            e(this, t), Wf(this, "_subscribers", {
                "*": [],
                add: [],
                remove: [],
                update: []
            }), Wf(this, "subscribe", t.prototype.on), Wf(this, "unsubscribe", t.prototype.off);
        }
        return qf(t, [
            {
                key: "_trigger",
                value: function(t, e, r) {
                    var n, o;
                    if ("*" === t) throw new Error("Cannot trigger event *");
                    cv(n = Up(o = []).call(o, Cp(this._subscribers[t]), Cp(this._subscribers["*"]))).call(n, function(n) {
                        n(t, e, null != r ? r : null);
                    });
                }
            },
            {
                key: "on",
                value: function(t, e) {
                    "function" == typeof e && this._subscribers[t].push(e);
                }
            },
            {
                key: "off",
                value: function(t, e) {
                    var r;
                    this._subscribers[t] = Il(r = this._subscribers[t]).call(r, function(t) {
                        return t !== e;
                    });
                }
            }
        ]), t;
    }();
    sO("Set", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, OO);
    var KS = n(nt.Set), JS = n(Eh);
    function $S(t, e) {
        var r = void 0 !== Rp && Xh(t) || t["@@iterator"];
        if (!r) {
            if (Kp(t) || (r = function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return QS(t, e);
                var n = qp(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return Wh(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QS(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                r && (t = r);
                var n = 0, o = function() {};
                return {
                    s: o,
                    n: function() {
                        return n >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[n++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: o
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var i, a = !0, u = !1;
        return {
            s: function() {
                r = r.call(t);
            },
            n: function() {
                var t = r.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, i = t;
            },
            f: function() {
                try {
                    a || null == r.return || r.return();
                } finally{
                    if (u) throw i;
                }
            }
        };
    }
    function QS(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    var ZS = function(t) {
        function r(t) {
            e(this, r), this._pairs = t;
        }
        return qf(r, [
            {
                key: t,
                value: wE.mark(function t() {
                    var e, r, n, o, i;
                    return wE.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = $S(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = Lp(r.value, 2), o = n[0], i = n[1], t.next = 7, [
                                    o,
                                    i
                                ];
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "entries",
                value: wE.mark(function t() {
                    var e, r, n, o, i;
                    return wE.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = $S(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = Lp(r.value, 2), o = n[0], i = n[1], t.next = 7, [
                                    o,
                                    i
                                ];
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "keys",
                value: wE.mark(function t() {
                    var e, r, n, o;
                    return wE.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = $S(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = Lp(r.value, 1), o = n[0], t.next = 7, o;
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "values",
                value: wE.mark(function t() {
                    var e, r, n, o;
                    return wE.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = $S(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = Lp(r.value, 2), o = n[1], t.next = 7, o;
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "toIdArray",
                value: function() {
                    var t;
                    return Nl(t = Cp(this._pairs)).call(t, function(t) {
                        return t[0];
                    });
                }
            },
            {
                key: "toItemArray",
                value: function() {
                    var t;
                    return Nl(t = Cp(this._pairs)).call(t, function(t) {
                        return t[1];
                    });
                }
            },
            {
                key: "toEntryArray",
                value: function() {
                    return Cp(this._pairs);
                }
            },
            {
                key: "toObjectMap",
                value: function() {
                    var t, e = sd(null), r = $S(this._pairs);
                    try {
                        for(r.s(); !(t = r.n()).done;){
                            var n = Lp(t.value, 2), o = n[0], i = n[1];
                            e[o] = i;
                        }
                    } catch (t) {
                        r.e(t);
                    } finally{
                        r.f();
                    }
                    return e;
                }
            },
            {
                key: "toMap",
                value: function() {
                    return new SO(this._pairs);
                }
            },
            {
                key: "toIdSet",
                value: function() {
                    return new KS(this.toIdArray());
                }
            },
            {
                key: "toItemSet",
                value: function() {
                    return new KS(this.toItemArray());
                }
            },
            {
                key: "cache",
                value: function() {
                    return new r(Cp(this._pairs));
                }
            },
            {
                key: "distinct",
                value: function(t) {
                    var e, r = new KS, n = $S(this._pairs);
                    try {
                        for(n.s(); !(e = n.n()).done;){
                            var o = Lp(e.value, 2), i = o[0], a = o[1];
                            r.add(t(a, i));
                        }
                    } catch (t) {
                        n.e(t);
                    } finally{
                        n.f();
                    }
                    return r;
                }
            },
            {
                key: "filter",
                value: function(t) {
                    var e = this._pairs;
                    return new r({
                        [IS]: ()=>wE.mark(function r() {
                                var n, o, i, a, u;
                                return wE.wrap(function(r) {
                                    for(;;)switch(r.prev = r.next){
                                        case 0:
                                            n = $S(e), r.prev = 1, n.s();
                                        case 3:
                                            if ((o = n.n()).done) {
                                                r.next = 10;
                                                break;
                                            }
                                            if (i = Lp(o.value, 2), a = i[0], u = i[1], !t(u, a)) {
                                                r.next = 8;
                                                break;
                                            }
                                            return r.next = 8, [
                                                a,
                                                u
                                            ];
                                        case 8:
                                            r.next = 3;
                                            break;
                                        case 10:
                                            r.next = 15;
                                            break;
                                        case 12:
                                            r.prev = 12, r.t0 = r.catch(1), n.e(r.t0);
                                        case 15:
                                            return r.prev = 15, n.f(), r.finish(15);
                                        case 18:
                                        case "end":
                                            return r.stop();
                                    }
                                }, r, null, [
                                    [
                                        1,
                                        12,
                                        15,
                                        18
                                    ]
                                ]);
                            })()
                    });
                }
            },
            {
                key: "forEach",
                value: function(t) {
                    var e, r = $S(this._pairs);
                    try {
                        for(r.s(); !(e = r.n()).done;){
                            var n = Lp(e.value, 2), o = n[0];
                            t(n[1], o);
                        }
                    } catch (t) {
                        r.e(t);
                    } finally{
                        r.f();
                    }
                }
            },
            {
                key: "map",
                value: function(t) {
                    var e = this._pairs;
                    return new r({
                        [IS]: ()=>wE.mark(function r() {
                                var n, o, i, a, u;
                                return wE.wrap(function(r) {
                                    for(;;)switch(r.prev = r.next){
                                        case 0:
                                            n = $S(e), r.prev = 1, n.s();
                                        case 3:
                                            if ((o = n.n()).done) {
                                                r.next = 9;
                                                break;
                                            }
                                            return i = Lp(o.value, 2), a = i[0], u = i[1], r.next = 7, [
                                                a,
                                                t(u, a)
                                            ];
                                        case 7:
                                            r.next = 3;
                                            break;
                                        case 9:
                                            r.next = 14;
                                            break;
                                        case 11:
                                            r.prev = 11, r.t0 = r.catch(1), n.e(r.t0);
                                        case 14:
                                            return r.prev = 14, n.f(), r.finish(14);
                                        case 17:
                                        case "end":
                                            return r.stop();
                                    }
                                }, r, null, [
                                    [
                                        1,
                                        11,
                                        14,
                                        17
                                    ]
                                ]);
                            })()
                    });
                }
            },
            {
                key: "max",
                value: function(t) {
                    var e = JS(this._pairs), r = e.next();
                    if (r.done) return null;
                    for(var n = r.value[1], o = t(r.value[1], r.value[0]); !(r = e.next()).done;){
                        var i = Lp(r.value, 2), a = i[0], u = i[1], s = t(u, a);
                        s > o && (o = s, n = u);
                    }
                    return n;
                }
            },
            {
                key: "min",
                value: function(t) {
                    var e = JS(this._pairs), r = e.next();
                    if (r.done) return null;
                    for(var n = r.value[1], o = t(r.value[1], r.value[0]); !(r = e.next()).done;){
                        var i = Lp(r.value, 2), a = i[0], u = i[1], s = t(u, a);
                        s < o && (o = s, n = u);
                    }
                    return n;
                }
            },
            {
                key: "reduce",
                value: function(t, e) {
                    var r, n = $S(this._pairs);
                    try {
                        for(n.s(); !(r = n.n()).done;){
                            var o = Lp(r.value, 2), i = o[0];
                            e = t(e, o[1], i);
                        }
                    } catch (t) {
                        n.e(t);
                    } finally{
                        n.f();
                    }
                    return e;
                }
            },
            {
                key: "sort",
                value: function(t) {
                    var e = this;
                    return new r({
                        [IS]: function() {
                            var r;
                            return JS(TS(r = Cp(e._pairs)).call(r, function(e, r) {
                                var n = Lp(e, 2), o = n[0], i = n[1], a = Lp(r, 2), u = a[0], s = a[1];
                                return t(i, s, o, u);
                            }));
                        }
                    });
                }
            }
        ]), r;
    }(IS);
    function tx(t, e) {
        var r = Qp(t);
        if (om) {
            var n = om(t);
            e && (n = Il(n).call(n, function(e) {
                return pm(t, e).enumerable;
            })), r.push.apply(r, n);
        }
        return r;
    }
    function ex(t) {
        for(var e = 1; e < arguments.length; e++){
            var r, n, o = null != arguments[e] ? arguments[e] : {};
            e % 2 ? cv(r = tx(Object(o), !0)).call(r, function(e) {
                Wf(t, e, o[e]);
            }) : mm ? Sm(t, mm(o)) : cv(n = tx(Object(o))).call(n, function(e) {
                xm(t, e, pm(o, e));
            });
        }
        return t;
    }
    function rx(t, e) {
        var r = void 0 !== Rp && Xh(t) || t["@@iterator"];
        if (!r) {
            if (Kp(t) || (r = function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return nx(t, e);
                var n = qp(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return Wh(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return nx(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                r && (t = r);
                var n = 0, o = function() {};
                return {
                    s: o,
                    n: function() {
                        return n >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[n++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: o
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var i, a = !0, u = !1;
        return {
            s: function() {
                r = r.call(t);
            },
            n: function() {
                var t = r.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, i = t;
            },
            f: function() {
                try {
                    a || null == r.return || r.return();
                } finally{
                    if (u) throw i;
                }
            }
        };
    }
    function nx(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    function ox(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !nm) return !1;
            if (nm.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(nm(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var r, n = Fm(t);
            if (e) {
                var o = Fm(this).constructor;
                r = nm(n, arguments, o);
            } else r = n.apply(this, arguments);
            return Rm(this, r);
        };
    }
    var ix = function(t) {
        Cm(n, t);
        var r = ox(n);
        function n(t, o) {
            var i;
            return e(this, n), Wf(km(i = r.call(this)), "_queue", null), t && !Kp(t) && (o = t, t = []), i._options = o || {}, i._data = new SO, i.length = 0, i._idProp = i._options.fieldId || "id", t && t.length && i.add(t), i.setOptions(o), i;
        }
        return qf(n, [
            {
                key: "idProp",
                get: function() {
                    return this._idProp;
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    t && void 0 !== t.queue && (!1 === t.queue ? this._queue && (this._queue.destroy(), this._queue = null) : (this._queue || (this._queue = BS.extend(this, {
                        replace: [
                            "add",
                            "update",
                            "remove"
                        ]
                    })), t.queue && "object" == typeof t.queue && this._queue.setOptions(t.queue)));
                }
            },
            {
                key: "add",
                value: function(t, e) {
                    var r, n = this, o = [];
                    if (Kp(t)) {
                        var i = Nl(t).call(t, function(t) {
                            return t[n._idProp];
                        });
                        if (IO(i).call(i, function(t) {
                            return n._data.has(t);
                        })) throw new Error("A duplicate id was found in the parameter array.");
                        for(var a = 0, u = t.length; a < u; a++)r = this._addItem(t[a]), o.push(r);
                    } else {
                        if (!t || "object" != typeof t) throw new Error("Unknown dataType");
                        r = this._addItem(t), o.push(r);
                    }
                    return o.length && this._trigger("add", {
                        items: o
                    }, e), o;
                }
            },
            {
                key: "update",
                value: function(t, e) {
                    var r = this, n = [], o = [], i = [], a = [], u = this._idProp, s = function(t) {
                        var e = t[u];
                        if (null != e && r._data.has(e)) {
                            var s = t, c = ed({}, r._data.get(e)), f = r._updateItem(s);
                            o.push(f), a.push(s), i.push(c);
                        } else {
                            var l = r._addItem(t);
                            n.push(l);
                        }
                    };
                    if (Kp(t)) for(var c = 0, f = t.length; c < f; c++)t[c] && "object" == typeof t[c] ? s(t[c]) : console.warn("Ignoring input item, which is not an object at index " + c);
                    else {
                        if (!t || "object" != typeof t) throw new Error("Unknown dataType");
                        s(t);
                    }
                    if (n.length && this._trigger("add", {
                        items: n
                    }, e), o.length) {
                        var l = {
                            items: o,
                            oldData: i,
                            data: a
                        };
                        this._trigger("update", l, e);
                    }
                    return Up(n).call(n, o);
                }
            },
            {
                key: "updateOnly",
                value: function(t, e) {
                    var r, n = this;
                    Kp(t) || (t = [
                        t
                    ]);
                    var o = Nl(r = Nl(t).call(t, function(t) {
                        var e = n._data.get(t[n._idProp]);
                        if (null == e) throw new Error("Updating non-existent items is not allowed.");
                        return {
                            oldData: e,
                            update: t
                        };
                    })).call(r, function(t) {
                        var e = t.oldData, r = t.update, o = e[n._idProp], i = function(t) {
                            for(var e, r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), o = 1; o < r; o++)n[o - 1] = arguments[o];
                            return Lg.apply(void 0, Up(e = [
                                {},
                                t
                            ]).call(e, n));
                        }(e, r);
                        return n._data.set(o, i), {
                            id: o,
                            oldData: e,
                            updatedData: i
                        };
                    });
                    if (o.length) {
                        var i = {
                            items: Nl(o).call(o, function(t) {
                                return t.id;
                            }),
                            oldData: Nl(o).call(o, function(t) {
                                return t.oldData;
                            }),
                            data: Nl(o).call(o, function(t) {
                                return t.updatedData;
                            })
                        };
                        return this._trigger("update", i, e), i.items;
                    }
                    return [];
                }
            },
            {
                key: "get",
                value: function(t, e) {
                    var r = void 0, n = void 0, o = void 0;
                    VS(t) ? (r = t, o = e) : Kp(t) ? (n = t, o = e) : o = t;
                    var i, a = o && "Object" === o.returnType ? "Object" : "Array", u = o && Il(o), s = [], c = void 0, f = void 0, l = void 0;
                    if (null != r) (c = this._data.get(r)) && u && !u(c) && (c = void 0);
                    else if (null != n) for(var h = 0, p = n.length; h < p; h++)null == (c = this._data.get(n[h])) || u && !u(c) || s.push(c);
                    else for(var v, d = 0, y = (f = Cp(zO(v = this._data).call(v))).length; d < y; d++)l = f[d], null == (c = this._data.get(l)) || u && !u(c) || s.push(c);
                    if (o && o.order && null == r && this._sort(s, o.order), o && o.fields) {
                        var g = o.fields;
                        if (null != r && null != c) c = this._filterFields(c, g);
                        else for(var m = 0, b = s.length; m < b; m++)s[m] = this._filterFields(s[m], g);
                    }
                    if ("Object" == a) {
                        for(var w = {}, _ = 0, T = s.length; _ < T; _++){
                            var E = s[_];
                            w[E[this._idProp]] = E;
                        }
                        return w;
                    }
                    return null != r ? null !== (i = c) && void 0 !== i ? i : null : s;
                }
            },
            {
                key: "getIds",
                value: function(t) {
                    var e = this._data, r = t && Il(t), n = t && t.order, o = Cp(zO(e).call(e)), i = [];
                    if (r) {
                        if (n) {
                            for(var a = [], u = 0, s = o.length; u < s; u++){
                                var c = o[u], f = this._data.get(c);
                                null != f && r(f) && a.push(f);
                            }
                            this._sort(a, n);
                            for(var l = 0, h = a.length; l < h; l++)i.push(a[l][this._idProp]);
                        } else for(var p = 0, v = o.length; p < v; p++){
                            var d = o[p], y = this._data.get(d);
                            null != y && r(y) && i.push(y[this._idProp]);
                        }
                    } else if (n) {
                        for(var g = [], m = 0, b = o.length; m < b; m++){
                            var w = o[m];
                            g.push(e.get(w));
                        }
                        this._sort(g, n);
                        for(var _ = 0, T = g.length; _ < T; _++)i.push(g[_][this._idProp]);
                    } else for(var E = 0, O = o.length; E < O; E++){
                        var S = o[E], x = e.get(S);
                        null != x && i.push(x[this._idProp]);
                    }
                    return i;
                }
            },
            {
                key: "getDataSet",
                value: function() {
                    return this;
                }
            },
            {
                key: "forEach",
                value: function(t, e) {
                    var r = e && Il(e), n = this._data, o = Cp(zO(n).call(n));
                    if (e && e.order) for(var i = this.get(e), a = 0, u = i.length; a < u; a++){
                        var s = i[a];
                        t(s, s[this._idProp]);
                    }
                    else for(var c = 0, f = o.length; c < f; c++){
                        var l = o[c], h = this._data.get(l);
                        null == h || r && !r(h) || t(h, l);
                    }
                }
            },
            {
                key: "map",
                value: function(t, e) {
                    for(var r = e && Il(e), n = [], o = this._data, i = Cp(zO(o).call(o)), a = 0, u = i.length; a < u; a++){
                        var s = i[a], c = this._data.get(s);
                        null == c || r && !r(c) || n.push(t(c, s));
                    }
                    return e && e.order && this._sort(n, e.order), n;
                }
            },
            {
                key: "_filterFields",
                value: function(t, e) {
                    var r;
                    return t ? Sl(r = Kp(e) ? e : Qp(e)).call(r, function(e, r) {
                        return e[r] = t[r], e;
                    }, {}) : t;
                }
            },
            {
                key: "_sort",
                value: function(t, e) {
                    if ("string" == typeof e) {
                        var r = e;
                        TS(t).call(t, function(t, e) {
                            var n = t[r], o = e[r];
                            return n > o ? 1 : n < o ? -1 : 0;
                        });
                    } else {
                        if ("function" != typeof e) throw new TypeError("Order must be a function or a string");
                        TS(t).call(t, e);
                    }
                }
            },
            {
                key: "remove",
                value: function(t, e) {
                    for(var r = [], n = [], o = Kp(t) ? t : [
                        t
                    ], i = 0, a = o.length; i < a; i++){
                        var u = this._remove(o[i]);
                        if (u) {
                            var s = u[this._idProp];
                            null != s && (r.push(s), n.push(u));
                        }
                    }
                    return r.length && this._trigger("remove", {
                        items: r,
                        oldData: n
                    }, e), r;
                }
            },
            {
                key: "_remove",
                value: function(t) {
                    var e;
                    if (VS(t) ? e = t : t && "object" == typeof t && (e = t[this._idProp]), null != e && this._data.has(e)) {
                        var r = this._data.get(e) || null;
                        return this._data.delete(e), --this.length, r;
                    }
                    return null;
                }
            },
            {
                key: "clear",
                value: function(t) {
                    for(var e, r = Cp(zO(e = this._data).call(e)), n = [], o = 0, i = r.length; o < i; o++)n.push(this._data.get(r[o]));
                    return this._data.clear(), this.length = 0, this._trigger("remove", {
                        items: r,
                        oldData: n
                    }, t), r;
                }
            },
            {
                key: "max",
                value: function(t) {
                    var e, r, n = null, o = null, i = rx(PS(e = this._data).call(e));
                    try {
                        for(i.s(); !(r = i.n()).done;){
                            var a = r.value, u = a[t];
                            "number" == typeof u && (null == o || u > o) && (n = a, o = u);
                        }
                    } catch (t) {
                        i.e(t);
                    } finally{
                        i.f();
                    }
                    return n || null;
                }
            },
            {
                key: "min",
                value: function(t) {
                    var e, r, n = null, o = null, i = rx(PS(e = this._data).call(e));
                    try {
                        for(i.s(); !(r = i.n()).done;){
                            var a = r.value, u = a[t];
                            "number" == typeof u && (null == o || u < o) && (n = a, o = u);
                        }
                    } catch (t) {
                        i.e(t);
                    } finally{
                        i.f();
                    }
                    return n || null;
                }
            },
            {
                key: "distinct",
                value: function(t) {
                    for(var e = this._data, r = Cp(zO(e).call(e)), n = [], o = 0, i = 0, a = r.length; i < a; i++){
                        for(var u = r[i], s = e.get(u)[t], c = !1, f = 0; f < o; f++)if (n[f] == s) {
                            c = !0;
                            break;
                        }
                        c || void 0 === s || (n[o] = s, o++);
                    }
                    return n;
                }
            },
            {
                key: "_addItem",
                value: function(t) {
                    var e = function(t, e) {
                        return null == t[e] && (t[e] = XS()), t;
                    }(t, this._idProp), r = e[this._idProp];
                    if (this._data.has(r)) throw new Error("Cannot add item: item with id " + r + " already exists");
                    return this._data.set(r, e), ++this.length, r;
                }
            },
            {
                key: "_updateItem",
                value: function(t) {
                    var e = t[this._idProp];
                    if (null == e) throw new Error("Cannot update item: item has no id (item: " + hd(t) + ")");
                    var r = this._data.get(e);
                    if (!r) throw new Error("Cannot update item: no item with id " + e + " found");
                    return this._data.set(e, ex(ex({}, r), t)), e;
                }
            },
            {
                key: "stream",
                value: function(t) {
                    if (t) {
                        var e = this._data;
                        return new ZS({
                            [IS]: ()=>wE.mark(function r() {
                                    var n, o, i, a;
                                    return wE.wrap(function(r) {
                                        for(;;)switch(r.prev = r.next){
                                            case 0:
                                                n = rx(t), r.prev = 1, n.s();
                                            case 3:
                                                if ((o = n.n()).done) {
                                                    r.next = 11;
                                                    break;
                                                }
                                                if (i = o.value, null == (a = e.get(i))) {
                                                    r.next = 9;
                                                    break;
                                                }
                                                return r.next = 9, [
                                                    i,
                                                    a
                                                ];
                                            case 9:
                                                r.next = 3;
                                                break;
                                            case 11:
                                                r.next = 16;
                                                break;
                                            case 13:
                                                r.prev = 13, r.t0 = r.catch(1), n.e(r.t0);
                                            case 16:
                                                return r.prev = 16, n.f(), r.finish(16);
                                            case 19:
                                            case "end":
                                                return r.stop();
                                        }
                                    }, r, null, [
                                        [
                                            1,
                                            13,
                                            16,
                                            19
                                        ]
                                    ]);
                                })()
                        });
                    }
                    var r;
                    return new ZS({
                        [IS]: cl(r = zS(this._data)).call(r, this._data)
                    });
                }
            }
        ]), n;
    }(HS);
    function ax(t, e) {
        var r = void 0 !== Rp && Xh(t) || t["@@iterator"];
        if (!r) {
            if (Kp(t) || (r = function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return ux(t, e);
                var n = qp(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return Wh(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ux(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                r && (t = r);
                var n = 0, o = function() {};
                return {
                    s: o,
                    n: function() {
                        return n >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[n++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: o
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var i, a = !0, u = !1;
        return {
            s: function() {
                r = r.call(t);
            },
            n: function() {
                var t = r.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, i = t;
            },
            f: function() {
                try {
                    a || null == r.return || r.return();
                } finally{
                    if (u) throw i;
                }
            }
        };
    }
    function ux(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    function sx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !nm) return !1;
            if (nm.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(nm(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var r, n = Fm(t);
            if (e) {
                var o = Fm(this).constructor;
                r = nm(n, arguments, o);
            } else r = n.apply(this, arguments);
            return Rm(this, r);
        };
    }
    var cx = function(t) {
        Cm(n, t);
        var r = sx(n);
        function n(t, o) {
            var i, a;
            return e(this, n), Wf(km(a = r.call(this)), "length", 0), Wf(km(a), "_ids", new KS), a._options = o || {}, a._listener = cl(i = a._onEvent).call(i, km(a)), a.setData(t), a;
        }
        return qf(n, [
            {
                key: "idProp",
                get: function() {
                    return this.getDataSet().idProp;
                }
            },
            {
                key: "setData",
                value: function(t) {
                    if (this._data) {
                        this._data.off && this._data.off("*", this._listener);
                        var e = this._data.getIds({
                            filter: Il(this._options)
                        }), r = this._data.get(e);
                        this._ids.clear(), this.length = 0, this._trigger("remove", {
                            items: e,
                            oldData: r
                        });
                    }
                    if (null != t) {
                        this._data = t;
                        for(var n = this._data.getIds({
                            filter: Il(this._options)
                        }), o = 0, i = n.length; o < i; o++){
                            var a = n[o];
                            this._ids.add(a);
                        }
                        this.length = n.length, this._trigger("add", {
                            items: n
                        });
                    } else this._data = new ix;
                    this._data.on && this._data.on("*", this._listener);
                }
            },
            {
                key: "refresh",
                value: function() {
                    for(var t = this._data.getIds({
                        filter: Il(this._options)
                    }), e = Cp(this._ids), r = {}, n = [], o = [], i = [], a = 0, u = t.length; a < u; a++){
                        var s = t[a];
                        r[s] = !0, this._ids.has(s) || (n.push(s), this._ids.add(s));
                    }
                    for(var c = 0, f = e.length; c < f; c++){
                        var l = e[c], h = this._data.get(l);
                        null == h ? console.error("If you see this, report it please.") : r[l] || (o.push(l), i.push(h), this._ids.delete(l));
                    }
                    this.length += n.length - o.length, n.length && this._trigger("add", {
                        items: n
                    }), o.length && this._trigger("remove", {
                        items: o,
                        oldData: i
                    });
                }
            },
            {
                key: "get",
                value: function(t, e) {
                    if (null == this._data) return null;
                    var r, n = null;
                    VS(t) || Kp(t) ? (n = t, r = e) : r = t;
                    var o = ed({}, this._options, r), i = Il(this._options), a = r && Il(r);
                    return i && a && (o.filter = function(t) {
                        return i(t) && a(t);
                    }), null == n ? this._data.get(o) : this._data.get(n, o);
                }
            },
            {
                key: "getIds",
                value: function(t) {
                    if (this._data.length) {
                        var e, r = Il(this._options), n = null != t ? Il(t) : null;
                        return e = n ? r ? function(t) {
                            return r(t) && n(t);
                        } : n : r, this._data.getIds({
                            filter: e,
                            order: t && t.order
                        });
                    }
                    return [];
                }
            },
            {
                key: "forEach",
                value: function(t, e) {
                    if (this._data) {
                        var r, n, o = Il(this._options), i = e && Il(e);
                        n = i ? o ? function(t) {
                            return o(t) && i(t);
                        } : i : o, cv(r = this._data).call(r, t, {
                            filter: n,
                            order: e && e.order
                        });
                    }
                }
            },
            {
                key: "map",
                value: function(t, e) {
                    if (this._data) {
                        var r, n, o = Il(this._options), i = e && Il(e);
                        return n = i ? o ? function(t) {
                            return o(t) && i(t);
                        } : i : o, Nl(r = this._data).call(r, t, {
                            filter: n,
                            order: e && e.order
                        });
                    }
                    return [];
                }
            },
            {
                key: "getDataSet",
                value: function() {
                    return this._data.getDataSet();
                }
            },
            {
                key: "stream",
                value: function(t) {
                    var e;
                    return this._data.stream(t || {
                        [IS]: cl(e = zO(this._ids)).call(e, this._ids)
                    });
                }
            },
            {
                key: "dispose",
                value: function() {
                    var t;
                    null !== (t = this._data) && void 0 !== t && t.off && this._data.off("*", this._listener);
                    var e, r = "This data view has already been disposed of.", o = {
                        get: function() {
                            throw new Error(r);
                        },
                        set: function() {
                            throw new Error(r);
                        },
                        configurable: !1
                    }, i = ax(Hp(n.prototype));
                    try {
                        for(i.s(); !(e = i.n()).done;){
                            var a = e.value;
                            xm(this, a, o);
                        }
                    } catch (t) {
                        i.e(t);
                    } finally{
                        i.f();
                    }
                }
            },
            {
                key: "_onEvent",
                value: function(t, e, r) {
                    if (e && e.items && this._data) {
                        var n = e.items, o = [], i = [], a = [], u = [], s = [], c = [];
                        switch(t){
                            case "add":
                                for(var f = 0, l = n.length; f < l; f++){
                                    var h = n[f];
                                    this.get(h) && (this._ids.add(h), o.push(h));
                                }
                                break;
                            case "update":
                                for(var p = 0, v = n.length; p < v; p++){
                                    var d = n[p];
                                    this.get(d) ? this._ids.has(d) ? (i.push(d), s.push(e.data[p]), u.push(e.oldData[p])) : (this._ids.add(d), o.push(d)) : this._ids.has(d) && (this._ids.delete(d), a.push(d), c.push(e.oldData[p]));
                                }
                                break;
                            case "remove":
                                for(var y = 0, g = n.length; y < g; y++){
                                    var m = n[y];
                                    this._ids.has(m) && (this._ids.delete(m), a.push(m), c.push(e.oldData[y]));
                                }
                        }
                        this.length += o.length - a.length, o.length && this._trigger("add", {
                            items: o
                        }, r), i.length && this._trigger("update", {
                            items: i,
                            oldData: u,
                            data: s
                        }, r), a.length && this._trigger("remove", {
                            items: a,
                            oldData: c
                        }, r);
                    }
                }
            }
        ]), n;
    }(HS);
    function fx(t, e) {
        return "object" == typeof e && null !== e && t === e.idProp && "function" == typeof e.add && "function" == typeof e.clear && "function" == typeof e.distinct && "function" == typeof cv(e) && "function" == typeof e.get && "function" == typeof e.getDataSet && "function" == typeof e.getIds && "number" == typeof e.length && "function" == typeof Nl(e) && "function" == typeof e.max && "function" == typeof e.min && "function" == typeof e.off && "function" == typeof e.on && "function" == typeof e.remove && "function" == typeof e.setOptions && "function" == typeof e.stream && "function" == typeof e.update && "function" == typeof e.updateOnly;
    }
    t.DELETE = Dg, t.DataSet = ix, t.DataStream = ZS, t.DataView = cx, t.Queue = BS, t.createNewDataPipeFrom = function(t) {
        return new th(t);
    }, t.isDataSetLike = fx, t.isDataViewLike = function(t, e) {
        return "object" == typeof e && null !== e && t === e.idProp && "function" == typeof cv(e) && "function" == typeof e.get && "function" == typeof e.getDataSet && "function" == typeof e.getIds && "number" == typeof e.length && "function" == typeof Nl(e) && "function" == typeof e.off && "function" == typeof e.on && "function" == typeof e.stream && fx(t, e.getDataSet());
    };
});

},{}],"kO4sA":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"9lPY6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateBarabasiAlbertGraph", ()=>generateBarabasiAlbertGraph);
parcelHelpers.export(exports, "generateRandomGraph", ()=>generateRandomGraph);
parcelHelpers.export(exports, "selectNodesByDegree", ()=>selectNodesByDegree);
function generateBarabasiAlbertGraph(numberOfNodes, numberOfGuardians) {
    const edges = [];
    const degrees = new Array(numberOfNodes).fill(0);
    const degreeList = [];
    // Initialize the initial fully connected network
    for(let i = 0; i < numberOfGuardians; i++){
        for(let j = 0; j < numberOfGuardians; j++)if (i !== j) {
            edges.push([
                i,
                j
            ]);
            degrees[i]++; // Out-degree
            degrees[j]++; // In-degree
            degreeList.push(i);
            degreeList.push(j);
        }
    }
    // Adding new nodes
    for(let newNode = numberOfGuardians; newNode < numberOfNodes; newNode++){
        const targets = new Set();
        while(targets.size < numberOfGuardians){
            const randomIndex = Math.floor(Math.random() * degreeList.length);
            const targetNode = degreeList[randomIndex];
            if (targetNode !== newNode && !targets.has(targetNode)) {
                targets.add(targetNode);
                edges.push([
                    newNode,
                    targetNode
                ]);
                degrees[newNode]++;
                degrees[targetNode]++;
                degreeList.push(newNode);
                degreeList.push(targetNode);
            }
        }
    }
    return {
        adjacencyList: buildAdjacencyList(edges, numberOfNodes),
        degrees
    };
}
function generateRandomGraph(numberOfNodes, numberOfGuardians) {
    const edges = [];
    const degrees = new Array(numberOfNodes).fill(0);
    // Iterate over all possible pairs of nodes
    for(let i = 0; i < numberOfNodes; i++){
        // Ensure that node i is connected to at least numberOfGuardians nodes
        const connections = new Set();
        while(connections.size < numberOfGuardians){
            const j = Math.floor(Math.random() * numberOfNodes);
            if (j !== i && !connections.has(j)) {
                connections.add(j);
                edges.push([
                    i,
                    j
                ]);
                edges.push([
                    j,
                    i
                ]);
                degrees[i]++;
                degrees[j]++;
            }
        }
    }
    return {
        adjacencyList: buildAdjacencyList(edges, numberOfNodes),
        degrees
    };
}
function buildAdjacencyList(edges, numberOfNodes) {
    const adjacencyList = new Map();
    for(let i = 0; i < numberOfNodes; i++)adjacencyList.set(i, new Set());
    for (const [source, target] of edges)adjacencyList.get(source).add(target);
    return adjacencyList;
}
function selectNodesByDegree(degrees, numberOfNodesToSelect) {
    const N = degrees.length;
    // Compute total degree and cumulative degrees
    const cumulativeDegrees = new Array(N);
    let totalDegree = 0;
    for(let i = 0; i < N; i++){
        totalDegree += degrees[i];
        cumulativeDegrees[i] = totalDegree;
    }
    const selectedNodes = new Set();
    for(let k = 0; k < numberOfNodesToSelect; k++){
        const rand = Math.random() * totalDegree;
        // Binary search to find the node corresponding to rand
        let left = 0;
        let right = N - 1;
        let selectedNode = -1;
        while(left <= right){
            const mid = Math.floor((left + right) / 2);
            if (rand < cumulativeDegrees[mid]) {
                if (mid === 0 || rand >= cumulativeDegrees[mid - 1]) {
                    selectedNode = mid;
                    break;
                } else right = mid - 1;
            } else left = mid + 1;
        }
        // Handle edge cases
        if (selectedNode === -1) selectedNode = N - 1;
        // If you want unique nodes, uncomment the following lines
        if (!selectedNodes.has(selectedNode)) selectedNodes.add(selectedNode);
        else k--; // Retry if duplicate
    // If duplicates are acceptable, use:
    // selectedNodes.add(selectedNode);
    }
    return selectedNodes;
}
// Example usage:
const numberOfNodes = 1000000; // 1 million nodes
const numberOfGuardians = 4;
const numberOfNodesToSelect = numberOfNodes * 0.2;
const { adjacencyList, degrees } = generateBarabasiAlbertGraph(numberOfNodes, numberOfGuardians);
const zeroDegreeNodes = degrees.filter((deg)=>deg === 0).length;
console.log(`Number of nodes with degree zero: ${zeroDegreeNodes}`);
// Since printing the entire graph is impractical, you might want to check specific properties
console.log(`Generated a BA graph with ${numberOfNodes} nodes and ${adjacencyList.size} adjacency entries.`);
// Select nodes based on degree
const selectedNodes = selectNodesByDegree(degrees, numberOfNodesToSelect);
const selectedNodesArray = Array.from(selectedNodes);
// Output selected nodes
console.log(`Selected ${selectedNodesArray.length} nodes based on degree.`);
// If you want to see a sample of selected nodes
console.log("Sample selected nodes:", selectedNodesArray.slice(0, 10));
// Compute average degree of all nodes
const averageDegreeAll = degrees.reduce((sum, deg)=>sum + deg, 0) / numberOfNodes;
// Compute average degree of selected nodes
const averageDegreeSelected = selectedNodesArray.reduce((sum, nodeId)=>sum + degrees[nodeId], 0) / selectedNodesArray.length;
console.log(`Average degree of all nodes: ${averageDegreeAll.toFixed(2)}`);
console.log(`Average degree of selected nodes: ${averageDegreeSelected.toFixed(2)}`);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"kO4sA"}]},["lt3WS","h7u1C"], "h7u1C", "parcelRequirec720")

//# sourceMappingURL=index.b71e74eb.js.map
